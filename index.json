[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 49,
    "kind": "external",
    "name": "http~ClientRequest",
    "externalLink": "https://nodejs.org/dist/latest/docs/api/http.html#http_class_http_clientrequest",
    "memberof": "lib/.external-nodejs.js",
    "static": true,
    "longname": "lib/.external-nodejs.js~http~ClientRequest",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "lib/config/index.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\n'use strict'\nconst path = require('path')\nconst { inspect } = require('util')\nconst fs = require('fs-extra')\nconst untildify = require('untildify')\nconst { defaultOpts } = require('../defaults')\nconst cp = require('../utils/colorPrinters')\nconst FH = require('../frontier/helper')\n\n/**\n * @desc Informs the user that they did not export the correct type of user script\n * @param {any} exposed\n */\nfunction badExport (exposed) {\n  console.log(cp.chalk`{bold.red Squidwarc does not know how to handled the supplied script:\nYou supplied a ${typeof exposed}:\n    ${inspect(exposed, { depth: null })}}\n`)\n  console.log(cp.chalk.bold.blue('Please export a function similar to:'))\n  console.log(cp.chalk.bold.blue('module.exports = async function (page) {....}'))\n}\n\n/**\n * @desc Informs the user that they did not export an async function\n * @param {any} notAsyncFn\n */\nfunction notAsync (notAsyncFn) {\n  console.log(cp.chalk`{bold.red Squidwarc expects the function exported by user scripts to be async functions\nYou supplied:\n    ${notAsyncFn.toString()}}`)\n  console.log(cp.chalk.bold.blue('Please export a function similar to:'))\n  console.log(cp.chalk.bold.blue('module.exports = async function (page) {....}'))\n}\n\n/**\n * @desc Informs the user that the user script is good\n */\nfunction usrFNGood () {\n  console.log(cp.chalk`{bold.green With great power comes great responsibility!}\n{bold.red Squidwarc is not responsible for ill behaved user supplied scripts!}\n`)\n}\n\n/**\n * @desc Crawl config loader\n */\nclass Config {\n  /**\n   * @desc Loads the config file and performs the preliminary normalization\n   * @param {string} configPath - Path to this crawls config file\n   * @returns {Promise<CrawlConfig>}\n   */\n  static async loadConfig (configPath) {\n    let {\n      use = 'chrome',\n      headless = true,\n      mode = 'page-only',\n      depth = 1,\n      connect = defaultOpts.connect,\n      crawlControl = defaultOpts.crawlControl,\n      warc = defaultOpts.warc,\n      seeds,\n      script\n    } = await fs.readJSON(configPath)\n    connect.host = connect.host || defaultOpts.connect.host\n    connect.port = connect.port || defaultOpts.connect.port\n    connect.launch = connect.launch || defaultOpts.connect.launch\n    warc.naming = warc.naming || defaultOpts.warc.naming\n    warc.output = warc.output || defaultOpts.warc.output\n    warc.append = warc.append || defaultOpts.warc.append\n    const versionInfo = {}\n    versionInfo.isPartOf = warc.isPartOf || defaultOpts.versionInfo.isPartOfV\n    versionInfo.warcInfoDescription =\n      warc.infoDescription || defaultOpts.versionInfo.warcInfoDescription\n    script = await Config.ensureScript(script)\n    if (script != null && use === 'chrome') {\n      use = 'puppeteer'\n    }\n    seeds = await Config.ensureSeeds(seeds, mode, depth)\n    return {\n      chrome: {\n        use,\n        headless,\n        local: false,\n        ...connect\n      },\n      mode,\n      depth,\n      crawlControl,\n      warc,\n      seeds,\n      script,\n      versionInfo\n    }\n  }\n\n  /**\n   * @desc Load the user supplied script (if it exists) and perform validation of it\n   * @param {?string} scriptP - The path to the user script\n   * @returns {Promise<UserScript | null>}\n   */\n  static async ensureScript (scriptP) {\n    if (scriptP == null) {\n      return null\n    }\n    if (typeof scriptP !== 'string') {\n      cp.bred(\n        `The value for the script field found in the supplied config is not a \"string\" it is a ${typeof scriptP}`\n      )\n      cp.bred(\n        'To have Squidwarc use a script during crawling please use a string that is a path to the script'\n      )\n      return null\n    }\n    const scriptPath = path.resolve(untildify(scriptP))\n    if (!await fs.pathExists(scriptPath)) {\n      cp.bred(\n        `The supplied script path does not exist ${scriptP} [resolved path = ${scriptPath}]`\n      )\n      return null\n    }\n\n    let good = true\n    let userFN\n\n    try {\n      userFN = require(scriptPath)\n    } catch (e) {\n      cp.error('Squidwarc is unable to use the supplied user script due to an error!', e)\n      good = false\n    }\n\n    if (good && typeof userFN !== 'function') {\n      badExport(userFN)\n      good = false\n    }\n\n    if (good && userFN[Symbol.toStringTag] !== 'AsyncFunction') {\n      notAsync(userFN)\n      good = false\n    }\n\n    if (good) {\n      usrFNGood()\n    }\n\n    return userFN\n  }\n\n  /**\n   * @desc Normalizes the supplied seeds. If it value of the seeds field is a string loads the seeds from the file\n   * @param {string | string[]} seeds - The seeds to be normalized\n   * @param {string} mode             - The crawl mode for the seeds\n   * @param {number} depth            - The depth of the crawl\n   * @return {Promise<Seed | Seed[]>}\n   */\n  static async ensureSeeds (seeds, mode, depth) {\n    if (!Array.isArray(seeds)) {\n      if (typeof seeds !== 'string') {\n        throw new Error(\n          `The value of the seeds field was not an Array\\nExpecting a sting that is path to a seeds file.\\nSquidwarc found \"${typeof seeds}\"`\n        )\n      }\n      seeds = untildify(seeds)\n      const seedPathExists = await fs.pathExists(seeds)\n      if (!seedPathExists) {\n        throw new Error(\n          `The path to the seed list file contained in the seeds field does not exist`\n        )\n      }\n      seeds = await fs.readJSON(seeds)\n      if (!Array.isArray(seeds)) {\n        throw new Error(\n          `The contents of the seeds file is not an array. Squidwarc found \"${typeof seeds}\"`\n        )\n      }\n    }\n    return FH.normalizeSeeds(seeds, mode, depth)\n  }\n}\n\n/**\n * @type {Config}\n */\nmodule.exports = Config\n\n/**\n * @typedef {Object} WARCOptions\n * @property {string} [naming = url] - The naming scheme to be used for WARC generation\n * @property {string} [output = <current working directory>] - Path to the directory the WARCs are to be created in\n * @property {boolean} [append = false] - Should Squidwarc create a single WARC file for the crawl or no\n */\n\n/**\n * @typedef {Object} CrawlControl\n * @property {number} [globalWait = 60000]  - Maximum amount of time, in milliseconds, that Squidwarc should wait before generating a WARC and moving to the next URL\n * @property {number} [numInflight = 2]     - The number of inflight requests (requests with no response) that should exist before starting the inflightIdle timer\n * @property {number} [inflightIdle = 1000] - Amount of time, in milliseconds, that should elapse when there are only numInflight requests for network idle to be determined\n * @property {number} [navWait = 8000]      - Maximum amount of time, in milliseconds, that Squidwarc should wait for indication that the browser has navigated to the page being crawled\n */\n\n/**\n * @typedef {Object} VersionInfo\n * @property {string} [isPartOfV = Squidwarc Crawl] - The value for the isPartOf field of the WARC Info Record\n * @property {string} [warcInfoDescription = High fidelity preservation using Squidwarc] - The value for the description field of the WARC Info Record\n */\n\n/**\n * @typedef {function(page: Page): Promise<void>} UserScript - A user supplied function that Squidwarc will execute once network idle has been reached\n */\n\n/**\n * @typedef {Object} ChromeOptions\n * @property {string}  [use = chrome]     - Should Squidwarc connect directly to Chrome/Chromium or via puppeteer\n * @property {string}  [executable]   - Path to the browser executable or command to be use to launch the browser\n * @property {string}  [userDataDir]      - Path to a user data directory (generated by Chrome/Chromium) to be used rather than a temporary one\n * @property {string}  [host = localhost] - The host name the browsers CDP endpoint is listing on\n * @property {number}  [port = 9222]      - The port number the browsers CDP endpoint is listing on\n * @property {boolean} [launch = true]    - Should Squidwarc launch and manage the browser or connect to an already running instance\n * @property {boolean} [headless = true]  - Should the browser used by Squidwarc be launched in headless mode\n * @property {boolean} [local = false]    - Should the CDP descriptor used by the chrome-remote-interface use the local CDP descriptor or fetch it from the browser connecting to\n */\n\n/**\n * @typedef {Object} CrawlConfig\n * @property {ChromeOptions}  chrome      - Information about how to connect to or launch Chrome/Chromium\n * @property {string}  [mode = page-only] - The mode this crawl is to be operating in\n * @property {number}  [depth = 1]        - The depth of this crawl\n * @property {CrawlControl} crawlControl  - Options for fine tuning the crawl\n * @property {WARCOptions} warc           - Options for how this crawls WARCs should be created\n * @property {VersionInfo} versionInfo    - Information to be included in the WARC Info record fields per page preserved\n * @property {Seed | Seed[]} seeds        - The seed(s) to be crawled\n * @property {UserScript} [script]        - A script to be run when using puppeteer. If the value of this correct, use defaults to puppeteer\n */\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/config/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "badExport",
    "memberof": "lib/config/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/config/index.js~badExport",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/config/index.js",
    "importStyle": null,
    "description": "Informs the user that they did not export the correct type of user script",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "exposed",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "notAsync",
    "memberof": "lib/config/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/config/index.js~notAsync",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/config/index.js",
    "importStyle": null,
    "description": "Informs the user that they did not export an async function",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "notAsyncFn",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "usrFNGood",
    "memberof": "lib/config/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/config/index.js~usrFNGood",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/config/index.js",
    "importStyle": null,
    "description": "Informs the user that the user script is good",
    "lineNumber": 55,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "class",
    "name": "Config",
    "memberof": "lib/config/index.js",
    "static": true,
    "longname": "lib/config/index.js~Config",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/config/index.js",
    "importStyle": "Config",
    "description": "Crawl config loader",
    "lineNumber": 64,
    "interface": false
  },
  {
    "__docId__": 55,
    "kind": "typedef",
    "name": "WARCOptions",
    "memberof": "lib/config/index.js",
    "static": true,
    "longname": "lib/config/index.js~WARCOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " url",
        "defaultRaw": " url",
        "name": "naming",
        "description": "The naming scheme to be used for WARC generation"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " <current working directory>",
        "defaultRaw": " <current working directory>",
        "name": "output",
        "description": "Path to the directory the WARCs are to be created in"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " false",
        "defaultRaw": false,
        "name": "append",
        "description": "Should Squidwarc create a single WARC file for the crawl or no"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "WARCOptions"
    }
  },
  {
    "__docId__": 56,
    "kind": "typedef",
    "name": "CrawlControl",
    "memberof": "lib/config/index.js",
    "static": true,
    "longname": "lib/config/index.js~CrawlControl",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 60000",
        "defaultRaw": 60000,
        "name": "globalWait",
        "description": "Maximum amount of time, in milliseconds, that Squidwarc should wait before generating a WARC and moving to the next URL"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 2",
        "defaultRaw": 2,
        "name": "numInflight",
        "description": "The number of inflight requests (requests with no response) that should exist before starting the inflightIdle timer"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 1000",
        "defaultRaw": 1000,
        "name": "inflightIdle",
        "description": "Amount of time, in milliseconds, that should elapse when there are only numInflight requests for network idle to be determined"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 8000",
        "defaultRaw": 8000,
        "name": "navWait",
        "description": "Maximum amount of time, in milliseconds, that Squidwarc should wait for indication that the browser has navigated to the page being crawled"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CrawlControl"
    }
  },
  {
    "__docId__": 57,
    "kind": "typedef",
    "name": "VersionInfo",
    "memberof": "lib/config/index.js",
    "static": true,
    "longname": "lib/config/index.js~VersionInfo",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " Squidwarc Crawl",
        "defaultRaw": " Squidwarc Crawl",
        "name": "isPartOfV",
        "description": "The value for the isPartOf field of the WARC Info Record"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " High fidelity preservation using Squidwarc",
        "defaultRaw": " High fidelity preservation using Squidwarc",
        "name": "warcInfoDescription",
        "description": "The value for the description field of the WARC Info Record"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "VersionInfo"
    }
  },
  {
    "__docId__": 58,
    "kind": "typedef",
    "name": "UserScript",
    "memberof": "lib/config/index.js",
    "static": true,
    "longname": "lib/config/index.js~UserScript",
    "access": "public",
    "description": "",
    "type": {
      "types": [
        "function(page: Page): Promise<void>"
      ],
      "optional": false,
      "name": "UserScript"
    }
  },
  {
    "__docId__": 59,
    "kind": "typedef",
    "name": "ChromeOptions",
    "memberof": "lib/config/index.js",
    "static": true,
    "longname": "lib/config/index.js~ChromeOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " chrome",
        "defaultRaw": " chrome",
        "name": "use",
        "description": "Should Squidwarc connect directly to Chrome/Chromium or via puppeteer"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "executable",
        "description": "Path to the browser executable or command to be use to launch the browser"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "userDataDir",
        "description": "Path to a user data directory (generated by Chrome/Chromium) to be used rather than a temporary one"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " localhost",
        "defaultRaw": " localhost",
        "name": "host",
        "description": "The host name the browsers CDP endpoint is listing on"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 9222",
        "defaultRaw": 9222,
        "name": "port",
        "description": "The port number the browsers CDP endpoint is listing on"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " true",
        "defaultRaw": true,
        "name": "launch",
        "description": "Should Squidwarc launch and manage the browser or connect to an already running instance"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " true",
        "defaultRaw": true,
        "name": "headless",
        "description": "Should the browser used by Squidwarc be launched in headless mode"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " false",
        "defaultRaw": false,
        "name": "local",
        "description": "Should the CDP descriptor used by the chrome-remote-interface use the local CDP descriptor or fetch it from the browser connecting to"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ChromeOptions"
    }
  },
  {
    "__docId__": 60,
    "kind": "typedef",
    "name": "CrawlConfig",
    "memberof": "lib/config/index.js",
    "static": true,
    "longname": "lib/config/index.js~CrawlConfig",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "ChromeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "chrome",
        "description": "Information about how to connect to or launch Chrome/Chromium"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " page-only",
        "defaultRaw": " page-only",
        "name": "mode",
        "description": "The mode this crawl is to be operating in"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 1",
        "defaultRaw": 1,
        "name": "depth",
        "description": "The depth of this crawl"
      },
      {
        "nullable": null,
        "types": [
          "CrawlControl"
        ],
        "spread": false,
        "optional": false,
        "name": "crawlControl",
        "description": "Options for fine tuning the crawl"
      },
      {
        "nullable": null,
        "types": [
          "WARCOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "warc",
        "description": "Options for how this crawls WARCs should be created"
      },
      {
        "nullable": null,
        "types": [
          "VersionInfo"
        ],
        "spread": false,
        "optional": false,
        "name": "versionInfo",
        "description": "Information to be included in the WARC Info record fields per page preserved"
      },
      {
        "nullable": null,
        "types": [
          "Seed ",
          " Seed[]"
        ],
        "spread": false,
        "optional": false,
        "name": "seeds",
        "description": "The seed(s) to be crawled"
      },
      {
        "nullable": null,
        "types": [
          "UserScript"
        ],
        "spread": false,
        "optional": true,
        "name": "script",
        "description": "A script to be run when using puppeteer. If the value of this correct, use defaults to puppeteer"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CrawlConfig"
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "loadConfig",
    "memberof": "lib/config/index.js~Config",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/config/index.js~Config.loadConfig",
    "access": "public",
    "description": "Loads the config file and performs the preliminary normalization",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<CrawlConfig>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "configPath",
        "description": "Path to this crawls config file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<CrawlConfig>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "ensureScript",
    "memberof": "lib/config/index.js~Config",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/config/index.js~Config.ensureScript",
    "access": "public",
    "description": "Load the user supplied script (if it exists) and perform validation of it",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<UserScript | null>}"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "scriptP",
        "description": "The path to the user script"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<UserScript | null>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "ensureSeeds",
    "memberof": "lib/config/index.js~Config",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/config/index.js~Config.ensureSeeds",
    "access": "public",
    "description": "Normalizes the supplied seeds. If it value of the seeds field is a string loads the seeds from the file",
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "string ",
          " string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "seeds",
        "description": "The seeds to be normalized"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": "The crawl mode for the seeds"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "depth",
        "description": "The depth of the crawl"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Seed | Seed[]>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "lib/crawler/chrome.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-Present John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\nconst EventEmitter = require('eventemitter3')\nconst RequestMonitor = require('../../node-warc/lib/requestCapturers/remoteChrome')\nconst RemoteChromeWARCGenerator = require('../../node-warc/lib/writers/remoteChrome')\nconst defaults = require('../defaults')\nconst Launcher = require('../launcher/chrome')\nconst NavMan = require('./navigationMan')\nconst InjectManager = require('../injectManager')\n\n/**\n * @desc Crawler based on cyrus-and/chrome-remote-interface\n * @extends {EventEmitter}\n */\nclass ChromeCrawler extends EventEmitter {\n  /**\n   * @desc Create a new ChromeCrawler instance. For a description of the expected options see the\n   * JSDoc CrawlConfig typedef {@link CrawlConfig}\n   * @param {CrawlConfig} options - The crawl config for this crawl\n   */\n  constructor (options) {\n    super()\n    /**\n     * @desc Crawl configuration options\n     * @type {CrawlConfig}\n     */\n    this.options = options\n\n    /**\n     * @desc Devtools protocol client for issuing commands to the browser\n     * @type {CRI}\n     * @private\n     */\n    this._client = null\n\n    /**\n     * @desc Flag indicating if once the process exists should the crawler close the browser\n     * @type {boolean}\n     * @private\n     */\n    this._autoClose = false\n\n    /**\n     * @desc Handles the tracking and capturing of the HTTP requests made by the browser\n     * @type {RequestMonitor}\n     */\n    this.requestMonitor = null\n\n    /**\n     * @desc The current url the crawler is visiting\n     * @type {?string}\n     */\n    this._currentUrl = null\n\n    /**\n     * @desc WARC generator for use with cyrus-and/chrome-remote-interface\n     * @type {RemoteChromeWARCGenerator}\n     * @private\n     */\n    this._warcGenerator = new RemoteChromeWARCGenerator()\n\n    /**\n     * @desc Manger for detecting network-idle, if we have not navigated or if we have reached the global wait time\n     * @type {NavigationMan}\n     * @private\n     */\n    this._navMan = new NavMan(options.crawlControl, this)\n\n    /**\n     * @desc The UserAgent string of the remote instance we are connecting to\n     * @type {string}\n     * @private\n     */\n    this._ua = ''\n\n    this.init = this.init.bind(this)\n    this._onWARCGenFinished = this._onWARCGenFinished.bind(this)\n    this._onWARCGenError = this._onWARCGenError.bind(this)\n    this._close = this._close.bind(this)\n    this._didNavigate = this._didNavigate.bind(this)\n  }\n\n  /**\n   * @emits {connected} when the required setup is done\n   * @desc Connect to the Chrome instance the crawler will be using and setup crawler\n   * @return {Promise<void>}\n   */\n  async init () {\n    if (this.options.chrome.launch) {\n      this._client = await Launcher.launch(this.options.chrome)\n    } else {\n      this._client = await Launcher.connect(this.options.chrome)\n    }\n    this._warcGenerator.on('finished', this._onWARCGenFinished)\n    this._warcGenerator.on('error', this._onWARCGenError)\n    let wasError = false\n    try {\n      await this._client.Runtime.enable()\n      await this._client.Page.enable()\n      await this._client.Network.enable()\n    } catch (err) {\n      wasError = true\n      this.emit('error', { type: 'enabling-browser-hooks', err })\n    }\n    if (!wasError) {\n      await this._client.Animation.setPlaybackRate({ playbackRate: 1000 })\n      this._ua = await this.getUserAgent()\n      await this._initInjects()\n      this.requestMonitor = new RequestMonitor(this._client.Network, this._navMan)\n      this.emit('connected')\n    }\n  }\n\n  /**\n   * @desc Instruct the browsers to inject JavaScript into every page\n   * @return {Promise<void>}\n   * @private\n   */\n  async _initInjects () {\n    if (this._client.Page.addScriptToEvaluateOnNewDocument) {\n      await this._client.Page.addScriptToEvaluateOnNewDocument(\n        InjectManager.getCrawlInjects()\n      )\n    } else {\n      await this._client.Page.addScriptToEvaluateOnLoad(\n        InjectManager.getCrawlInjects(true)\n      )\n    }\n  }\n\n  /**\n   * @desc Navigate to a new Web Page\n   * @param {string} url - The url to navigate the browser to\n   */\n  navigate (url) {\n    this._currentUrl = url\n    this.requestMonitor.startCapturing()\n    this._client.Page.navigate({ url }, this._navMan.didNavigate)\n    this._navMan.startedNav(url)\n  }\n\n  /**\n   * @desc Equivalent to hitting the refresh button when it is an X\n   * @return {Promise<any>}\n   */\n  stopPageLoading () {\n    return this._client.Page.stopLoading()\n  }\n\n  /**\n   * @desc Stop capturing the current web pages network requests\n   */\n  stopCapturingNetwork () {\n    this.requestMonitor.stopCapturing()\n  }\n\n  /**\n   * @desc Stop the page loading and stop capturing requests\n   * @return {Promise<void>}\n   */\n  stop () {\n    this.requestMonitor.stopCapturing()\n    return this._client.Page.stopLoading()\n  }\n\n  /**\n   * @desc Disconnect from the Chrome instance currently attached to\n   */\n  shutdown () {\n    this._client.close()\n    process.exit()\n  }\n\n  /**\n   * @desc Initialize the WARC writter for writting a new WARC\n   * @param {string} warcPath           - the path to the new WARC\n   * @param {boolean} [appending=false] - append to an already existing WARC file\n   */\n  initWARC (warcPath, appending = false) {\n    this._warcGenerator.initWARC(warcPath, appending)\n  }\n\n  /**\n   * @desc Alias for {@link genWarc}\n   * @param {!Object} warcInfo    - WARC record information\n   * @property {!string} outlinks - Pre-formatted string containing the pages outlinks tobe used by the WARC metadata record\n   * @property {?Object} info     - Information for the WARC info record\n   * @return {Promise<void, Error>}\n   */\n  genWARC (warcInfo) {\n    return this.genWarc(warcInfo)\n  }\n\n  /**\n   * @desc Generate the WARC file\n   * @param {!Object} warcInfo          - WARC record information\n   * @property {!string} outlinks - Pre-formatted string containing the pages outlinks tobe used by the WARC metadata record\n   * @property {?Object} info     - Information for the WARC info record\n   * @return {Promise<void, Error>}\n   */\n  async genWarc ({ info, outlinks }) {\n    info = info || {}\n    info.isPartOfV = info.isPartOfV || this.options.versionInfo.isPartOfV\n    info.warcInfoDescription =\n      info.warcInfoDescription || this.options.versionInfo.warcInfoDescription\n    await this._warcGenerator.writeWarcInfoRecord(\n      info.isPartOfV,\n      info.warcInfoDescription,\n      this._ua\n    )\n    await this._warcGenerator.writeWarcMetadataOutlinks(this._currentUrl, outlinks)\n    this.requestMonitor.stopCapturing()\n    for (let nreq of this.requestMonitor.iterateRequests()) {\n      try {\n        await this._warcGenerator.generateWarcEntry(nreq, this._client.Network)\n      } catch (error) {\n        console.error(error)\n      }\n    }\n    this._warcGenerator.end()\n  }\n\n  /**\n   * @desc Generate the WARC Info and Metadata records\n   * @param {!Object} warcInfo    - WARC record information\n   * @property {!string} outlinks - Pre-formatted string containing the pages outlinks tobe used by the WARC metadata record\n   * @property {?Object} info     - Information for the WARC info record\n   * @return {!Promise<void>}\n   */\n  async genInfoMetaDataRecord ({ info, outlinks }) {\n    info = info || {}\n    info.v = info.v || this.options.versionInfo.v\n    info.isPartOfV = info.isPartOfV || this.options.versionInfo.isPartOfV\n    info.warcInfoDescription =\n      info.warcInfoDescription || this.options.versionInfo.warcInfoDescription\n    await this._warcGenerator.writeWarcInfoRecord(\n      info.isPartOfV,\n      info.warcInfoDescription,\n      this._ua || defaults.defaultOpts.UA\n    )\n    await this._warcGenerator.writeWarcMetadataOutlinks(this._currentUrl, outlinks)\n  }\n\n  /**\n   * @desc Retrieve the page's meta information\n   * @return {Promise<{outlinks: string, links: string[], location: string}, Error>}\n   */\n  async getOutLinks () {\n    let evaled = await this._client.Runtime.evaluate(InjectManager.getCollectInject())\n    return evaled.result.value\n  }\n\n  /**\n   * @desc Retrieve the browsers user-agent string\n   * @return {Promise<string>}\n   */\n  async getUserAgent () {\n    let { userAgent } = await this._client.Browser.getVersion()\n    if (userAgent.indexOf('HeadlessChrome/') !== -1) {\n      // We are not a robot, pinkie promise!\n      userAgent = userAgent.replace('HeadlessChrome/', 'Chrome/')\n      await this._client.Network.setUserAgentOverride({ userAgent })\n    }\n    return userAgent\n  }\n\n  /**\n   * @desc Iterate over the captured network requests for the current web page\n   * @return {Iterator<CapturedRequest>}\n   */\n  [Symbol.iterator] () {\n    return this.requestMonitor.values()\n  }\n\n  /**\n   * @desc Callback used for Page.navigate\n   * @private\n   */\n  _didNavigate () {\n    this._navMan.didNavigate()\n  }\n\n  /**\n   * @desc Enable auto closing of the connection to the remote browser\n   * @return {ChromeCrawler}\n   * @private\n   */\n  enableAutoClose () {\n    if (!this._autoClose) {\n      process.on('exit', this._close)\n    }\n    this._autoClose = true\n    return this\n  }\n\n  /**\n   * @desc Callback for process.on('exit')\n   * @private\n   */\n  _close () {\n    if (this._client) {\n      return this._client.close()\n    }\n  }\n\n  /**\n   * @desc Listener for warc generator error\n   * @param {Error} err\n   * @private\n   */\n  _onWARCGenError (err) {\n    this.emit('error', { type: 'warc-gen', err })\n  }\n\n  /**\n   * @desc Listener for warc generator finished\n   * @private\n   */\n  _onWARCGenFinished () {\n    this.emit('warc-gen-finished')\n  }\n\n  /**\n   * @desc Create a new {@link ChromeCrawler} instance with auto close enabled\n   * @param {CrawlConfig} options - The crawl config for this crawl\n   * @return {ChromeCrawler}\n   */\n  static withAutoClose (options) {\n    return new ChromeCrawler(options).enableAutoClose()\n  }\n}\n\n/**\n * @type {ChromeCrawler}\n */\nmodule.exports = ChromeCrawler\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/crawler/chrome.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "class",
    "name": "ChromeCrawler",
    "memberof": "lib/crawler/chrome.js",
    "static": true,
    "longname": "lib/crawler/chrome.js~ChromeCrawler",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/crawler/chrome.js",
    "importStyle": "ChromeCrawler",
    "description": "Crawler based on cyrus-and/chrome-remote-interface",
    "lineNumber": 29,
    "interface": false,
    "extends": [
      "EventEmitter"
    ]
  },
  {
    "__docId__": 66,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#constructor",
    "access": "public",
    "description": "Create a new ChromeCrawler instance. For a description of the expected options see the\nJSDoc CrawlConfig typedef {@link CrawlConfig}",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "CrawlConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The crawl config for this crawl"
      }
    ]
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "options",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#options",
    "access": "public",
    "description": "Crawl configuration options",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "CrawlConfig"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "_client",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#_client",
    "access": "private",
    "description": "Devtools protocol client for issuing commands to the browser",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "CRI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "_autoClose",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#_autoClose",
    "access": "private",
    "description": "Flag indicating if once the process exists should the crawler close the browser",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "requestMonitor",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#requestMonitor",
    "access": "public",
    "description": "Handles the tracking and capturing of the HTTP requests made by the browser",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "RequestMonitor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "_currentUrl",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#_currentUrl",
    "access": "private",
    "description": "The current url the crawler is visiting",
    "lineNumber": 67,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "_warcGenerator",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#_warcGenerator",
    "access": "private",
    "description": "WARC generator for use with cyrus-and/chrome-remote-interface",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "RemoteChromeWARCGenerator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "_navMan",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#_navMan",
    "access": "private",
    "description": "Manger for detecting network-idle, if we have not navigated or if we have reached the global wait time",
    "lineNumber": 81,
    "type": {
      "nullable": null,
      "types": [
        "NavigationMan"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "_ua",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#_ua",
    "access": "private",
    "description": "The UserAgent string of the remote instance we are connecting to",
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "init",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#init",
    "access": "public",
    "description": "Connect to the Chrome instance the crawler will be using and setup crawler",
    "lineNumber": 102,
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "emits": [
      {
        "types": [
          "connected"
        ],
        "description": "when the required setup is done"
      }
    ],
    "params": []
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "_initInjects",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#_initInjects",
    "access": "private",
    "description": "Instruct the browsers to inject JavaScript into every page",
    "lineNumber": 133,
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "navigate",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#navigate",
    "access": "public",
    "description": "Navigate to a new Web Page",
    "lineNumber": 149,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The url to navigate the browser to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "stopPageLoading",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#stopPageLoading",
    "access": "public",
    "description": "Equivalent to hitting the refresh button when it is an X",
    "lineNumber": 160,
    "return": {
      "nullable": null,
      "types": [
        "Promise<any>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "stopCapturingNetwork",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#stopCapturingNetwork",
    "access": "public",
    "description": "Stop capturing the current web pages network requests",
    "lineNumber": 167,
    "params": [],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "stop",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#stop",
    "access": "public",
    "description": "Stop the page loading and stop capturing requests",
    "lineNumber": 175,
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "shutdown",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#shutdown",
    "access": "public",
    "description": "Disconnect from the Chrome instance currently attached to",
    "lineNumber": 183,
    "params": [],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "initWARC",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#initWARC",
    "access": "public",
    "description": "Initialize the WARC writter for writting a new WARC",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "warcPath",
        "description": "the path to the new WARC"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "appending",
        "description": "append to an already existing WARC file"
      }
    ],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "genWARC",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#genWARC",
    "access": "public",
    "description": "Alias for {@link genWarc}",
    "lineNumber": 204,
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "warcInfo",
        "description": "WARC record information"
      }
    ],
    "properties": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "outlinks",
        "description": "Pre-formatted string containing the pages outlinks tobe used by the WARC metadata record"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "Information for the WARC info record"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void, Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "genWarc",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#genWarc",
    "access": "public",
    "description": "Generate the WARC file",
    "lineNumber": 215,
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "warcInfo",
        "description": "WARC record information"
      }
    ],
    "properties": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "outlinks",
        "description": "Pre-formatted string containing the pages outlinks tobe used by the WARC metadata record"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "Information for the WARC info record"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void, Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "genInfoMetaDataRecord",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#genInfoMetaDataRecord",
    "access": "public",
    "description": "Generate the WARC Info and Metadata records",
    "lineNumber": 244,
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "warcInfo",
        "description": "WARC record information"
      }
    ],
    "properties": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "outlinks",
        "description": "Pre-formatted string containing the pages outlinks tobe used by the WARC metadata record"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "Information for the WARC info record"
      }
    ],
    "return": {
      "nullable": false,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "getOutLinks",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#getOutLinks",
    "access": "public",
    "description": "Retrieve the page's meta information",
    "lineNumber": 262,
    "return": {
      "nullable": null,
      "types": [
        "Promise<{outlinks: string, links: string[], location: string}, Error>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "getUserAgent",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#getUserAgent",
    "access": "public",
    "description": "Retrieve the browsers user-agent string",
    "lineNumber": 271,
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "[Symbol.iterator]",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#[Symbol.iterator]",
    "access": "public",
    "description": "Iterate over the captured network requests for the current web page",
    "lineNumber": 285,
    "return": {
      "nullable": null,
      "types": [
        "Iterator<CapturedRequest>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "_didNavigate",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#_didNavigate",
    "access": "private",
    "description": "Callback used for Page.navigate",
    "lineNumber": 293,
    "params": [],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "enableAutoClose",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#enableAutoClose",
    "access": "private",
    "description": "Enable auto closing of the connection to the remote browser",
    "lineNumber": 302,
    "return": {
      "nullable": null,
      "types": [
        "ChromeCrawler"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "_close",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#_close",
    "access": "private",
    "description": "Callback for process.on('exit')",
    "lineNumber": 314,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "_onWARCGenError",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#_onWARCGenError",
    "access": "private",
    "description": "Listener for warc generator error",
    "lineNumber": 325,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "_onWARCGenFinished",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/chrome.js~ChromeCrawler#_onWARCGenFinished",
    "access": "private",
    "description": "Listener for warc generator finished",
    "lineNumber": 333,
    "params": [],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "withAutoClose",
    "memberof": "lib/crawler/chrome.js~ChromeCrawler",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/crawler/chrome.js~ChromeCrawler.withAutoClose",
    "access": "public",
    "description": "Create a new {@link ChromeCrawler} instance with auto close enabled",
    "lineNumber": 342,
    "params": [
      {
        "nullable": null,
        "types": [
          "CrawlConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The crawl config for this crawl"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ChromeCrawler"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "lib/crawler/helper.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\n/**\n * @desc A helper class providing utility methods\n */\nclass Helper {\n  /**\n   * @desc Register an array of eventName, eventListener pairs to an EventEmitter\n   * @param {!EventEmitter} emitter - The EventEmitter to register the eventName, eventListener pairs on\n   * @param {Array<{emitter: !EventEmitter, eventName: string, handler: function()}>} events - The array of eventName, eventListener pairs\n   * @return {Array<{emitter: !EventEmitter, eventName: string, handler: function()}>}\n   */\n  static addEventListeners (emitter, events) {\n    return events.map(({ eventName, handler }) =>\n      Helper.addEventListener(emitter, eventName, handler)\n    )\n  }\n\n  /**\n   * @desc Register an eventName, eventListener pairs on an EventEmitter\n   * @param {!EventEmitter} emitter - The EventEmitter to register the eventName, eventListener pairs on\n   * @param {string} eventName - The name of the event to register the handler (listener) on\n   * @param {function()} handler - The event listener to be registered for the event\n   * @return {{emitter: !EventEmitter, eventName: string, handler: function()}}\n   */\n  static addEventListener (emitter, eventName, handler) {\n    emitter.on(eventName, handler)\n    return { emitter, eventName, handler }\n  }\n\n  /**\n   * @desc Remove the listeners registered on an EventEmitter by either {@link addEventListener} or {@link addEventListeners}\n   * @param {!Array<{emitter: !EventEmitter, eventName: string, handler: function()}>} listeners\n   */\n  static removeEventListeners (listeners) {\n    if (!listeners) return\n    for (const listener of listeners) {\n      listener.emitter.removeListener(listener.eventName, listener.handler)\n    }\n    listeners.splice(0, listeners.length)\n  }\n}\n\n/**\n * @type {Helper}\n */\nmodule.exports = Helper\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/crawler/helper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "class",
    "name": "Helper",
    "memberof": "lib/crawler/helper.js",
    "static": true,
    "longname": "lib/crawler/helper.js~Helper",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/crawler/helper.js",
    "importStyle": "Helper",
    "description": "A helper class providing utility methods",
    "lineNumber": 21,
    "interface": false
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "addEventListeners",
    "memberof": "lib/crawler/helper.js~Helper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/crawler/helper.js~Helper.addEventListeners",
    "access": "public",
    "description": "Register an array of eventName, eventListener pairs to an EventEmitter",
    "lineNumber": 28,
    "params": [
      {
        "nullable": false,
        "types": [
          "EventEmitter"
        ],
        "spread": false,
        "optional": false,
        "name": "emitter",
        "description": "The EventEmitter to register the eventName, eventListener pairs on"
      },
      {
        "nullable": null,
        "types": [
          "Array<{emitter: !EventEmitter, eventName: string, handler: function()}>"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "The array of eventName, eventListener pairs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<{emitter: !EventEmitter, eventName: string, handler: function()}>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "addEventListener",
    "memberof": "lib/crawler/helper.js~Helper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/crawler/helper.js~Helper.addEventListener",
    "access": "public",
    "description": "Register an eventName, eventListener pairs on an EventEmitter",
    "lineNumber": 41,
    "params": [
      {
        "nullable": false,
        "types": [
          "EventEmitter"
        ],
        "spread": false,
        "optional": false,
        "name": "emitter",
        "description": "The EventEmitter to register the eventName, eventListener pairs on"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": "The name of the event to register the handler (listener) on"
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "The event listener to be registered for the event"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{emitter: !EventEmitter, eventName: string, handler: function()}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "removeEventListeners",
    "memberof": "lib/crawler/helper.js~Helper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/crawler/helper.js~Helper.removeEventListeners",
    "access": "public",
    "description": "Remove the listeners registered on an EventEmitter by either {@link addEventListener} or {@link addEventListeners}",
    "lineNumber": 50,
    "params": [
      {
        "nullable": false,
        "types": [
          "Array<{emitter: !EventEmitter, eventName: string, handler: function()}>"
        ],
        "spread": false,
        "optional": false,
        "name": "listeners",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "lib/crawler/index.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-Present John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nconst ChromeCrawler = require('./chrome')\nconst PuppeteerCrawler = require('./puppeteer')\n\n/**\n * @desc Receive the crawl config requested crawler\n * @param {CrawlConfig} config - The crawl config\n * @returns {ChromeCrawler | PuppeteerCrawler}\n */\nfunction getCrawler (config) {\n  if (config.chrome.use === 'puppeteer') {\n    return new PuppeteerCrawler(config)\n  }\n  return ChromeCrawler.withAutoClose(config)\n}\n\n/**\n * @type {{ChromeCrawler: ChromeCrawler, PuppeteerCrawler: PuppeteerCrawler, getCrawler: getCrawler}}\n */\nmodule.exports = {\n  ChromeCrawler,\n  PuppeteerCrawler,\n  getCrawler\n}\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/crawler/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "getCrawler",
    "memberof": "lib/crawler/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/crawler/index.js~getCrawler",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/crawler/index.js",
    "importStyle": null,
    "description": "Receive the crawl config requested crawler",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ChromeCrawler | PuppeteerCrawler}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "CrawlConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The crawl config"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ChromeCrawler ",
        " PuppeteerCrawler"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "lib/crawler/navigationMan.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nconst EventEmitter = require('eventemitter3')\n\n/**\n * @desc Monitor navigation and request events for crawling a page.\n * @emits {network-idle} when network idle has been detected or global-wait timer has fired\n * @emits {navigated} when the browser has navigated\n * @emits {navigation-timedout} when the browser has not navigated\n * @extends {EventEmitter}\n */\nclass NavigationMan extends EventEmitter {\n  /**\n   *\n   * @param {CrawlControl} [options = {}]\n   * @param {EventEmitter} [parentEmitter]\n   */\n  constructor (options = {}, parentEmitter) {\n    super()\n\n    /**\n     * @desc Maximum amount of time, in milliseconds, before generating a WARC and moving to the next URL\n     * @type {number}\n     * @private\n     */\n    this._timeout = options.globalWait || 60000 // could be 30 seconds\n\n    /**\n     * @desc Amount of time, in milliseconds, that should elapse when there are only {@link _idleInflight} requests for network idle to be determined\n     * @type {number}\n     * @private\n     */\n    this._idleTime = options.inflightIdle || 1000 // could be 1500 (1.5 seconds)\n\n    /**\n     * @desc The number of inflight requests (requests with no response) that should exist before starting the inflightIdle timer\n     * @type {number}\n     * @private\n     */\n    this._idleInflight = options.numInflight || 2 // could be 4\n\n    /**\n     * @desc How long should we wait before for navigation to occur before emitting navigation-timedout event\n     * @type {number}\n     * @private\n     */\n    this._navTimeoutTime = options.navWait || 8000\n\n    /**\n     * @desc Set of the HTTP requests ids, used for tracking network-idle\n     * @type {Set<string>}\n     * @private\n     */\n    this._requestIds = new Set()\n\n    /**\n     * @desc The id of the setTimeout for the network-idle timer\n     * @type {?number}\n     * @private\n     */\n    this._idleTimer = null\n\n    /**\n     * @desc Flag indicating if we are in a network tracking state of not\n     * @type {boolean}\n     * @private\n     */\n    this._doneTimers = false\n\n    /**\n     * @desc The id of the global crawler setTimeout timer\n     * @type {?number}\n     * @private\n     */\n    this._globalWaitTimer = null\n\n    /**\n     * @desc The id of the navigation setTimeout timer\n     * @type {?number}\n     * @private\n     */\n    this._navTimeout = null\n\n    /**\n     * @desc An optional EventEmitter that we should emit this emitters events to rather than via ourselves\n     * @type {?EventEmitter}\n     * @private\n     */\n    this._parentEmitter = parentEmitter\n\n    /**\n     * @desc The url of the page a crawler is visiting\n     * @type {?string}\n     * @private\n     */\n    this._curl = null\n\n    this._networkIdled = this._networkIdled.bind(this)\n    this._globalNetworkTimeout = this._globalNetworkTimeout.bind(this)\n    this.didNavigate = this.didNavigate.bind(this)\n    this._navTimedOut = this._navTimedOut.bind(this)\n    this.reqFinished = this.reqFinished.bind(this)\n    this.reqStarted = this.reqStarted.bind(this)\n  }\n\n  /**\n   * @desc Start Timers For Navigation Monitoring\n   * @param {string} curl the URL browser is navigating to\n   */\n  startedNav (curl) {\n    this._curl = curl\n    this._requestIds.clear()\n    this._doneTimers = false\n    this._navTimeout = setTimeout(this._navTimedOut, this._navTimeoutTime)\n    this._globalWaitTimer = setTimeout(this._globalNetworkTimeout, this._timeout)\n  }\n\n  /**\n   * @desc Indicate that a request was made\n   * @param {Object} info - CDP object received from Network.requestWillBeSent\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Network#event-requestWillBeSent\n   */\n  reqStarted (info) {\n    if (!this._doneTimers) {\n      this._requestIds.add(info.requestId)\n      if (this._requestIds.size > this._idleInflight) {\n        clearTimeout(this._idleTimer)\n        this._idleTimer = null\n      }\n    }\n  }\n\n  /**\n   * @desc Indicate that a request has finished\n   * @param {Object} info - CDP Response object received by Network.responseReceived or Network.loadingFailed\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Network#event-responseReceived\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Network#event-loadingFailed\n   */\n  reqFinished (info) {\n    if (!this._doneTimers) {\n      this._requestIds.delete(info.requestId)\n      if (this._requestIds.size <= this._idleInflight && !this._idleTimer) {\n        this._idleTimer = setTimeout(this._networkIdled, this._idleTime)\n      }\n    }\n  }\n\n  /**\n   * @desc Indicate that the browser has navigated to the current URL\n   */\n  didNavigate () {\n    if (this._navTimeout) {\n      clearTimeout(this._navTimeout)\n      this._navTimeout = null\n    }\n    this._emitEvent('navigated', this._curl)\n  }\n\n  /**\n   * @desc Used to have the NavigationManger emit the 'navigation-error' event\n   * @param {Error | string} err\n   */\n  navigationError (err) {\n    if (this._navTimeout) {\n      clearTimeout(this._navTimeout)\n      this._navTimeout = null\n    }\n    if (typeof err === 'string') {\n      this._emitEvent('navigation-error', new Error(err))\n    } else {\n      this._emitEvent('navigation-error', err)\n    }\n  }\n\n  /**\n   * @desc Called when the navigation time limit was hit\n   * @private\n   */\n  _navTimedOut () {\n    if (this._navTimeout) {\n      clearTimeout(this._navTimeout)\n      this._navTimeout = null\n    }\n    this._emitEvent('navigation-timedout', this._curl)\n  }\n\n  /**\n   * @desc Called when the global time limit was hit\n   * @private\n   */\n  _globalNetworkTimeout () {\n    this._clearTimers()\n    this._emitEvent('network-idle')\n  }\n\n  /**\n   * @desc Called when the network idle has been determined\n   * @private\n   */\n  _networkIdled () {\n    this._clearTimers()\n    this._emitEvent('network-idle')\n  }\n\n  /**\n   * @desc Clear all timers\n   * @private\n   */\n  _clearTimers () {\n    if (!this._doneTimers) {\n      this._doneTimers = true\n    }\n    if (this._globalWaitTimer) {\n      clearTimeout(this._globalWaitTimer)\n      this._globalWaitTimer = null\n    }\n    if (this._idleTimer) {\n      clearTimeout(this._idleTimer)\n      this._idleTimer = null\n    }\n  }\n\n  /**\n   * @desc Emit an event\n   * @param {string} event - The event name to be emitted\n   * @param [arg]          - The value to be emitted for the event\n   * @private\n   */\n  _emitEvent (event, arg) {\n    if (this._parentEmitter) {\n      this._parentEmitter.emit(event, arg)\n    } else {\n      this.emit(event, arg)\n    }\n  }\n}\n\n/**\n * @type {NavigationMan}\n */\nmodule.exports = NavigationMan\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/crawler/navigationMan.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "class",
    "name": "NavigationMan",
    "memberof": "lib/crawler/navigationMan.js",
    "static": true,
    "longname": "lib/crawler/navigationMan.js~NavigationMan",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/crawler/navigationMan.js",
    "importStyle": "NavigationMan",
    "description": "Monitor navigation and request events for crawling a page.",
    "lineNumber": 27,
    "emits": [
      {
        "types": [
          "network-idle"
        ],
        "description": "when network idle has been detected or global-wait timer has fired"
      },
      {
        "types": [
          "navigated"
        ],
        "description": "when the browser has navigated"
      },
      {
        "types": [
          "navigation-timedout"
        ],
        "description": "when the browser has not navigated"
      }
    ],
    "interface": false,
    "extends": [
      "EventEmitter"
    ]
  },
  {
    "__docId__": 115,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "CrawlControl"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " {}",
        "defaultRaw": {},
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "EventEmitter"
        ],
        "spread": false,
        "optional": true,
        "name": "parentEmitter",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "_timeout",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#_timeout",
    "access": "private",
    "description": "Maximum amount of time, in milliseconds, before generating a WARC and moving to the next URL",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "_idleTime",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#_idleTime",
    "access": "private",
    "description": "Amount of time, in milliseconds, that should elapse when there are only {@link _idleInflight} requests for network idle to be determined",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "_idleInflight",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#_idleInflight",
    "access": "private",
    "description": "The number of inflight requests (requests with no response) that should exist before starting the inflightIdle timer",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "_navTimeoutTime",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#_navTimeoutTime",
    "access": "private",
    "description": "How long should we wait before for navigation to occur before emitting navigation-timedout event",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "_requestIds",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#_requestIds",
    "access": "private",
    "description": "Set of the HTTP requests ids, used for tracking network-idle",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "Set<string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "_idleTimer",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#_idleTimer",
    "access": "private",
    "description": "The id of the setTimeout for the network-idle timer",
    "lineNumber": 76,
    "type": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "_doneTimers",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#_doneTimers",
    "access": "private",
    "description": "Flag indicating if we are in a network tracking state of not",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "_globalWaitTimer",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#_globalWaitTimer",
    "access": "private",
    "description": "The id of the global crawler setTimeout timer",
    "lineNumber": 90,
    "type": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "_navTimeout",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#_navTimeout",
    "access": "private",
    "description": "The id of the navigation setTimeout timer",
    "lineNumber": 97,
    "type": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "_parentEmitter",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#_parentEmitter",
    "access": "private",
    "description": "An optional EventEmitter that we should emit this emitters events to rather than via ourselves",
    "lineNumber": 104,
    "type": {
      "nullable": true,
      "types": [
        "EventEmitter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "_curl",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#_curl",
    "access": "private",
    "description": "The url of the page a crawler is visiting",
    "lineNumber": 111,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "startedNav",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#startedNav",
    "access": "public",
    "description": "Start Timers For Navigation Monitoring",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "curl",
        "description": "the URL browser is navigating to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "reqStarted",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#reqStarted",
    "access": "public",
    "description": "Indicate that a request was made",
    "see": [
      "https://chromedevtools.github.io/devtools-protocol/tot/Network#event-requestWillBeSent"
    ],
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "CDP object received from Network.requestWillBeSent"
      }
    ],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "reqFinished",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#reqFinished",
    "access": "public",
    "description": "Indicate that a request has finished",
    "see": [
      "https://chromedevtools.github.io/devtools-protocol/tot/Network#event-responseReceived",
      "https://chromedevtools.github.io/devtools-protocol/tot/Network#event-loadingFailed"
    ],
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "CDP Response object received by Network.responseReceived or Network.loadingFailed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "didNavigate",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#didNavigate",
    "access": "public",
    "description": "Indicate that the browser has navigated to the current URL",
    "lineNumber": 166,
    "params": [],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "navigationError",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#navigationError",
    "access": "public",
    "description": "Used to have the NavigationManger emit the 'navigation-error' event",
    "lineNumber": 178,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error ",
          " string"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "_navTimedOut",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#_navTimedOut",
    "access": "private",
    "description": "Called when the navigation time limit was hit",
    "lineNumber": 194,
    "params": [],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "_globalNetworkTimeout",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#_globalNetworkTimeout",
    "access": "private",
    "description": "Called when the global time limit was hit",
    "lineNumber": 206,
    "params": [],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "_networkIdled",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#_networkIdled",
    "access": "private",
    "description": "Called when the network idle has been determined",
    "lineNumber": 215,
    "params": [],
    "return": null
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "_clearTimers",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#_clearTimers",
    "access": "private",
    "description": "Clear all timers",
    "lineNumber": 224,
    "params": [],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "_emitEvent",
    "memberof": "lib/crawler/navigationMan.js~NavigationMan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/navigationMan.js~NavigationMan#_emitEvent",
    "access": "private",
    "description": "Emit an event",
    "lineNumber": 244,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event name to be emitted"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "arg",
        "description": "The value to be emitted for the event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "lib/crawler/netIdleWatcher.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\nconst EventEmitter = require('eventemitter3')\nconst { Page } = require('puppeteer/lib/Page')\nconst autobind = require('class-autobind')\nconst H = require('./helper')\n\n/**\n * @desc Monitors the HTTP requests made by a page and emits the 'network-idle' event when it has been determined the network is idle\n * Used by {@link PuppeteerCrawler}\n * @extends {EventEmitter}\n */\nclass NetIdleWatcher extends EventEmitter {\n  /**\n   * @param {Page} page - Puppeteer page object for the page being crawled\n   * @param {?NetIdleOptions} [options = {}] - Optional options to control fine tune network idle determination\n   */\n  constructor (page, options = {}) {\n    super()\n\n    /**\n     * @desc Maximum amount of time a crawler going to visit a page\n     * @type {number}\n     * @private\n     */\n    this._timeout = options.globalWait || 40000\n\n    /**\n     * @desc The amount of time no new HTTP requests should be made before emitting the network-idle event\n     * @type {number}\n     * @private\n     */\n    this._idleTime = options.inflightIdle || 1500\n\n    /**\n     * @desc The number of in-flight requests there should be before starting the network-idle timer\n     * @type {number}\n     * @private\n     */\n    this._idleInflight = options.numInflight || 2\n\n    /**\n     * @desc Set of the HTTP requests ids, used for tracking network-idle\n     * @type {Set<string>}\n     * @private\n     */\n    this._requestIds = new Set()\n\n    /**\n     * @desc The id of the setTimeout for the network-idle timer\n     * @type {?number}\n     * @private\n     */\n    this._idleTimer = null\n\n    /**\n     * @desc Flag indicating if we are in a network tracking state of not\n     * @type {boolean}\n     * @private\n     */\n    this._doneTimers = false\n\n    /**\n     * @desc The id of the global crawler setTimeout timer\n     * @type {?number}\n     * @private\n     */\n    this._globalWaitTimer = null\n\n    /**\n     * @desc The page object of the current page the crawler is visting\n     * @type {Page}\n     */\n    this.page = page\n\n    /**\n     * @desc An array of listeners registered on the page object\n     * @type {{emitter: !EventEmitter, eventName: string, handler: function()}[]}\n     * @private\n     */\n    this._pageListenrs = []\n\n    autobind.default(this, NetIdleWatcher.prototype)\n  }\n\n  /**\n   * @desc Start monitoring the network and receive a Promise that resolves once network idle occurred or the global wait time has been reached\n   * @param {Page} page - Puppeteer page object for the page being crawled\n   * @param {?NetIdleOptions} [options = {}] - Optional options to control fine tune network idle determination\n   * @return {Promise<void>}\n   */\n  static idlePromise (page, options) {\n    const im = new NetIdleWatcher(page, options)\n    return new Promise((resolve, reject) => {\n      im.start()\n      im.on('network-idle', resolve)\n    })\n  }\n\n  /**\n   * @desc Setup the necessary listeners\n   */\n  start () {\n    this._pageListenrs = [\n      H.addEventListener(this.page, Page.Events.Request, this.reqStarted),\n      H.addEventListener(this.page, Page.Events.Response, this.reqFinished),\n      H.addEventListener(this.page, Page.Events.RequestFailed, this.reqFinished)\n    ]\n    this._requestIds.clear()\n    this._doneTimers = false\n    this._globalWaitTimer = setTimeout(this._globalNetworkTimeout, this._timeout)\n  }\n\n  /**\n   * @desc Indicate that a request was made\n   * @param {Request} info - Puppeteer Request object\n   */\n  reqStarted (info) {\n    if (!this._doneTimers) {\n      this._requestIds.add(info._requestId)\n      if (this._requestIds.size > this._idleInflight) {\n        clearTimeout(this._idleTimer)\n        this._idleTimer = null\n      }\n    }\n  }\n\n  /**\n   * @desc Indicate that a request has finished\n   * @param {Response | Request} info - Puppeteer Request or Response object\n   */\n  reqFinished (info) {\n    if (!this._doneTimers) {\n      if (info._requestId) {\n        this._requestIds.delete(info._requestId)\n      } else {\n        this._requestIds.delete(info.request()._requestId)\n      }\n      if (this._requestIds.size <= this._idleInflight && !this._idleTimer) {\n        this._idleTimer = setTimeout(this._networkIdled, this._idleTime)\n      }\n    }\n  }\n\n  /**\n   * @desc Called when the global time limit was hit\n   * @private\n   */\n  _globalNetworkTimeout () {\n    if (!this._doneTimers) {\n      this._doneTimers = true\n    }\n    this._clearTimers()\n    process.nextTick(this._emitNetIdle)\n  }\n\n  /**\n   * @desc Called when the network idle has been determined\n   * @private\n   */\n  _networkIdled () {\n    if (!this._doneTimers) {\n      this._doneTimers = true\n    }\n    this._clearTimers()\n    process.nextTick(this._emitNetIdle)\n  }\n\n  /**\n   * @desc Emit the network-idle event\n   * @private\n   */\n  _emitNetIdle () {\n    H.removeEventListeners(this._pageListenrs)\n    this.emit('network-idle')\n  }\n\n  /**\n   * @desc Clear all timers\n   * @private\n   */\n  _clearTimers () {\n    if (this._globalWaitTimer) {\n      clearTimeout(this._globalWaitTimer)\n      this._globalWaitTimer = null\n    }\n    if (this._idleTimer) {\n      clearTimeout(this._idleTimer)\n      this._idleTimer = null\n    }\n  }\n}\n\n/**\n * @type {NetIdleWatcher}\n */\nmodule.exports = NetIdleWatcher\n\n/**\n * @typedef {Object} NetIdleOptions\n * @property {number} [globalWait = 40000]  - Maximum amount of time, in milliseconds, to wait for network idle to occur\n * @property {number} [numInflight = 2]     - The number of inflight requests (requests with no response) that should exist before starting the inflightIdle timer\n * @property {number} [inflightIdle = 1500] - Amount of time, in milliseconds, that should elapse when there are only numInflight requests for network idle to be determined\n */\n\n/**\n *  @external {Page} https://pptr.dev/#?product=Puppeteer&version=v1.7.0&show=api-class-page\n */\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/crawler/netIdleWatcher.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "class",
    "name": "NetIdleWatcher",
    "memberof": "lib/crawler/netIdleWatcher.js",
    "static": true,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/crawler/netIdleWatcher.js",
    "importStyle": "NetIdleWatcher",
    "description": "Monitors the HTTP requests made by a page and emits the 'network-idle' event when it has been determined the network is idle\nUsed by {@link PuppeteerCrawler}",
    "lineNumber": 27,
    "interface": false,
    "extends": [
      "EventEmitter"
    ]
  },
  {
    "__docId__": 157,
    "kind": "typedef",
    "name": "NetIdleOptions",
    "memberof": "lib/crawler/netIdleWatcher.js",
    "static": true,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 40000",
        "defaultRaw": 40000,
        "name": "globalWait",
        "description": "Maximum amount of time, in milliseconds, to wait for network idle to occur"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 2",
        "defaultRaw": 2,
        "name": "numInflight",
        "description": "The number of inflight requests (requests with no response) that should exist before starting the inflightIdle timer"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 1500",
        "defaultRaw": 1500,
        "name": "inflightIdle",
        "description": "Amount of time, in milliseconds, that should elapse when there are only numInflight requests for network idle to be determined"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "NetIdleOptions"
    }
  },
  {
    "__docId__": 158,
    "kind": "external",
    "name": "Page",
    "externalLink": "https://pptr.dev/#?product=Puppeteer&version=v1.7.0&show=api-class-page",
    "memberof": "lib/crawler/netIdleWatcher.js",
    "static": true,
    "longname": "lib/crawler/netIdleWatcher.js~Page",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 159,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "Page"
        ],
        "spread": false,
        "optional": false,
        "name": "page",
        "description": "Puppeteer page object for the page being crawled"
      },
      {
        "nullable": true,
        "types": [
          "NetIdleOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " {}",
        "defaultRaw": {},
        "name": "options",
        "description": "Optional options to control fine tune network idle determination"
      }
    ]
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "_timeout",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#_timeout",
    "access": "private",
    "description": "Maximum amount of time a crawler going to visit a page",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "_idleTime",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#_idleTime",
    "access": "private",
    "description": "The amount of time no new HTTP requests should be made before emitting the network-idle event",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "_idleInflight",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#_idleInflight",
    "access": "private",
    "description": "The number of in-flight requests there should be before starting the network-idle timer",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "_requestIds",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#_requestIds",
    "access": "private",
    "description": "Set of the HTTP requests ids, used for tracking network-idle",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "Set<string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "_idleTimer",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#_idleTimer",
    "access": "private",
    "description": "The id of the setTimeout for the network-idle timer",
    "lineNumber": 68,
    "type": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "_doneTimers",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#_doneTimers",
    "access": "private",
    "description": "Flag indicating if we are in a network tracking state of not",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "_globalWaitTimer",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#_globalWaitTimer",
    "access": "private",
    "description": "The id of the global crawler setTimeout timer",
    "lineNumber": 82,
    "type": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "page",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#page",
    "access": "public",
    "description": "The page object of the current page the crawler is visting",
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "Page"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "_pageListenrs",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#_pageListenrs",
    "access": "private",
    "description": "An array of listeners registered on the page object",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "{emitter: !EventEmitter, eventName: string, handler: function()}[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "idlePromise",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher.idlePromise",
    "access": "public",
    "description": "Start monitoring the network and receive a Promise that resolves once network idle occurred or the global wait time has been reached",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "Page"
        ],
        "spread": false,
        "optional": false,
        "name": "page",
        "description": "Puppeteer page object for the page being crawled"
      },
      {
        "nullable": true,
        "types": [
          "NetIdleOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " {}",
        "defaultRaw": {},
        "name": "options",
        "description": "Optional options to control fine tune network idle determination"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "start",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#start",
    "access": "public",
    "description": "Setup the necessary listeners",
    "lineNumber": 117,
    "params": [],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "reqStarted",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#reqStarted",
    "access": "public",
    "description": "Indicate that a request was made",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "Puppeteer Request object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "reqFinished",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#reqFinished",
    "access": "public",
    "description": "Indicate that a request has finished",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "Response ",
          " Request"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "Puppeteer Request or Response object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "_globalNetworkTimeout",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#_globalNetworkTimeout",
    "access": "private",
    "description": "Called when the global time limit was hit",
    "lineNumber": 163,
    "params": [],
    "return": null
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "_networkIdled",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#_networkIdled",
    "access": "private",
    "description": "Called when the network idle has been determined",
    "lineNumber": 175,
    "params": [],
    "return": null
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "_emitNetIdle",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#_emitNetIdle",
    "access": "private",
    "description": "Emit the network-idle event",
    "lineNumber": 187,
    "params": [],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "_clearTimers",
    "memberof": "lib/crawler/netIdleWatcher.js~NetIdleWatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/netIdleWatcher.js~NetIdleWatcher#_clearTimers",
    "access": "private",
    "description": "Clear all timers",
    "lineNumber": 196,
    "params": [],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "lib/crawler/puppeteer.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\nconst EventEmitter = require('eventemitter3')\nconst { Browser } = require('puppeteer/lib/Browser')\nconst { TimeoutError } = require('puppeteer/lib/Errors')\nconst autobind = require('class-autobind')\nconst PuppeteerCDPRequestCapturer = require('../../node-warc/lib/requestCapturers/puppeteerCDP')\nconst PuppeteerCDPWARCGenerator = require('../../node-warc/lib/writers/puppeteerCDP')\nconst InjectManager = require('../injectManager')\nconst launch = require('../launcher/puppeteer')\nconst NetIdle = require('./netIdleWatcher')\nconst cp = require('../utils/colorPrinters')\nconst { configureURLNormalizer } = require('../utils/urlUtils')\n\n/**\n * @desc Function for normalizing URLs\n * @type {(function(string): string)}\n */\nconst urlNormalizer = configureURLNormalizer({ stripFragment: true, stripWWW: true })\n\n/**\n * @desc Crawler based on puppeteer\n * @extends {EventEmitter}\n */\nclass PuppeteerCrawler extends EventEmitter {\n  /**\n   * @desc Create a new PuppeteerCrawler instance. For a description of the expected options see the\n   * JSDoc CrawlConfig typedef {@link CrawlConfig}\n   * @param {CrawlConfig} options - The crawl config for this crawl\n   */\n  constructor (options) {\n    super()\n\n    /**\n     * @desc An instance of puppeteer Browser\n     * @type {?Browser}\n     */\n    this._browser = null\n\n    /**\n     * @desc An instance of puppeteer Page\n     * @type {?Page}\n     */\n    this._page = null\n\n    /**\n     * @desc An instance of puppeteer CDPSession used to\n     * @type {CDPSession}\n     * @private\n     */\n    this._client = null\n\n    /**\n     * @desc The UserAgent string of the browser\n     * @type {string}\n     * @private\n     */\n    this._ua = ''\n\n    /**\n     * @desc The current url the crawler is visiting\n     * @type {?string}\n     */\n    this._currentUrl = null\n\n    /**\n     * @desc Crawl configuration options\n     * @type {CrawlConfig}\n     */\n    this.options = options\n\n    /**\n     * @type {?PuppeteerCDPRequestCapturer}\n     */\n    this.requestCapturer = null\n\n    /**\n     * @type {PuppeteerCDPWARCGenerator}\n     * @private\n     */\n    this._warcGenerator = new PuppeteerCDPWARCGenerator()\n\n    /**\n     * @desc Default wait time for page.goto\n     * @type {{waitUntil: string, timeout: number}}\n     */\n    this.defaultWait = { waitUntil: 'networkidle0', timeout: 60000 }\n    autobind.default(this, PuppeteerCrawler.prototype)\n  }\n\n  /**\n   * @desc CB used to emit the disconnected event\n   * @private\n   */\n  _onDisconnected () {\n    this.emit('disconnected')\n  }\n\n  /**\n   * @desc Setup the crawler\n   */\n  async init () {\n    this._browser = await launch(this.options.chrome)\n    this._browser.on(Browser.Events.Disconnected, this._onDisconnected)\n    this._page = await this._browser.newPage()\n    this._client = this._page._client\n\n    await this._client.send('Animation.setPlaybackRate', { playbackRate: 1000 })\n    await this._client.send('Network.setBypassServiceWorker', { bypass: true })\n    await this._client.send(\n      'Page.addScriptToEvaluateOnNewDocument',\n      InjectManager.getNoNaughtyJsInject()\n    )\n    // so much noise\n    this._client.removeAllListeners('Performance.metrics')\n    this._client.removeAllListeners('Log.entryAdded')\n    this._client.removeAllListeners('Runtime.consoleAPICalled')\n    this._client.removeAllListeners('Runtime.exceptionThrown')\n\n    this.requestCapturer = new PuppeteerCDPRequestCapturer()\n    this.requestCapturer.attach(this._client)\n    this._warcGenerator.on('finished', this._onWARCGenFinished)\n    this._warcGenerator.on('error', this._onWARCGenError)\n    this._ua = await this.getUserAgent()\n  }\n\n  /**\n   * @desc Navigate the browser to the URL of the page to be crawled\n   * @param {string} url\n   * @returns {Promise<boolean>}\n   */\n  async navigate (url) {\n    this._currentUrl = url\n    this.requestCapturer.startCapturing()\n    try {\n      await this._page.goto(url, this.defaultWait)\n    } catch (e) {\n      if (e instanceof TimeoutError) {\n        const mainFrame = this._page.mainFrame()\n        if (\n          urlNormalizer(url) ===\n          urlNormalizer(mainFrame._navigationURL || mainFrame.url())\n        ) {\n          // we did navigate to the page but no all frame network idle was had in the waiting time\n          return true\n        }\n      }\n      cp.error('Crawler encountered a navigation error', e)\n      return false\n    }\n    return true\n  }\n\n  /**\n   * @desc If the user supplied a script that scrip is executed or if non was supplied just scroll the page\n   * @return {Promise<void>}\n   */\n  async runUserScript () {\n    if (this.options.script) {\n      cp.cyan(`Running user script`)\n      try {\n        await this.options.script(this._page)\n      } catch (e) {\n        cp.error('An exception was thrown while running the user script', e)\n      }\n    } else {\n      await this._page.evaluate(InjectManager.rawScoll())\n    }\n    await NetIdle.idlePromise(this._page, this.options.crawlControl)\n  }\n\n  /**\n   * @desc Equivalent to hitting the refresh button when it is an X\n   * @return {!Promise<?Object>}\n   */\n  stopPageLoading () {\n    return this._client.send('Page.stopLoading')\n  }\n\n  /**\n   * @desc Stop capturing the current web pages network requests\n   */\n  stopCapturingNetwork () {\n    this.requestCapturer.stopCapturing()\n  }\n\n  /**\n   * @desc Stop the page loading and stop capturing requests\n   * @return {!Promise<?Object>}\n   */\n  stop () {\n    this.requestCapturer.stopCapturing()\n    return this._client.send('Page.stopLoading')\n  }\n\n  /**\n   * @desc Stop crawling and exit\n   * @return {Promise<void>}\n   */\n  async shutdown () {\n    this.requestCapturer.stopCapturing()\n    await this._browser.close()\n  }\n\n  /**\n   * @desc Initialize the WARC writter for writting a new WARC\n   * @param {string} warcPath           - the path to the new WARC\n   * @param {boolean} [appending=false] - append to an already existing WARC file\n   * @return {Promise<void>} A Promise that resolves once the `warc-gen-finished` event is emitted\n   */\n  initWARC (warcPath, appending = false) {\n    this._warcGenerator.initWARC(warcPath, appending)\n    return new Promise(resolve => {\n      this.on('warc-gen-finished', resolve)\n    })\n  }\n\n  /**\n   * @desc Alias for {@link genWarc}\n   * @param {Object} warcInfo    - WARC record information\n   * @property {!string} outlinks - Pre-formatted string containing the pages outlinks tobe used by the WARC metadata record\n   * @property {?Object} info     - Information for the WARC info record\n   * @return {Promise<void, Error>}\n   */\n  genWARC (warcInfo) {\n    return this.genWarc(warcInfo)\n  }\n\n  /**\n   * @desc Generate the WARC file\n   * @param {Object} warcInfo          - WARC record information\n   * @property {!string} outlinks - Pre-formatted string containing the pages outlinks tobe used by the WARC metadata record\n   * @property {?Object} info     - Information for the WARC info record\n   * @return {Promise<void, Error>}\n   */\n  async genWarc ({ outlinks, info }) {\n    info = info || {}\n    info.isPartOfV = info.isPartOfV || this.options.versionInfo.isPartOfV\n    info.warcInfoDescription =\n      info.warcInfoDescription || this.options.versionInfo.warcInfoDescription\n    await this._warcGenerator.writeWarcInfoRecord(\n      info.isPartOfV,\n      info.warcInfoDescription,\n      this._ua\n    )\n    await this._warcGenerator.writeWarcMetadataOutlinks(this._currentUrl, outlinks)\n    this.requestCapturer.stopCapturing()\n    for (let nreq of this.requestCapturer.iterateRequests()) {\n      try {\n        await this._warcGenerator.generateWarcEntry(nreq, this._client)\n      } catch (error) {\n        console.error(error)\n      }\n    }\n    this._warcGenerator.end()\n  }\n\n  /**\n   * @desc Generate the WARC Info and Metadata records\n   * @param {Object} warcInfo    - WARC record information\n   * @property {!string} outlinks - Pre-formatted string containing the pages outlinks tobe used by the WARC metadata record\n   * @property {?Object} info     - Information for the WARC info record\n   * @return {!Promise<void>}\n   */\n  async genInfoMetaDataRecord ({ info, outlinks }) {\n    info = info || {}\n    info.v = info.v || this.options.versionInfo.v\n    info.isPartOfV = info.isPartOfV || this.options.versionInfo.isPartOfV\n    info.warcInfoDescription =\n      info.warcInfoDescription || this.options.versionInfo.warcInfoDescription\n    await this._warcGenerator.writeWarcInfoRecord(\n      info.isPartOfV,\n      info.warcInfoDescription,\n      this._ua\n    )\n    await this._warcGenerator.writeWarcMetadataOutlinks(this._currentUrl, outlinks)\n  }\n\n  /**\n   * @desc Retrieve the page's meta information\n   * @return {Promise<{outlinks: string, links: Array<{href: string, pathname: string, host: string}>, location: string}, Error>}\n   */\n  async getOutLinks () {\n    const frames = this._page.frames()\n    let i = frames.length\n    let frame\n    const discoveredLinks = {\n      outlinks: '',\n      links: [],\n      location: this._page.url()\n    }\n    const outlinksFN = InjectManager.rawOutLinks()\n    while (i--) {\n      frame = frames[i]\n      try {\n        const { outlinks, links } = await frame.evaluate(outlinksFN)\n        discoveredLinks.outlinks += outlinks\n        discoveredLinks.links = discoveredLinks.links.concat(links)\n      } catch (e) {}\n    }\n    return discoveredLinks\n  }\n\n  /**\n   * @desc Retrieve the browsers user-agent string\n   * @return {!Promise<string>}\n   */\n  async getUserAgent () {\n    let ua = await this._browser.userAgent()\n    if (ua.indexOf('HeadlessChrome/') !== -1) {\n      // We are not a robot, pinkie promise!\n      ua = ua.replace('HeadlessChrome/', 'Chrome/')\n      await this._page.setUserAgent(ua)\n    }\n    return ua\n  }\n\n  /**\n   * @desc Iterate over the captured network requests for the current web page\n   * @return {Iterator<CapturedRequest>}\n   */\n  [Symbol.iterator] () {\n    return this.requestCapturer.values()\n  }\n\n  /**\n   * @desc Listener for warc generator error\n   * @param {Error} err - The error to emit\n   * @private\n   */\n  _onWARCGenError (err) {\n    this.emit('error', { type: 'warc-gen', err })\n  }\n\n  /**\n   * @desc Listener for warc generator finished\n   * @private\n   */\n  _onWARCGenFinished () {\n    this.emit('warc-gen-finished')\n  }\n}\n\n/**\n * @type {PuppeteerCrawler}\n */\nmodule.exports = PuppeteerCrawler\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/crawler/puppeteer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "urlNormalizer",
    "memberof": "lib/crawler/puppeteer.js",
    "static": true,
    "longname": "lib/crawler/puppeteer.js~urlNormalizer",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/crawler/puppeteer.js",
    "importStyle": null,
    "description": "Function for normalizing URLs",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "function(string): string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "class",
    "name": "PuppeteerCrawler",
    "memberof": "lib/crawler/puppeteer.js",
    "static": true,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/crawler/puppeteer.js",
    "importStyle": "PuppeteerCrawler",
    "description": "Crawler based on puppeteer",
    "lineNumber": 39,
    "interface": false,
    "extends": [
      "EventEmitter"
    ]
  },
  {
    "__docId__": 189,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#constructor",
    "access": "public",
    "description": "Create a new PuppeteerCrawler instance. For a description of the expected options see the\nJSDoc CrawlConfig typedef {@link CrawlConfig}",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "CrawlConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The crawl config for this crawl"
      }
    ]
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "_browser",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#_browser",
    "access": "private",
    "description": "An instance of puppeteer Browser",
    "lineNumber": 52,
    "type": {
      "nullable": true,
      "types": [
        "Browser"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "_page",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#_page",
    "access": "private",
    "description": "An instance of puppeteer Page",
    "lineNumber": 58,
    "type": {
      "nullable": true,
      "types": [
        "Page"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "_client",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#_client",
    "access": "private",
    "description": "An instance of puppeteer CDPSession used to",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "CDPSession"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "_ua",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#_ua",
    "access": "private",
    "description": "The UserAgent string of the browser",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "_currentUrl",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#_currentUrl",
    "access": "private",
    "description": "The current url the crawler is visiting",
    "lineNumber": 78,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "options",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#options",
    "access": "public",
    "description": "Crawl configuration options",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "CrawlConfig"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "requestCapturer",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#requestCapturer",
    "access": "public",
    "description": "",
    "lineNumber": 89,
    "type": {
      "nullable": true,
      "types": [
        "PuppeteerCDPRequestCapturer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "_warcGenerator",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#_warcGenerator",
    "access": "private",
    "description": "",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "PuppeteerCDPWARCGenerator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "defaultWait",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#defaultWait",
    "access": "public",
    "description": "Default wait time for page.goto",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "{waitUntil: string, timeout: number}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "_onDisconnected",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#_onDisconnected",
    "access": "private",
    "description": "CB used to emit the disconnected event",
    "lineNumber": 109,
    "params": [],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "init",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#init",
    "access": "public",
    "description": "Setup the crawler",
    "lineNumber": 116,
    "params": [],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "navigate",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#navigate",
    "access": "public",
    "description": "Navigate the browser to the URL of the page to be crawled",
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "runUserScript",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#runUserScript",
    "access": "public",
    "description": "If the user supplied a script that scrip is executed or if non was supplied just scroll the page",
    "lineNumber": 172,
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "stopPageLoading",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#stopPageLoading",
    "access": "public",
    "description": "Equivalent to hitting the refresh button when it is an X",
    "lineNumber": 190,
    "return": {
      "nullable": false,
      "types": [
        "Promise<?Object>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "stopCapturingNetwork",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#stopCapturingNetwork",
    "access": "public",
    "description": "Stop capturing the current web pages network requests",
    "lineNumber": 197,
    "params": [],
    "return": null
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "stop",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#stop",
    "access": "public",
    "description": "Stop the page loading and stop capturing requests",
    "lineNumber": 205,
    "return": {
      "nullable": false,
      "types": [
        "Promise<?Object>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "shutdown",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#shutdown",
    "access": "public",
    "description": "Stop crawling and exit",
    "lineNumber": 214,
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "initWARC",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#initWARC",
    "access": "public",
    "description": "Initialize the WARC writter for writting a new WARC",
    "lineNumber": 225,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "warcPath",
        "description": "the path to the new WARC"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "appending",
        "description": "append to an already existing WARC file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": "A Promise that resolves once the `warc-gen-finished` event is emitted"
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "genWARC",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#genWARC",
    "access": "public",
    "description": "Alias for {@link genWarc}",
    "lineNumber": 239,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "warcInfo",
        "description": "WARC record information"
      }
    ],
    "properties": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "outlinks",
        "description": "Pre-formatted string containing the pages outlinks tobe used by the WARC metadata record"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "Information for the WARC info record"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void, Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "genWarc",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#genWarc",
    "access": "public",
    "description": "Generate the WARC file",
    "lineNumber": 250,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "warcInfo",
        "description": "WARC record information"
      }
    ],
    "properties": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "outlinks",
        "description": "Pre-formatted string containing the pages outlinks tobe used by the WARC metadata record"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "Information for the WARC info record"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void, Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "genInfoMetaDataRecord",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#genInfoMetaDataRecord",
    "access": "public",
    "description": "Generate the WARC Info and Metadata records",
    "lineNumber": 279,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "warcInfo",
        "description": "WARC record information"
      }
    ],
    "properties": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "outlinks",
        "description": "Pre-formatted string containing the pages outlinks tobe used by the WARC metadata record"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "Information for the WARC info record"
      }
    ],
    "return": {
      "nullable": false,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "getOutLinks",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#getOutLinks",
    "access": "public",
    "description": "Retrieve the page's meta information",
    "lineNumber": 297,
    "return": {
      "nullable": null,
      "types": [
        "Promise<{outlinks: string, links: Array<{href: string, pathname: string, host: string}>, location: string}, Error>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "getUserAgent",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#getUserAgent",
    "access": "public",
    "description": "Retrieve the browsers user-agent string",
    "lineNumber": 322,
    "return": {
      "nullable": false,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "[Symbol.iterator]",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#[Symbol.iterator]",
    "access": "public",
    "description": "Iterate over the captured network requests for the current web page",
    "lineNumber": 336,
    "return": {
      "nullable": null,
      "types": [
        "Iterator<CapturedRequest>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "_onWARCGenError",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#_onWARCGenError",
    "access": "private",
    "description": "Listener for warc generator error",
    "lineNumber": 345,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "The error to emit"
      }
    ],
    "return": null
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "_onWARCGenFinished",
    "memberof": "lib/crawler/puppeteer.js~PuppeteerCrawler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/crawler/puppeteer.js~PuppeteerCrawler#_onWARCGenFinished",
    "access": "private",
    "description": "Listener for warc generator finished",
    "lineNumber": 353,
    "params": [],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "file",
    "name": "lib/defaults/index.js",
    "content": "/*\n Squidwarc Copyright (C) 2017 - present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\nconst pkg = require('../../package.json')\n\n/**\n * @type {{UA: string, defaultOpts: {connect: Object, timeouts: {navigationTimeout: number, waitAfterLoad: number}, versionInfo: VersionInfo, warc: WARCOptions, deviceMetrics: {width: number, height: number, screenWidth: number, screenHeight: number, deviceScaleFactor: number, mobile: boolean, fitWindow: boolean}, crawlControl: CrawlControl}}}\n */\nmodule.exports = {\n  UA:\n    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.71 Safari/537.36',\n  defaultOpts: {\n    connect: {\n      host: 'localhost',\n      port: 9222,\n      local: false,\n      launch: true\n    },\n    timeouts: {\n      navigationTimeout: 8000,\n      waitAfterLoad: 5000\n    },\n    versionInfo: {\n      v: pkg.version,\n      isPartOfV: 'Squidwarc Crawl',\n      warcInfoDescription: 'High fidelity preservation using Squidwarc'\n    },\n    warc: {\n      naming: 'url',\n      output: process.cwd(),\n      append: false\n    },\n    deviceMetrics: {\n      width: 1920,\n      height: 1080,\n      screenWidth: 1920,\n      screenHeight: 1080,\n      deviceScaleFactor: 1.0,\n      mobile: false,\n      fitWindow: false\n    },\n    crawlControl: {\n      globalWait: 60000,\n      inflightIdle: 1000,\n      navWait: 8000,\n      numInflight: 2\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/defaults/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 223,
    "kind": "file",
    "name": "lib/frontier/helper.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\nconst Path = require('path')\nconst parseDomain = require('parse-domain')\nconst bigExtLookup = require('../utils/bigExtLookup')\nconst { cmodePO, cmodePAL, cmodePSD } = require('./modes')\n\n/**\n * @desc Helper class providing utility functions for in memory frontier implementation {@link Frontier}\n */\nclass FrontierHelper {\n  /**\n   * @desc Ensure the starting seed list is one the frontier can understand\n   * @param {Array<{url:string,mode:string,depth:number}|string>|{url:string,mode:string,depth:number}|string} seeds - The initial seeds for the crawl\n   * @param {string} mode - The crawl mode for the crawl to be launched\n   * @param {number} depth - The crawls depth\n   * @returns {Seed | Seed[]} - The normalized {@link Seed}(s)\n   */\n  static normalizeSeeds (seeds, mode, depth = 1) {\n    if (Array.isArray(seeds)) {\n      return seeds.map(aSeed => {\n        if (typeof aSeed === 'object') {\n          return {\n            url: aSeed.url,\n            mode: FrontierHelper.crawlModeToSymbol(aSeed.mode || mode),\n            depth: aSeed.depth || depth\n          }\n        } else if (typeof aSeed === 'string') {\n          return {\n            url: aSeed,\n            mode: FrontierHelper.crawlModeToSymbol(mode),\n            depth\n          }\n        }\n      })\n    } else if (typeof seeds === 'object') {\n      return {\n        url: seeds.url,\n        mode: FrontierHelper.crawlModeToSymbol(seeds.mode || mode),\n        depth: seeds.depth || depth\n      }\n    } else if (typeof seeds === 'string') {\n      return {\n        url: seeds,\n        mode: FrontierHelper.crawlModeToSymbol(mode),\n        depth\n      }\n    }\n  }\n\n  /**\n   * @desc Retrieve the crawl-mode symbol from a configs string\n   * @param {string} mode - The crawl mode\n   * @returns {Symbol} - The crawl modes internal symbol\n   */\n  static crawlModeToSymbol (mode) {\n    if (mode) {\n      switch (mode) {\n        case 'page-only':\n        case 'po':\n          return cmodePO\n        case 'page-same-domain':\n        case 'psd':\n          return cmodePSD\n        case 'page-all-links':\n        case 'pal':\n          return cmodePAL\n        default:\n          return cmodePO\n      }\n    } else {\n      return cmodePO\n    }\n  }\n\n  /**\n   * @desc Determine if a URL should be added to the frontier\n   * @param {Object} url - A URL extracted for the currently visited page\n   * @param {string} curURL - The URL of the currently visited page\n   * @param {SeedTracker} tracker - The seed tracker associated with the very first page the chain of pages being visited originated from\n   * @returns {boolean}\n   */\n  static shouldAddToFrontier (url, curURL, tracker) {\n    if (tracker.mode === cmodePSD) {\n      return FrontierHelper.shouldAddToFrontierPSD(url, curURL, tracker)\n    }\n    return FrontierHelper.shouldAddToFrontierDefault(url, curURL, tracker)\n  }\n\n  /**\n   * @desc Should a discovered URL be added to the frontier  using the Page Same Domain strategy\n   * @param {Object} url - A URL extracted for the currently visited page\n   * @param {string} curURL - The URL of the currently visited page\n   * @param {SeedTracker} tracker - The seed tracker associated with the very first page the chain of pages being visited originated from\n   * @returns {boolean}\n   */\n  static shouldAddToFrontierPSD (url, curURL, tracker) {\n    const cDomain = parseDomain(curURL)\n    const ext = Path.extname(url.pathname)\n    const td = parseDomain(url.host)\n    const tdTest = td && cDomain.domain === td.domain\n    if (ext !== '') {\n      return !bigExtLookup[ext] && tdTest && !tracker.seenURL(url.href)\n    }\n    return tdTest && !tracker.seenURL(url.href)\n  }\n\n  /**\n   * @desc Should a discovered URL be added to the frontier using the default strategy, applies for page-only and page-all-links\n   * @param {Object} url - A URL extracted for the currently visited page\n   * @param {string} curURL - The URL of the currently visited page\n   * @param {SeedTracker} tracker - The seed tracker associated with the very first page the chain of pages being visited originated from\n   * @returns {boolean}\n   */\n  static shouldAddToFrontierDefault (url, curURL, tracker) {\n    const ext = Path.extname(url.pathname)\n    if (ext !== '') {\n      return !bigExtLookup[ext] && !tracker.seenURL(url.href)\n    }\n    return !tracker.seenURL(url.href)\n  }\n}\n\n/**\n * @type {FrontierHelper}\n */\nmodule.exports = FrontierHelper\n\n/**\n * @typedef {Object} Seed\n * @property {string} url   - The URL of the seed to be crawled\n * @property {Symbol} mode  - The mode the seed and the URLs discovered by crawl the seed should operate in\n * @property {number} depth - The depth of the crawl\n */\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/frontier/helper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 224,
    "kind": "class",
    "name": "FrontierHelper",
    "memberof": "lib/frontier/helper.js",
    "static": true,
    "longname": "lib/frontier/helper.js~FrontierHelper",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/frontier/helper.js",
    "importStyle": "FrontierHelper",
    "description": "Helper class providing utility functions for in memory frontier implementation {@link Frontier}",
    "lineNumber": 25,
    "interface": false
  },
  {
    "__docId__": 225,
    "kind": "typedef",
    "name": "Seed",
    "memberof": "lib/frontier/helper.js",
    "static": true,
    "longname": "lib/frontier/helper.js~Seed",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The URL of the seed to be crawled"
      },
      {
        "nullable": null,
        "types": [
          "Symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": "The mode the seed and the URLs discovered by crawl the seed should operate in"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "depth",
        "description": "The depth of the crawl"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Seed"
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "normalizeSeeds",
    "memberof": "lib/frontier/helper.js~FrontierHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/frontier/helper.js~FrontierHelper.normalizeSeeds",
    "access": "public",
    "description": "Ensure the starting seed list is one the frontier can understand",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Seed | Seed[]} - The normalized {@link Seed}(s)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<{url:string,mode:string,depth:number}|string>|{url:string,mode:string,depth:number}|string"
        ],
        "spread": false,
        "optional": false,
        "name": "seeds",
        "description": "The initial seeds for the crawl"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": "The crawl mode for the crawl to be launched"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "depth",
        "description": "The crawls depth"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Seed ",
        " Seed[]"
      ],
      "spread": false,
      "description": "The normalized {@link Seed}(s)"
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "crawlModeToSymbol",
    "memberof": "lib/frontier/helper.js~FrontierHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/frontier/helper.js~FrontierHelper.crawlModeToSymbol",
    "access": "public",
    "description": "Retrieve the crawl-mode symbol from a configs string",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Symbol} - The crawl modes internal symbol"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": "The crawl mode"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "The crawl modes internal symbol"
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "shouldAddToFrontier",
    "memberof": "lib/frontier/helper.js~FrontierHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/frontier/helper.js~FrontierHelper.shouldAddToFrontier",
    "access": "public",
    "description": "Determine if a URL should be added to the frontier",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "A URL extracted for the currently visited page"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "curURL",
        "description": "The URL of the currently visited page"
      },
      {
        "nullable": null,
        "types": [
          "SeedTracker"
        ],
        "spread": false,
        "optional": false,
        "name": "tracker",
        "description": "The seed tracker associated with the very first page the chain of pages being visited originated from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "shouldAddToFrontierPSD",
    "memberof": "lib/frontier/helper.js~FrontierHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/frontier/helper.js~FrontierHelper.shouldAddToFrontierPSD",
    "access": "public",
    "description": "Should a discovered URL be added to the frontier  using the Page Same Domain strategy",
    "lineNumber": 111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "A URL extracted for the currently visited page"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "curURL",
        "description": "The URL of the currently visited page"
      },
      {
        "nullable": null,
        "types": [
          "SeedTracker"
        ],
        "spread": false,
        "optional": false,
        "name": "tracker",
        "description": "The seed tracker associated with the very first page the chain of pages being visited originated from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "shouldAddToFrontierDefault",
    "memberof": "lib/frontier/helper.js~FrontierHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/frontier/helper.js~FrontierHelper.shouldAddToFrontierDefault",
    "access": "public",
    "description": "Should a discovered URL be added to the frontier using the default strategy, applies for page-only and page-all-links",
    "lineNumber": 129,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "A URL extracted for the currently visited page"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "curURL",
        "description": "The URL of the currently visited page"
      },
      {
        "nullable": null,
        "types": [
          "SeedTracker"
        ],
        "spread": false,
        "optional": false,
        "name": "tracker",
        "description": "The seed tracker associated with the very first page the chain of pages being visited originated from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "lib/frontier/index.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\nconst FH = require('./helper')\nconst SeedTracker = require('./seedTracker')\nconst { cmodePO } = require('./modes')\n\n/**\n * @desc In memory implementation of a frontier\n */\nclass Frontier {\n  /**\n   * @desc Create a new frontier object\n   */\n  constructor () {\n    /**\n     * @desc URLs to be crawled\n     * @type {{url: string, mode: Symbol, cdepth: number, tracker: string}}[]}\n     */\n    this.queue = []\n\n    /**\n     * @desc Tracks the depth and crawl config per starting seed\n     * @type {Map<string, SeedTracker>}\n     */\n    this.trackers = new Map()\n\n    /**\n     * @desc Information pertaining to the current URL being crawled\n     * @type {?{url: string, mode: Symbol, cdepth: number, tracker: string}}\n     */\n    this.current = null\n  }\n\n  /**\n   * @desc Initialize the initial frontier\n   * @param {Seed[] | Seed} starting\n   */\n  init (starting) {\n    if (Array.isArray(starting)) {\n      let i = 0\n      let len = starting.length\n      let strt\n      while (i < len) {\n        strt = starting[i]\n        this.trackers.set(strt.url, new SeedTracker(strt.url, strt.mode, strt.depth || 1))\n        this.queue.push({\n          url: strt.url,\n          cdepth: 0,\n          mode: strt.mode,\n          tracker: strt.url\n        })\n        i++\n      }\n    } else {\n      this.trackers.set(\n        starting.url,\n        new SeedTracker(starting.url, starting.mode, starting.depth || 1)\n      )\n      this.queue.push({\n        url: starting.url,\n        cdepth: 0,\n        mode: starting.mode,\n        tracker: starting.url\n      })\n    }\n  }\n\n  /**\n   * @desc Returns the number of URLs left in the queue\n   * @return {number}\n   */\n  size () {\n    return this.queue.length\n  }\n\n  /**\n   * @desc Is the frontier exhausted\n   * @return {boolean}\n   */\n  exhausted () {\n    return this.queue.length === 0\n  }\n\n  /**\n   * @desc Get the next URL to crawl from the frontier, queue length - 1\n   * @return {?string}\n   */\n  next () {\n    this.current = this.queue.shift()\n    if (this.current) {\n      return this.current.url\n    }\n    return undefined\n  }\n\n  /**\n   * @desc Process discovered outlinks of a page based on the originating seeds configuration\n   * @param {Array<{href: string, pathname: string, host: string}>} links list of seeds to consider\n   */\n  process (links) {\n    const tracker = this.trackers.get(this.current.tracker)\n    tracker.crawledURL()\n    if (this.current.mode !== cmodePO) {\n      const nextDepth = this.current.cdepth + 1\n      const nextMode = nextDepth < tracker.depth ? this.current.mode : cmodePO\n      let i = links.length\n      let url\n      while (i--) {\n        url = links[i]\n        if (FH.shouldAddToFrontier(url, this.current.url, tracker)) {\n          tracker.addToSeen(url.href)\n          this.queue.push({\n            url: url.href,\n            cdepth: nextDepth,\n            mode: nextMode,\n            tracker: this.current.tracker\n          })\n        }\n      }\n    }\n    if (tracker.done()) {\n      this.trackers.delete(this.current.tracker)\n    }\n  }\n}\n\n/**\n * @type {Frontier}\n */\nmodule.exports = Frontier\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/frontier/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "class",
    "name": "Frontier",
    "memberof": "lib/frontier/index.js",
    "static": true,
    "longname": "lib/frontier/index.js~Frontier",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/frontier/index.js",
    "importStyle": "Frontier",
    "description": "In memory implementation of a frontier",
    "lineNumber": 24,
    "interface": false
  },
  {
    "__docId__": 233,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/frontier/index.js~Frontier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/frontier/index.js~Frontier#constructor",
    "access": "public",
    "description": "Create a new frontier object",
    "lineNumber": 28
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "queue",
    "memberof": "lib/frontier/index.js~Frontier",
    "static": false,
    "longname": "lib/frontier/index.js~Frontier#queue",
    "access": "public",
    "description": "URLs to be crawled",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "{url: string, mode: Symbol, cdepth: number, tracker: string}}[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "trackers",
    "memberof": "lib/frontier/index.js~Frontier",
    "static": false,
    "longname": "lib/frontier/index.js~Frontier#trackers",
    "access": "public",
    "description": "Tracks the depth and crawl config per starting seed",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, SeedTracker>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "current",
    "memberof": "lib/frontier/index.js~Frontier",
    "static": false,
    "longname": "lib/frontier/index.js~Frontier#current",
    "access": "public",
    "description": "Information pertaining to the current URL being crawled",
    "lineNumber": 45,
    "type": {
      "nullable": true,
      "types": [
        "{url: string, mode: Symbol, cdepth: number, tracker: string}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "init",
    "memberof": "lib/frontier/index.js~Frontier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/frontier/index.js~Frontier#init",
    "access": "public",
    "description": "Initialize the initial frontier",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "Seed[] ",
          " Seed"
        ],
        "spread": false,
        "optional": false,
        "name": "starting",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "size",
    "memberof": "lib/frontier/index.js~Frontier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/frontier/index.js~Frontier#size",
    "access": "public",
    "description": "Returns the number of URLs left in the queue",
    "lineNumber": 86,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "exhausted",
    "memberof": "lib/frontier/index.js~Frontier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/frontier/index.js~Frontier#exhausted",
    "access": "public",
    "description": "Is the frontier exhausted",
    "lineNumber": 94,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "next",
    "memberof": "lib/frontier/index.js~Frontier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/frontier/index.js~Frontier#next",
    "access": "public",
    "description": "Get the next URL to crawl from the frontier, queue length - 1",
    "lineNumber": 102,
    "return": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "process",
    "memberof": "lib/frontier/index.js~Frontier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/frontier/index.js~Frontier#process",
    "access": "public",
    "description": "Process discovered outlinks of a page based on the originating seeds configuration",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<{href: string, pathname: string, host: string}>"
        ],
        "spread": false,
        "optional": false,
        "name": "links",
        "description": "list of seeds to consider"
      }
    ],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "file",
    "name": "lib/frontier/modes.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\n/**\n * @desc Symbol representing the page only crawl mode\n * @type {symbol}\n */\nconst cmodePO = Symbol('page-only')\n\n/**\n * @desc Symbol representing the page same domain crawl mode\n * @type {symbol}\n */\nconst cmodePSD = Symbol('page-same-domain')\n\n/**\n * @desc Symbol representing the page all links crawl mode\n * @type {symbol}\n */\nconst cmodePAL = Symbol('page-all-links')\n\n/**\n * @desc Crawl modes as symbols\n * @type {{cmodePO: Symbol, cmodePSD: Symbol, cmodePAL: Symbol}}\n */\nmodule.exports = {\n  cmodePO,\n  cmodePSD,\n  cmodePAL\n}\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/frontier/modes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 244,
    "kind": "variable",
    "name": "cmodePO",
    "memberof": "lib/frontier/modes.js",
    "static": true,
    "longname": "lib/frontier/modes.js~cmodePO",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/frontier/modes.js",
    "importStyle": null,
    "description": "Symbol representing the page only crawl mode",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "symbol"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 245,
    "kind": "variable",
    "name": "cmodePSD",
    "memberof": "lib/frontier/modes.js",
    "static": true,
    "longname": "lib/frontier/modes.js~cmodePSD",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/frontier/modes.js",
    "importStyle": null,
    "description": "Symbol representing the page same domain crawl mode",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "symbol"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 246,
    "kind": "variable",
    "name": "cmodePAL",
    "memberof": "lib/frontier/modes.js",
    "static": true,
    "longname": "lib/frontier/modes.js~cmodePAL",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/frontier/modes.js",
    "importStyle": null,
    "description": "Symbol representing the page all links crawl mode",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "symbol"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 247,
    "kind": "file",
    "name": "lib/frontier/seedTracker.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\n/**\n * @desc Tracks the progress of crawl per starting seed URL. Because multiple seeds can be used,\n * each potentially generating additional URLs to crawl, SeedTrackers consolidate this process per\n * starting seed. Tracks the URLs discovered for a starting seed and allows for propagation of the crawl\n * mode throughout the entirety of the crawl.\n */\nclass SeedTracker {\n  /**\n   * @param {string} url - A starting seed\n   * @param {Symbol} mode - The mode for the seed\n   * @param {number} depth - The crawl depth\n   */\n  constructor (url, mode, depth) {\n    /**\n     * @desc How many URLs are left to crawl that originated from the starting seed\n     * @type {number}\n     */\n    this.urlCount = 1\n\n    /**\n     * @desc The URL of the starting seed\n     * @type {string}\n     */\n    this.url = url\n\n    /**\n     * @desc The crawl mode symbol the seed is operating under\n     * @type {Symbol}\n     */\n    this.mode = mode\n\n    /**\n     * @desc A set of URLs used for duplication of URLs generated by this seed during the crawl\n     * @type {Set<string>}\n     */\n    this.seen = new Set([url])\n\n    /**\n     * @desc The depth of the crawl for this seed\n     * @type {number}\n     */\n    this.depth = depth\n  }\n\n  /**\n   * @desc Are there no more URLs to be crawled that are associated with this seed\n   * @returns {boolean}\n   */\n  done () {\n    return this.urlCount === 0\n  }\n\n  /**\n   * @desc Decreases the number of URLs left to crawl for this seed\n   */\n  crawledURL () {\n    this.urlCount -= 1\n  }\n\n  /**\n   * @desc Have we seen the supplied URL\n   * @param {string} url - The URL to check if we have seen it\n   * @returns {boolean}\n   */\n  seenURL (url) {\n    return this.seen.has(url)\n  }\n\n  /**\n   * @desc Adds a URL to the set of URLs seen and increments the seeds URL count\n   * @param {string} url - The URL to mark as seen\n   */\n  addToSeen (url) {\n    this.seen.add(url)\n    this.urlCount += 1\n  }\n}\n\n/**\n * @type {SeedTracker}\n */\nmodule.exports = SeedTracker\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/frontier/seedTracker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 248,
    "kind": "class",
    "name": "SeedTracker",
    "memberof": "lib/frontier/seedTracker.js",
    "static": true,
    "longname": "lib/frontier/seedTracker.js~SeedTracker",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/frontier/seedTracker.js",
    "importStyle": "SeedTracker",
    "description": "Tracks the progress of crawl per starting seed URL. Because multiple seeds can be used,\neach potentially generating additional URLs to crawl, SeedTrackers consolidate this process per\nstarting seed. Tracks the URLs discovered for a starting seed and allows for propagation of the crawl\nmode throughout the entirety of the crawl.",
    "lineNumber": 24,
    "interface": false
  },
  {
    "__docId__": 249,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/frontier/seedTracker.js~SeedTracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/frontier/seedTracker.js~SeedTracker#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "A starting seed"
      },
      {
        "nullable": null,
        "types": [
          "Symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": "The mode for the seed"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "depth",
        "description": "The crawl depth"
      }
    ]
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "urlCount",
    "memberof": "lib/frontier/seedTracker.js~SeedTracker",
    "static": false,
    "longname": "lib/frontier/seedTracker.js~SeedTracker#urlCount",
    "access": "public",
    "description": "How many URLs are left to crawl that originated from the starting seed",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 251,
    "kind": "member",
    "name": "url",
    "memberof": "lib/frontier/seedTracker.js~SeedTracker",
    "static": false,
    "longname": "lib/frontier/seedTracker.js~SeedTracker#url",
    "access": "public",
    "description": "The URL of the starting seed",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 252,
    "kind": "member",
    "name": "mode",
    "memberof": "lib/frontier/seedTracker.js~SeedTracker",
    "static": false,
    "longname": "lib/frontier/seedTracker.js~SeedTracker#mode",
    "access": "public",
    "description": "The crawl mode symbol the seed is operating under",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "seen",
    "memberof": "lib/frontier/seedTracker.js~SeedTracker",
    "static": false,
    "longname": "lib/frontier/seedTracker.js~SeedTracker#seen",
    "access": "public",
    "description": "A set of URLs used for duplication of URLs generated by this seed during the crawl",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "Set<string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 254,
    "kind": "member",
    "name": "depth",
    "memberof": "lib/frontier/seedTracker.js~SeedTracker",
    "static": false,
    "longname": "lib/frontier/seedTracker.js~SeedTracker#depth",
    "access": "public",
    "description": "The depth of the crawl for this seed",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "done",
    "memberof": "lib/frontier/seedTracker.js~SeedTracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/frontier/seedTracker.js~SeedTracker#done",
    "access": "public",
    "description": "Are there no more URLs to be crawled that are associated with this seed",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "crawledURL",
    "memberof": "lib/frontier/seedTracker.js~SeedTracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/frontier/seedTracker.js~SeedTracker#crawledURL",
    "access": "public",
    "description": "Decreases the number of URLs left to crawl for this seed",
    "lineNumber": 73,
    "params": [],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "seenURL",
    "memberof": "lib/frontier/seedTracker.js~SeedTracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/frontier/seedTracker.js~SeedTracker#seenURL",
    "access": "public",
    "description": "Have we seen the supplied URL",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The URL to check if we have seen it"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "addToSeen",
    "memberof": "lib/frontier/seedTracker.js~SeedTracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/frontier/seedTracker.js~SeedTracker#addToSeen",
    "access": "public",
    "description": "Adds a URL to the set of URLs seen and increments the seeds URL count",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The URL to mark as seen"
      }
    ],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "file",
    "name": "lib/injectManager/index.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nconst {\n  noNaughtJs,\n  scrollPage,\n  scrollOnLoad,\n  initCollectLinks,\n  collect,\n  outLinks\n} = require('./pageInjects')\n\n/**\n * @desc Manages the JavaScript that is injected into the page\n */\nclass InjectManager {\n  /**\n   * @desc Receive the raw scroll page function for use with Runtime.evaluate\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-evaluate\n   * @return {scrollPage}\n   */\n  static rawScoll () {\n    return scrollPage\n  }\n\n  /**\n   * @desc Receive the raw function that helps ensure that the pages JS can not be naughty for use with Runtime.evaluate\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-evaluate\n   * @return {function(): void}\n   */\n  static rawNoNaughty () {\n    return noNaughtJs\n  }\n\n  /**\n   * @desc Receive the raw function that is used to collect outlinks from the pre-injected script {@link collect} for use with Runtime.evaluate\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-evaluate\n   * @return {collect}\n   */\n  static rawCollectInject () {\n    return collect\n  }\n\n  /**\n   * @desc Receive the raw function that is used to collect outlines from each of the pages frames. Used by {@link PuppeteerCrawler}\n   * @return {outLinks}\n   */\n  static rawOutLinks () {\n    return outLinks\n  }\n\n  /**\n   * @desc Receive param object for JS injected into every frame of the page crawled that sets up out link collection\n   * @param {boolean} [onNewDocument = true] - Flag indicating if the inject object is for Page.addScriptToEvaluateOnNewDocument (default) or Page.addScriptToEvaluateOnLoad  params\n   * @return {OnNewDocumentInject | OnLoadInject} - Object keyed for the params used by the desired CDP method\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnNewDocument\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnLoad\n   */\n  static getCollectInject (onNewDocument = true) {\n    const key = onNewDocument ? 'source' : 'scriptSource'\n    return {\n      [key]: `(${collect.toString()})()`\n    }\n  }\n\n  /**\n   * @desc Receive param object for JS injected into every frame of the page crawled that includes disabling things that can act as an crawler trap\n   * @param {boolean} [onNewDocument = true] - Flag indicating if the inject object is for Page.addScriptToEvaluateOnNewDocument (default) or Page.addScriptToEvaluateOnLoad  params\n   * @return {OnNewDocumentInject | OnLoadInject} - Object keyed for the params used by the desired CDP method\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnNewDocument\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnLoad\n   */\n  static getNoNaughtyJsInject (onNewDocument = true) {\n    const key = onNewDocument ? 'source' : 'scriptSource'\n    return {\n      [key]: `(${noNaughtJs.toString()})()`\n    }\n  }\n\n  /**\n   * @desc Receive param object for JS injected into every frame of the page crawled that scrolls the page once the `load` event has fired\n   * @param {boolean} [onNewDocument = true] - Flag indicating if the inject object is for Page.addScriptToEvaluateOnNewDocument (default) or Page.addScriptToEvaluateOnLoad  params\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnNewDocument\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnLoad\n   */\n  static getScollOnLoadInject (onNewDocument = true) {\n    const key = onNewDocument ? 'source' : 'scriptSource'\n    return {\n      [key]: `(${scrollOnLoad.toString()})()`\n    }\n  }\n\n  /**\n   * @desc Receive param object for JS injected into every frame of the page crawled that scrolls the page automatically\n   * @param {boolean} [onNewDocument = true] - Flag indicating if the inject object is for Page.addScriptToEvaluateOnNewDocument (default) or Page.addScriptToEvaluateOnLoad  params\n   * @return {OnNewDocumentInject | OnLoadInject} - Object keyed for the params used by the desired CDP method\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnNewDocument\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnLoad\n   */\n  static getScrollInject (onNewDocument = true) {\n    const key = onNewDocument ? 'source' : 'scriptSource'\n    return {\n      [key]: `(${scrollOnLoad.toString()})()`\n    }\n  }\n\n  /**\n   * @desc JS injected into every frame of the page crawled that includes disabling things that can act as an crawler trap, JS that scrolls the page automatically and JS that sets up out link collection\n   * @param {boolean} [onNewDocument = true] - Flag indicating if the inject object is for Page.addScriptToEvaluateOnNewDocument (default) or Page.addScriptToEvaluateOnLoad  params\n   * @return {OnNewDocumentInject | OnLoadInject} - Object keyed for the params used by the desired CDP method\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnLoad\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnNewDocument\n   */\n  static getCrawlInjects (onNewDocument = true) {\n    const key = onNewDocument ? 'source' : 'scriptSource'\n    return {\n      [key]: `(function (){\n        (${noNaughtJs.toString()})();\n        (${scrollOnLoad.toString()})();\n        (${initCollectLinks.toString()})();\n      })();`\n    }\n  }\n\n  /**\n   * @desc Receive param object for JS injected into every frame of the page crawled that includes disabling things that can act as an crawler trap and JS that sets up out link collection\n   * @param {boolean} [onNewDocument = true] - Flag indicating if the inject object is for Page.addScriptToEvaluateOnNewDocument (default) or Page.addScriptToEvaluateOnLoad  params\n   * @return {OnNewDocumentInject | OnLoadInject} - Object keyed for the params used by the desired CDP method\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnNewDocument\n   * @see https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnLoad\n   */\n  static getCrawlInjectsNoScroll (onNewDocument = true) {\n    const key = onNewDocument ? 'source' : 'scriptSource'\n    return {\n      [key]: `(function (){\n        (${noNaughtJs.toString()})();\n        (${initCollectLinks.toString()})();\n      })();`\n    }\n  }\n}\n\n/**\n * @type {InjectManager}\n */\nmodule.exports = InjectManager\n\n/**\n * @typedef {{scriptSource: string}} OnLoadInject\n */\n\n/**\n * @typedef {{source: string}} OnNewDocumentInject\n */\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/injectManager/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 262,
    "kind": "class",
    "name": "InjectManager",
    "memberof": "lib/injectManager/index.js",
    "static": true,
    "longname": "lib/injectManager/index.js~InjectManager",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/injectManager/index.js",
    "importStyle": "InjectManager",
    "description": "Manages the JavaScript that is injected into the page",
    "lineNumber": 30,
    "interface": false
  },
  {
    "__docId__": 263,
    "kind": "typedef",
    "name": "OnLoadInject",
    "memberof": "lib/injectManager/index.js",
    "static": true,
    "longname": "lib/injectManager/index.js~OnLoadInject",
    "access": "public",
    "description": "",
    "type": {
      "types": [
        "{scriptSource: string}"
      ],
      "optional": false,
      "name": "OnLoadInject"
    }
  },
  {
    "__docId__": 264,
    "kind": "typedef",
    "name": "OnNewDocumentInject",
    "memberof": "lib/injectManager/index.js",
    "static": true,
    "longname": "lib/injectManager/index.js~OnNewDocumentInject",
    "access": "public",
    "description": "",
    "type": {
      "types": [
        "{source: string}"
      ],
      "optional": false,
      "name": "OnNewDocumentInject"
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "rawScoll",
    "memberof": "lib/injectManager/index.js~InjectManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/injectManager/index.js~InjectManager.rawScoll",
    "access": "public",
    "description": "Receive the raw scroll page function for use with Runtime.evaluate",
    "see": [
      "https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-evaluate"
    ],
    "lineNumber": 36,
    "return": {
      "nullable": null,
      "types": [
        "scrollPage"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "rawNoNaughty",
    "memberof": "lib/injectManager/index.js~InjectManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/injectManager/index.js~InjectManager.rawNoNaughty",
    "access": "public",
    "description": "Receive the raw function that helps ensure that the pages JS can not be naughty for use with Runtime.evaluate",
    "see": [
      "https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-evaluate"
    ],
    "lineNumber": 45,
    "return": {
      "nullable": null,
      "types": [
        "function(): void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "rawCollectInject",
    "memberof": "lib/injectManager/index.js~InjectManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/injectManager/index.js~InjectManager.rawCollectInject",
    "access": "public",
    "description": "Receive the raw function that is used to collect outlinks from the pre-injected script {@link collect} for use with Runtime.evaluate",
    "see": [
      "https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-evaluate"
    ],
    "lineNumber": 54,
    "return": {
      "nullable": null,
      "types": [
        "collect"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "rawOutLinks",
    "memberof": "lib/injectManager/index.js~InjectManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/injectManager/index.js~InjectManager.rawOutLinks",
    "access": "public",
    "description": "Receive the raw function that is used to collect outlines from each of the pages frames. Used by {@link PuppeteerCrawler}",
    "lineNumber": 62,
    "return": {
      "nullable": null,
      "types": [
        "outLinks"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "getCollectInject",
    "memberof": "lib/injectManager/index.js~InjectManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/injectManager/index.js~InjectManager.getCollectInject",
    "access": "public",
    "description": "Receive param object for JS injected into every frame of the page crawled that sets up out link collection",
    "see": [
      "https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnNewDocument",
      "https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnLoad"
    ],
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " true",
        "defaultRaw": true,
        "name": "onNewDocument",
        "description": "Flag indicating if the inject object is for Page.addScriptToEvaluateOnNewDocument (default) or Page.addScriptToEvaluateOnLoad  params"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "OnNewDocumentInject ",
        " OnLoadInject"
      ],
      "spread": false,
      "description": "Object keyed for the params used by the desired CDP method"
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "getNoNaughtyJsInject",
    "memberof": "lib/injectManager/index.js~InjectManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/injectManager/index.js~InjectManager.getNoNaughtyJsInject",
    "access": "public",
    "description": "Receive param object for JS injected into every frame of the page crawled that includes disabling things that can act as an crawler trap",
    "see": [
      "https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnNewDocument",
      "https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnLoad"
    ],
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " true",
        "defaultRaw": true,
        "name": "onNewDocument",
        "description": "Flag indicating if the inject object is for Page.addScriptToEvaluateOnNewDocument (default) or Page.addScriptToEvaluateOnLoad  params"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "OnNewDocumentInject ",
        " OnLoadInject"
      ],
      "spread": false,
      "description": "Object keyed for the params used by the desired CDP method"
    }
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "getScollOnLoadInject",
    "memberof": "lib/injectManager/index.js~InjectManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/injectManager/index.js~InjectManager.getScollOnLoadInject",
    "access": "public",
    "description": "Receive param object for JS injected into every frame of the page crawled that scrolls the page once the `load` event has fired",
    "see": [
      "https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnNewDocument",
      "https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnLoad"
    ],
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " true",
        "defaultRaw": true,
        "name": "onNewDocument",
        "description": "Flag indicating if the inject object is for Page.addScriptToEvaluateOnNewDocument (default) or Page.addScriptToEvaluateOnLoad  params"
      }
    ],
    "return": {
      "types": [
        "{\"key\": *}"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "getScrollInject",
    "memberof": "lib/injectManager/index.js~InjectManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/injectManager/index.js~InjectManager.getScrollInject",
    "access": "public",
    "description": "Receive param object for JS injected into every frame of the page crawled that scrolls the page automatically",
    "see": [
      "https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnNewDocument",
      "https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnLoad"
    ],
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " true",
        "defaultRaw": true,
        "name": "onNewDocument",
        "description": "Flag indicating if the inject object is for Page.addScriptToEvaluateOnNewDocument (default) or Page.addScriptToEvaluateOnLoad  params"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "OnNewDocumentInject ",
        " OnLoadInject"
      ],
      "spread": false,
      "description": "Object keyed for the params used by the desired CDP method"
    }
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "getCrawlInjects",
    "memberof": "lib/injectManager/index.js~InjectManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/injectManager/index.js~InjectManager.getCrawlInjects",
    "access": "public",
    "description": "JS injected into every frame of the page crawled that includes disabling things that can act as an crawler trap, JS that scrolls the page automatically and JS that sets up out link collection",
    "see": [
      "https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnLoad",
      "https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnNewDocument"
    ],
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " true",
        "defaultRaw": true,
        "name": "onNewDocument",
        "description": "Flag indicating if the inject object is for Page.addScriptToEvaluateOnNewDocument (default) or Page.addScriptToEvaluateOnLoad  params"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "OnNewDocumentInject ",
        " OnLoadInject"
      ],
      "spread": false,
      "description": "Object keyed for the params used by the desired CDP method"
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "getCrawlInjectsNoScroll",
    "memberof": "lib/injectManager/index.js~InjectManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/injectManager/index.js~InjectManager.getCrawlInjectsNoScroll",
    "access": "public",
    "description": "Receive param object for JS injected into every frame of the page crawled that includes disabling things that can act as an crawler trap and JS that sets up out link collection",
    "see": [
      "https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnNewDocument",
      "https://chromedevtools.github.io/devtools-protocol/tot/Page#method-addScriptToEvaluateOnLoad"
    ],
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " true",
        "defaultRaw": true,
        "name": "onNewDocument",
        "description": "Flag indicating if the inject object is for Page.addScriptToEvaluateOnNewDocument (default) or Page.addScriptToEvaluateOnLoad  params"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "OnNewDocumentInject ",
        " OnLoadInject"
      ],
      "spread": false,
      "description": "Object keyed for the params used by the desired CDP method"
    }
  },
  {
    "__docId__": 275,
    "kind": "file",
    "name": "lib/injectManager/pageInjects/collectLinks.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\n/**\n * @desc Function that is injected into every frame of the page currently being crawled that will\n * setup the outlink collection depending if the frame injected into is the top frame or a sub frame.\n *\n * If this function is injected into the top frame an instance of Collector / TopHandler are created otherwise\n * only an instance of Collector is created.\n *\n * In the case of injection into the top frame the `$$$$Squidwarc$$Collector$$$$` property will be defined on\n * window with value of the created TopHandler instance and `message` event listener will be registered on window for\n * receiving messages sent by this script when injected into child frames.\n *\n * Each child frame will send two messages (`indicateIsChild`, `outlinkgot`) and listen for one (`outlinkcollect`).\n * The message types are found in the object m within the body of this function.\n * The `indicateIsChild` message is sent immediately by a child frames to allow TopHandler can hold onto a reference to the frame for communicating with it.\n * The `outlinkgot` message is sent by each child frame to the top frame once outlinks have been collected for that frame.\n * The `outlinkcollect` message is sent by TopHandler to each child frame to have it start collecting outlinks.\n * @return {void}\n */\nexports.initCollectLinks = function initCollectLinks () {\n  let isIframe\n  try {\n    isIframe = window.self !== window.top\n  } catch (e) {\n    isIframe = true\n  }\n\n  /**\n   * @desc Performs the outlink collection for a frame\n   */\n  class Collector {\n    constructor () {\n      this.ignore = [\n        '#',\n        'about:',\n        'data:',\n        'mailto:',\n        'javascript:',\n        'js:',\n        '{',\n        '*',\n        'ftp:',\n        'tel:'\n      ]\n      this.good = {\n        'http:': true,\n        'https:': true\n      }\n      this.ilen = this.ignore.length\n      this.outlinks = []\n      this.links = []\n      this.linksSeen = new Set()\n      this.urlParer = new window.URL('about:blank')\n      this.urlParts = /^(https?:\\/\\/)?([^/]*@)?(.+?)(:\\d{2,5})?([/?].*)?$/\n      this.dot = /\\./g\n    }\n\n    static extractLinks () {\n      const collector = new Collector()\n      return collector.getOutlinks()\n    }\n\n    /**\n     * @desc Determines if the supplied URL is to be ignored or not\n     * @param {string} test - A URL\n     * @return {boolean}\n     */\n    shouldIgnore (test) {\n      let ignored = false\n      for (let i = 0; i < this.ilen; ++i) {\n        if (test.startsWith(this.ignore[i])) {\n          ignored = true\n          break\n        }\n      }\n      if (!ignored) {\n        let parsed = true\n        try {\n          this.urlParer.href = test\n        } catch (error) {\n          parsed = false\n        }\n        return !(parsed && this.good[this.urlParer.protocol])\n      }\n      return ignored\n    }\n\n    /**\n     * @desc Collects the outlink information for a frame\n     * @return {{outlinks: string, links: Array<string>, location: string}}\n     */\n    getOutlinks () {\n      const found = document.querySelectorAll(\n        'a[href],link[href],img[src],script[src],area[href]'\n      )\n      let flen = found.length\n      let elem\n      for (let i = 0; i < flen; ++i) {\n        elem = found[i]\n        switch (elem.nodeName) {\n          case 'LINK':\n            if (elem.href !== '') {\n              this.outlinks.push(`${elem.href} E link/@href\\r\\n`)\n            }\n            break\n          case 'IMG':\n            if (elem.src !== '') {\n              this.outlinks.push(`${elem.src} E =EMBED_MISC\\r\\n`)\n            }\n            break\n          case 'SCRIPT':\n            if (elem.src !== '') {\n              this.outlinks.push(`${elem.src} E script/@src\\r\\n`)\n            }\n            break\n          default:\n            let href = elem.href.trim()\n            if (href !== '' && href !== ' ') {\n              if (!this.shouldIgnore(href) && !this.linksSeen.has(href)) {\n                this.linksSeen.add(href)\n                this.links.push({\n                  href,\n                  pathname: this.urlParer.pathname,\n                  host: this.urlParer.host\n                })\n              }\n              this.outlinks.push(`outlink: ${href} L a/@href\\r\\n`)\n            }\n            break\n        }\n      }\n      let location\n      try {\n        location = window.location.href\n      } catch (error) {}\n      return {\n        outlinks: this.outlinks.join(''),\n        links: this.links,\n        location\n      }\n    }\n  }\n\n  class TopHandler {\n    constructor (collectorRef, messages) {\n      /**\n       * @type {{outlinks: string, links: Array<string>, totalChildren: number}}\n       */\n      this.found = {\n        outlinks: '',\n        links: [],\n        totalChildren: 0\n      }\n      this.collectorRef = collectorRef\n      this.messages = messages\n      this.done = null\n      this.childSources = []\n      this.childFrames = 0\n      this.countingChildren = true\n      this.to = null\n      this.toStop = false\n      this.go = this.go.bind(this)\n      this.helloFromFrame = this.helloFromFrame.bind(this)\n      this.finished = this.finished.bind(this)\n    }\n\n    /**\n     * @desc Returns a promise that resolves once outlink collection, from top frame and child frames is complete\n     * @return {Promise<{outlinks: string, links: Array<string>, totalChildren: number}>}\n     */\n    prWhenDone () {\n      return new Promise(resolve => {\n        this.done = resolve\n      })\n    }\n\n    /**\n     * @desc Send the `outlinkcollect` message to all child frames and start the collection timeout\n     */\n    go () {\n      this.countingChildren = false\n      this.found.totalChildren = this.childFrames\n      const cs = this.childSources\n      for (let i = 0; i < cs.length; ++i) {\n        let c = cs[i]\n        if (c && c.postMessage) {\n          c.postMessage({ type: this.messages.outlinkcollect }, '*')\n        }\n      }\n      this.to = setTimeout(this.finished, 20000)\n    }\n\n    /**\n     * @desc Listens for the `outlinkgot` message sent by each child frame that contains its outlink information\n     */\n    helloFromFrame (e) {\n      if (e.data) {\n        if (\n          e.data.type === this.messages.indicateIsChild &&\n          e.origin &&\n          e.origin !== 'null' &&\n          this.countingChildren\n        ) {\n          this.childFrames += 1\n          this.childSources.push(e.source)\n        } else if (e.data.type === this.messages.outlinkgot) {\n          this.found.outlinks += e.data.outlinks.outlinks\n          this.found.links = this.found.links.concat(e.data.outlinks.links)\n          this.childFrames -= 1\n          if (this.childFrames === 0 && !this.toStop) {\n            this.finished()\n          }\n        }\n      }\n    }\n\n    /**\n     * @desc Called once child frame outlink collection is complete. Collects the top frames outlinks and\n     * resolves the Promise that is being awaited by the crawler with the values of all outlinks collected\n     */\n    finished () {\n      if (this.to) {\n        clearTimeout(this.to)\n      }\n      this.to = null\n      this.toStop = true\n      const { links, outlinks, location } = this.collectorRef.extractLinks()\n      this.found.outlinks += outlinks\n      this.found.location = location\n      this.found.links = this.found.links.concat(links)\n      this.done(this.found)\n    }\n  }\n\n  /**\n   * @type {{indicateIsChild: string, outlinkcollect: string, outlinkgot: string}}\n   */\n  const m = {\n    indicateIsChild: '$$$$Squidwarc$$IsChild$$$$',\n    outlinkcollect: '$$$$Squidwarc$$CollectOutLinks$$$$',\n    outlinkgot: '$$$$Squidwarc$$GotOutlinks$$$$'\n  }\n\n  if (!isIframe) {\n    Object.defineProperty(window, '$$$$Squidwarc$$Collector$$$$', {\n      enumerable: false,\n      configurable: false,\n      value: new TopHandler(Collector, m)\n    })\n    window.addEventListener(\n      'message',\n      window.$$$$Squidwarc$$Collector$$$$.helloFromFrame,\n      false\n    )\n  } else {\n    const mhc = function messageHandlerChild (e) {\n      if (e.data && e.data.type === m.outlinkcollect) {\n        let outlinks\n        try {\n          outlinks = Collector.extractLinks()\n        } catch (e) {\n          outlinks = {\n            error: e.toString(),\n            outlinks: '',\n            links: [],\n            location: window.location.href\n          }\n        }\n        window.top.postMessage({ type: m.outlinkgot, outlinks }, '*')\n      }\n    }\n    window.addEventListener('message', mhc, false)\n    window.top.postMessage({ type: m.indicateIsChild }, '*')\n  }\n}\n\n/**\n * @desc Starts the collection of the outlinks. Use only when {@link initCollectLinks} is pre-injected into every frame\n * @return {Promise<{outlinks: string, links: Array<string>, location: string}>}\n */\nexports.collect = function collect () {\n  const prom = window.$$$$Squidwarc$$Collector$$$$.prWhenDone()\n  // defer execution of go\n  Promise.resolve().then(() => window.$$$$Squidwarc$$Collector$$$$.go())\n  return prom\n}\n\n/**\n * @desc Builds the WARC outlink metadata information and finds potential links to goto next from a page and build\n * @return {Promise<{outlinks: string, links: Array<string>}>}\n */\nexports.outLinks = async function outLinks () {\n  const ignore = [\n    '#',\n    'about:',\n    'data:',\n    'mailto:',\n    'javascript:',\n    'js:',\n    '{',\n    '*',\n    'ftp:',\n    'tel:'\n  ]\n  const good = { 'http:': true, 'https:': true }\n  const outlinks = []\n  const links = []\n  const linksSeen = new Set()\n  const urlParer = new URL('about:blank')\n  function shouldIgnore (test) {\n    let ignored = false\n    let i = ignore.length\n    while (i--) {\n      if (test.startsWith(ignore[i])) {\n        ignored = true\n        break\n      }\n    }\n    if (!ignored) {\n      let parsed = true\n      try {\n        urlParer.href = test\n      } catch (error) {\n        parsed = false\n      }\n      return !(parsed && good[urlParer.protocol])\n    }\n    return ignored\n  }\n\n  const found = document.querySelectorAll(\n    'a[href],link[href],img[src],script[src],area[href]'\n  )\n  let elem\n  let i = found.length\n  while (i--) {\n    elem = found[i]\n    switch (elem.nodeName) {\n      case 'LINK':\n        if (elem.href !== '') {\n          outlinks.push(`${elem.href} E link/@href\\r\\n`)\n        }\n        break\n      case 'IMG':\n        if (elem.src !== '') {\n          outlinks.push(`${elem.src} E =EMBED_MISC\\r\\n`)\n        }\n        break\n      case 'SCRIPT':\n        if (elem.src !== '') {\n          outlinks.push(`${elem.src} E script/@src\\r\\n`)\n        }\n        break\n      default:\n        let href = elem.href.trim()\n        if (href !== '' && href !== ' ') {\n          if (!shouldIgnore(href) && !linksSeen.has(href)) {\n            linksSeen.add(href)\n            links.push({\n              href,\n              pathname: urlParer.pathname,\n              host: urlParer.host\n            })\n          }\n          outlinks.push(`outlink: ${href} L a/@href\\r\\n`)\n        }\n        break\n    }\n  }\n  return {\n    outlinks: outlinks.join(''),\n    links: links\n  }\n}\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/injectManager/pageInjects/collectLinks.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 276,
    "kind": "function",
    "name": "initCollectLinks",
    "memberof": "lib/injectManager/pageInjects/collectLinks.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/injectManager/pageInjects/collectLinks.js~initCollectLinks",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/injectManager/pageInjects/collectLinks.js",
    "importStyle": "{initCollectLinks}",
    "description": "Function that is injected into every frame of the page currently being crawled that will\nsetup the outlink collection depending if the frame injected into is the top frame or a sub frame.\n\nIf this function is injected into the top frame an instance of Collector / TopHandler are created otherwise\nonly an instance of Collector is created.\n\nIn the case of injection into the top frame the `$$$$Squidwarc$$Collector$$$$` property will be defined on\nwindow with value of the created TopHandler instance and `message` event listener will be registered on window for\nreceiving messages sent by this script when injected into child frames.\n\nEach child frame will send two messages (`indicateIsChild`, `outlinkgot`) and listen for one (`outlinkcollect`).\nThe message types are found in the object m within the body of this function.\nThe `indicateIsChild` message is sent immediately by a child frames to allow TopHandler can hold onto a reference to the frame for communicating with it.\nThe `outlinkgot` message is sent by each child frame to the top frame once outlinks have been collected for that frame.\nThe `outlinkcollect` message is sent by TopHandler to each child frame to have it start collecting outlinks.",
    "lineNumber": 36,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 277,
    "kind": "function",
    "name": "collect",
    "memberof": "lib/injectManager/pageInjects/collectLinks.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/injectManager/pageInjects/collectLinks.js~collect",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/injectManager/pageInjects/collectLinks.js",
    "importStyle": "{collect}",
    "description": "Starts the collection of the outlinks. Use only when {@link initCollectLinks} is pre-injected into every frame",
    "lineNumber": 297,
    "return": {
      "nullable": null,
      "types": [
        "Promise<{outlinks: string, links: Array<string>, location: string}>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 278,
    "kind": "function",
    "name": "outLinks",
    "memberof": "lib/injectManager/pageInjects/collectLinks.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/injectManager/pageInjects/collectLinks.js~outLinks",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/injectManager/pageInjects/collectLinks.js",
    "importStyle": "{outLinks}",
    "description": "Builds the WARC outlink metadata information and finds potential links to goto next from a page and build",
    "lineNumber": 308,
    "return": {
      "nullable": null,
      "types": [
        "Promise<{outlinks: string, links: Array<string>}>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 279,
    "kind": "file",
    "name": "lib/injectManager/pageInjects/index.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nconst noNaughtJs = require('./noNaughtyJS')\nconst { scrollPage, scrollOnLoad } = require('./scroll')\nconst { initCollectLinks, collect, outLinks } = require('./collectLinks')\n\n/**\n * @type {{noNaughtJs: function(): void, scrollPage: scrollPage, scrollOnLoad: scrollOnLoad, initCollectLinks: initCollectLinks, collect: collect, outLinks: outLinks}}\n */\nmodule.exports = {\n  noNaughtJs,\n  scrollPage,\n  scrollOnLoad,\n  initCollectLinks,\n  collect,\n  outLinks\n}\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/injectManager/pageInjects/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 280,
    "kind": "file",
    "name": "lib/injectManager/pageInjects/noNaughtyJS.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\n/**\n * @desc Function that disables the setting of window event handlers onbeforeunload and onunload and\n * disables the usage of window.alert, window.confirm, and window.prompt.\n *\n * This is done to ensure that they can not be used crawler traps.\n */\nmodule.exports = function noNaughtyJS () {\n  Object.defineProperty(window, 'onbeforeunload', {\n    configurable: false,\n    writeable: false,\n    value: function () {}\n  })\n  Object.defineProperty(window, 'onunload', {\n    configurable: false,\n    writeable: false,\n    value: function () {}\n  })\n  window.alert = function () {}\n  window.confirm = function () {}\n  window.prompt = function () {}\n\n  /*\n    We no bot I swear! See\n    https://github.com/paulirish/headless-cat-n-mouse\n    https://antoinevastel.com/bot%20detection/2018/01/17/detect-chrome-headless-v2.html\n  */\n\n  /* eslint-disable */\n\n  if (!window.chrome) {\n    const installer = { install() {} }\n    window.chrome = {\n      app: { isInstalled: false },\n      webstore: {\n        onInstallStageChanged: {},\n        onDownloadProgress: {},\n        install(url, onSuccess, onFailure) {\n          installer.install(url, onSuccess, onFailure)\n        }\n      },\n      csi() {},\n      loadTimes() {}\n    }\n  }\n\n  if (!window.chrome.runtime) {\n    window.chrome.runtime = {\n      PlatformOs: {\n        MAC: 'mac',\n        WIN: 'win',\n        ANDROID: 'android',\n        CROS: 'cros',\n        LINUX: 'linux',\n        OPENBSD: 'openbsd'\n      },\n      PlatformArch: {\n        ARM: 'arm',\n        X86_32: 'x86-32',\n        X86_64: 'x86-64',\n        MIPS: 'mips',\n        MIPS64: 'mips64'\n      },\n      PlatformNaclArch: {\n        ARM: 'arm',\n        X86_32: 'x86-32',\n        X86_64: 'x86-64',\n        MIPS: 'mips',\n        MIPS64: 'mips64'\n      },\n      RequestUpdateCheckStatus: {\n        THROTTLED: 'throttled',\n        NO_UPDATE: 'no_update',\n        UPDATE_AVAILABLE: 'update_available'\n      },\n      OnInstalledReason: {\n        INSTALL: 'install',\n        UPDATE: 'update',\n        CHROME_UPDATE: 'chrome_update',\n        SHARED_MODULE_UPDATE: 'shared_module_update'\n      },\n      OnRestartRequiredReason: {\n        APP_UPDATE: 'app_update',\n        OS_UPDATE: 'os_update',\n        PERIODIC: 'periodic'\n      },\n      connect: function() {}.bind(function() {}),\n      sendMessage: function() {}.bind(function() {})\n    }\n  }\n\n  if (HTMLIFrameElement.prototype.__lookupGetter__('contentWindow') == null) {\n    Object.defineProperty(HTMLIFrameElement.prototype, 'contentWindow', {\n      get: function() {\n        return window\n      }\n    })\n  }\n\n  if ((navigator.plugins || []).length === 0) {\n    Object.defineProperty(navigator, 'plugins', {\n      get: () => [1, 2, 3, 4, 5]\n    })\n  }\n\n  if ((navigator.languages || []).length === 0) {\n    Object.defineProperty(navigator, 'languages', {\n      get: () => ['en-US', 'en']\n    })\n  }\n  /* eslint-enable */\n}\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/injectManager/pageInjects/noNaughtyJS.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 281,
    "kind": "function",
    "name": "noNaughtyJS",
    "memberof": "lib/injectManager/pageInjects/noNaughtyJS.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/injectManager/pageInjects/noNaughtyJS.js~noNaughtyJS",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/injectManager/pageInjects/noNaughtyJS.js",
    "importStyle": "noNaughtyJS",
    "description": "Function that disables the setting of window event handlers onbeforeunload and onunload and\ndisables the usage of window.alert, window.confirm, and window.prompt.\n\nThis is done to ensure that they can not be used crawler traps.",
    "lineNumber": 24,
    "params": [],
    "return": null
  },
  {
    "__docId__": 282,
    "kind": "file",
    "name": "lib/injectManager/pageInjects/scroll.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\n/**\n * @desc Function that is injected into every frame of the page being crawled that starts scrolling the page\n * once the `load` event has been fired a maximum of 20 times or until no more scroll can be done\n */\nexports.scrollOnLoad = function scrollOnLoad () {\n  let scrollingTO = 2000\n  let lastScrolled\n  let scrollerInterval\n  window.addEventListener('load', () => {\n    lastScrolled = Date.now()\n    let scrollCount = 0\n    let maxScroll = Math.max(\n      document.body.scrollHeight,\n      document.documentElement.scrollHeight\n    )\n\n    scrollerInterval = setInterval(() => {\n      let scrollPos = window.scrollY + window.innerHeight\n      if (scrollCount < 20) {\n        maxScroll = Math.max(\n          document.body.scrollHeight,\n          document.documentElement.scrollHeight\n        )\n        scrollCount += 1\n      }\n      if (scrollPos < maxScroll) {\n        window.scrollBy(0, 200)\n        lastScrolled = Date.now()\n      } else if (!lastScrolled || Date.now() - lastScrolled > scrollingTO) {\n        if (scrollerInterval === undefined) {\n          return\n        }\n        clearInterval(scrollerInterval)\n        scrollerInterval = undefined\n      } else if (scrollPos >= maxScroll) {\n        clearInterval(scrollerInterval)\n        scrollerInterval = undefined\n      }\n    }, 200)\n  })\n}\n\n/**\n * @desc Function that scrolls the page/frame injected into a maximum of 20 times or until no more scroll can be done\n * @returns {Promise<void>}\n */\nexports.scrollPage = async function scrollPage () {\n  let scrollingTO = 2000\n  let lastScrolled = Date.now()\n  let scrollCount = 0\n  let maxScroll = Math.max(\n    document.body.scrollHeight,\n    document.documentElement.scrollHeight\n  )\n  await new Promise((resolve, reject) => {\n    let scrollerInterval = setInterval(() => {\n      let scrollPos = window.scrollY + window.innerHeight\n      if (scrollCount < 20) {\n        maxScroll = Math.max(\n          document.body.scrollHeight,\n          document.documentElement.scrollHeight\n        )\n        scrollCount += 1\n      }\n      if (scrollPos < maxScroll) {\n        window.scrollBy(0, 200)\n        lastScrolled = Date.now()\n      } else if (!lastScrolled || Date.now() - lastScrolled > scrollingTO) {\n        if (scrollerInterval === undefined) {\n          return\n        }\n        clearInterval(scrollerInterval)\n        scrollerInterval = undefined\n        resolve()\n      } else if (scrollPos >= maxScroll) {\n        clearInterval(scrollerInterval)\n        scrollerInterval = undefined\n        resolve()\n      }\n    }, 200)\n  })\n}\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/injectManager/pageInjects/scroll.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 283,
    "kind": "function",
    "name": "scrollOnLoad",
    "memberof": "lib/injectManager/pageInjects/scroll.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/injectManager/pageInjects/scroll.js~scrollOnLoad",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/injectManager/pageInjects/scroll.js",
    "importStyle": "{scrollOnLoad}",
    "description": "Function that is injected into every frame of the page being crawled that starts scrolling the page\nonce the `load` event has been fired a maximum of 20 times or until no more scroll can be done",
    "lineNumber": 22,
    "params": [],
    "return": null
  },
  {
    "__docId__": 284,
    "kind": "function",
    "name": "scrollPage",
    "memberof": "lib/injectManager/pageInjects/scroll.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/injectManager/pageInjects/scroll.js~scrollPage",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/injectManager/pageInjects/scroll.js",
    "importStyle": "{scrollPage}",
    "description": "Function that scrolls the page/frame injected into a maximum of 20 times or until no more scroll can be done",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 285,
    "kind": "file",
    "name": "lib/launcher/chrome.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nconst os = require('os')\nconst path = require('path')\nconst cp = require('child_process')\nconst fs = require('fs-extra')\nconst CRI = require('chrome-remote-interface')\nconst readline = require('readline')\nconst DEFAULT_ARGS = require('./defaultArgs')\nconst ChromeFinder = require('./chromeFinder')\nconst H = require('../crawler/helper')\nconst { delay } = require('../utils/promises')\n\n/**\n * @param {ChromeOptions} options\n * @return {?ChromeOptions}\n */\nfunction ensureOptions (options = {}) {\n  if (options.port === undefined) {\n    options.port = 9222\n  }\n  if (options.host === undefined) {\n    options.host = 'localhost'\n  }\n  if (options.local === undefined || options.local) {\n    options.local = false\n  }\n  return options\n}\n\n/**\n *\n * @param {ChromeOptions} options\n * @param {string} userDataDir\n * @return {string[]}\n */\nfunction chromeArgs (options, userDataDir) {\n  const chromeArguments = [...DEFAULT_ARGS]\n  chromeArguments.push(\n    `--user-data-dir=${userDataDir}`,\n    `--remote-debugging-port=${options.port}`\n  )\n  if (options.headless) {\n    chromeArguments.push('--headless', '--hide-scrollbars')\n    if (os.platform() === 'win32') {\n      chromeArguments.push('--disable-gpu')\n    }\n  }\n  if (process.env.INDOCKER) {\n    chromeArguments.push(\n      '--no-sandbox',\n      '--disable-setuid-sandbox',\n      '--disable-dev-shm-usage'\n    )\n  }\n  chromeArguments.push('about:blank')\n  return chromeArguments\n}\n\n/**\n * @type {string}\n */\nconst CHROME_PROFILE_PATH = path.join(os.tmpdir(), 'squidwarc_profile-')\n\n/**\n * @desc Utility class for launching or connecting to a Chrome/Chromium instance\n */\nclass ChromeLauncher {\n  /**\n   * @desc Launch Chrome by finding an acceptable executable on the host system\n   * @param {?ChromeOptions} [options = {}]\n   * @return {Promise<CRI>}\n   */\n  static async launch (options) {\n    options = ensureOptions(options)\n    if (options.executable === undefined) {\n      options.executable = await ChromeFinder.findChrome()\n    }\n    let userDataDir = null\n    if (!options.userDataDir) {\n      userDataDir = await fs.mkdtemp(CHROME_PROFILE_PATH)\n    } else {\n      userDataDir = options.userDataDir\n    }\n    const chromeArguments = chromeArgs(options, userDataDir)\n\n    const chromeProcess = cp.spawn(options.executable, chromeArguments, {\n      stdio: ['ignore', 'ignore', 'pipe'],\n      env: process.env,\n      detached: process.platform !== 'win32'\n    })\n\n    function maybeRemoveUDataDir () {\n      if (!options.userDataDir) {\n        try {\n          fs.removeSync(userDataDir)\n        } catch (e) {}\n      }\n    }\n\n    let killed = false\n\n    function killChrome () {\n      if (killed) {\n        return\n      }\n      killed = true\n      try {\n        if (process.platform === 'win32') {\n          cp.execSync(`taskkill /pid ${chromeProcess.pid} /T /F`)\n        } else {\n          process.kill(-chromeProcess.pid, 'SIGKILL')\n        }\n      } catch (e) {}\n\n      maybeRemoveUDataDir()\n    }\n\n    process.on('exit', killChrome)\n    chromeProcess.once('exit', maybeRemoveUDataDir)\n\n    process.on('SIGINT', () => {\n      killChrome()\n      process.exit(130)\n    })\n    process.once('SIGTERM', killChrome)\n    process.once('SIGHUP', killChrome)\n\n    let criClient\n    try {\n      // await Promise.delay(5000)\n      let listeningOn = await waitForWSEndpoint(chromeProcess, 30 * 1000)\n      console.log(listeningOn)\n      await delay(3000)\n      criClient = await CRI(options)\n    } catch (e) {\n      killChrome()\n      throw e\n    }\n    return criClient\n  }\n\n  /**\n   * @desc Launch Chrome by finding an acceptable executable on the host system but do not connect to it\n   * @param {?ChromeOptions} [options = {}]\n   * @return {Promise<CRI>}\n   */\n  static async launchNoConnect (options = {}) {\n    options = ensureOptions(options)\n    if (options.executable == null) {\n      options.executable = await ChromeFinder.findChrome()\n    }\n    let userDataDir = null\n    if (!options.executable) {\n      userDataDir = await fs.mkdtemp(CHROME_PROFILE_PATH)\n    } else {\n      userDataDir = options.userDataDir\n    }\n\n    const chromeArguments = chromeArgs(options, userDataDir)\n    let killed = false\n    const chromeProcess = cp.spawn(options.executable, chromeArguments, {\n      stdio: ['ignore', 'ignore', 'pipe'],\n      env: process.env,\n      detached: process.platform !== 'win32'\n    })\n\n    process.on('exit', killChrome)\n    chromeProcess.once('exit', maybeRemoveUDataDir)\n\n    process.on('SIGINT', () => {\n      killChrome()\n      process.exit(130)\n    })\n    process.once('SIGTERM', killChrome)\n    process.once('SIGHUP', killChrome)\n\n    try {\n      // await Promise.delay(5000)\n      let listeningOn = await waitForWSEndpoint(chromeProcess, 30 * 1000)\n      console.log(listeningOn)\n    } catch (e) {\n      killChrome()\n      throw e\n    }\n\n    function maybeRemoveUDataDir () {\n      if (!options.userDataDir) {\n        try {\n          fs.removeSync(userDataDir)\n        } catch (e) {}\n      }\n    }\n\n    function killChrome () {\n      if (killed) {\n        return\n      }\n      killed = true\n      try {\n        if (process.platform === 'win32') {\n          cp.execSync(`taskkill /pid ${chromeProcess.pid} /T /F`)\n        } else {\n          process.kill(-chromeProcess.pid, 'SIGKILL')\n        }\n      } catch (e) {}\n\n      maybeRemoveUDataDir()\n    }\n  }\n\n  /**\n   * @desc Connect to an running instance of Chrome\n   * @param {?ChromeOptions} [options]\n   * @return {Promise<CRI>}\n   */\n  static connect (options = {}) {\n    return CRI(ensureOptions(options))\n  }\n\n  /**\n   * @desc Create and connect to a new tab of a running Chrome instance\n   * @param {?ChromeOptions} [options = {}]\n   * @return {Promise<CRI>}\n   * @public\n   */\n  static async newTab (options = {}) {\n    options = ensureOptions(options)\n    let target = await CRI.New(options)\n    return CRI({ ...options, target })\n  }\n\n  /**\n   * @desc Receive the protocol definition of the remote Chrome\n   * @param {?ChromeOptions} [options = {}]\n   * @return {Promise<Object>}\n   * @public\n   */\n  static async getProtocolDef (options = {}) {\n    options = ensureOptions(options)\n    return CRI.Protocol(options)\n  }\n}\n\n/**\n * @desc Function that returns a promise resolving when chrome tells us the WS endpoint is ready\n * @param chromeProcess\n * @param timeout\n * @return {Promise<any>}\n */\nfunction waitForWSEndpoint (chromeProcess, timeout) {\n  return new Promise((resolve, reject) => {\n    const rl = readline.createInterface({ input: chromeProcess.stderr })\n    let stderr = ''\n    const listeners = [\n      H.addEventListener(rl, 'line', onLine),\n      H.addEventListener(rl, 'close', onClose),\n      H.addEventListener(chromeProcess, 'exit', onClose),\n      H.addEventListener(chromeProcess, 'error', onClose)\n    ]\n    const timeoutId = timeout ? setTimeout(onTimeout, timeout) : 0\n\n    function onClose () {\n      cleanup()\n      reject(new Error(['Failed to launch chrome!', stderr].join('\\n')))\n    }\n\n    function onTimeout () {\n      cleanup()\n      reject(\n        new Error(`Timed out after ${timeout} ms while trying to connect to Chrome!`)\n      )\n    }\n\n    /**\n     * @param {string} line\n     */\n    function onLine (line) {\n      stderr += line + '\\n'\n      const match = line.match(/^DevTools listening on (ws:\\/\\/.*)$/)\n      if (!match) {\n        return\n      }\n      cleanup()\n      resolve(match[1])\n    }\n\n    function cleanup () {\n      if (timeoutId) {\n        clearTimeout(timeoutId)\n      }\n      H.removeEventListeners(listeners)\n    }\n  })\n}\n\n/**\n * @type {ChromeLauncher}\n */\nmodule.exports = ChromeLauncher\n\n/**\n * @external {CRI} https://github.com/cyrus-and/chrome-remote-interface\n */\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/launcher/chrome.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "function",
    "name": "ensureOptions",
    "memberof": "lib/launcher/chrome.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/launcher/chrome.js~ensureOptions",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/launcher/chrome.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChromeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "ChromeOptions"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 287,
    "kind": "function",
    "name": "chromeArgs",
    "memberof": "lib/launcher/chrome.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/launcher/chrome.js~chromeArgs",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/launcher/chrome.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChromeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userDataDir",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 288,
    "kind": "variable",
    "name": "CHROME_PROFILE_PATH",
    "memberof": "lib/launcher/chrome.js",
    "static": true,
    "longname": "lib/launcher/chrome.js~CHROME_PROFILE_PATH",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/launcher/chrome.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 289,
    "kind": "function",
    "name": "waitForWSEndpoint",
    "memberof": "lib/launcher/chrome.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/launcher/chrome.js~waitForWSEndpoint",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/launcher/chrome.js",
    "importStyle": null,
    "description": "Function that returns a promise resolving when chrome tells us the WS endpoint is ready",
    "lineNumber": 266,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chromeProcess",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "timeout",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<any>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 290,
    "kind": "class",
    "name": "ChromeLauncher",
    "memberof": "lib/launcher/chrome.js",
    "static": true,
    "longname": "lib/launcher/chrome.js~ChromeLauncher",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/launcher/chrome.js",
    "importStyle": "ChromeLauncher",
    "description": "Utility class for launching or connecting to a Chrome/Chromium instance",
    "lineNumber": 83,
    "interface": false
  },
  {
    "__docId__": 291,
    "kind": "external",
    "name": "CRI",
    "externalLink": "https://github.com/cyrus-and/chrome-remote-interface",
    "memberof": "lib/launcher/chrome.js",
    "static": true,
    "longname": "lib/launcher/chrome.js~CRI",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "launch",
    "memberof": "lib/launcher/chrome.js~ChromeLauncher",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/launcher/chrome.js~ChromeLauncher.launch",
    "access": "public",
    "description": "Launch Chrome by finding an acceptable executable on the host system",
    "lineNumber": 89,
    "params": [
      {
        "nullable": true,
        "types": [
          "ChromeOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " {}",
        "defaultRaw": {},
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<CRI>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "launchNoConnect",
    "memberof": "lib/launcher/chrome.js~ChromeLauncher",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/launcher/chrome.js~ChromeLauncher.launchNoConnect",
    "access": "public",
    "description": "Launch Chrome by finding an acceptable executable on the host system but do not connect to it",
    "lineNumber": 163,
    "params": [
      {
        "nullable": true,
        "types": [
          "ChromeOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " {}",
        "defaultRaw": {},
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<CRI>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "connect",
    "memberof": "lib/launcher/chrome.js~ChromeLauncher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/launcher/chrome.js~ChromeLauncher.connect",
    "access": "public",
    "description": "Connect to an running instance of Chrome",
    "lineNumber": 232,
    "params": [
      {
        "nullable": true,
        "types": [
          "ChromeOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<CRI>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "newTab",
    "memberof": "lib/launcher/chrome.js~ChromeLauncher",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/launcher/chrome.js~ChromeLauncher.newTab",
    "access": "public",
    "description": "Create and connect to a new tab of a running Chrome instance",
    "lineNumber": 242,
    "params": [
      {
        "nullable": true,
        "types": [
          "ChromeOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " {}",
        "defaultRaw": {},
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<CRI>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "getProtocolDef",
    "memberof": "lib/launcher/chrome.js~ChromeLauncher",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/launcher/chrome.js~ChromeLauncher.getProtocolDef",
    "access": "public",
    "description": "Receive the protocol definition of the remote Chrome",
    "lineNumber": 254,
    "params": [
      {
        "nullable": true,
        "types": [
          "ChromeOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " {}",
        "defaultRaw": {},
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 297,
    "kind": "file",
    "name": "lib/launcher/chromeFinder.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nconst cp = require('child_process')\nconst path = require('path')\nconst fs = require('fs-extra')\n\n/**\n * @type {RegExp}\n */\nconst nlre = /\\r?\\n/\n/**\n * @type {RegExp}\n */\nconst desktopArgRE = /(^[^ ]+).*/\n\n/**\n * @desc Executes the supplied command\n * @param {string} someCommand\n * @param {boolean} [rejectOnError = false]\n * @returns {Promise<string>}\n */\nfunction exec (someCommand, rejectOnError = false) {\n  return new Promise((resolve, reject) => {\n    cp.exec(someCommand, { encoding: 'utf8' }, (error, stdout, stderr) => {\n      if (error && rejectOnError) reject(error)\n      resolve(stdout.trim())\n    })\n  })\n}\n\n/**\n * @desc Executes the which command for the supplied executable name\n * @param {string} executable\n */\nfunction which (executable) {\n  return exec(`which ${executable}`)\n}\n\n/**\n * @desc Executes the ls command for the supplied path looking for .desktop files for Chrome or Chromium\n * @param {string} desktopPath\n * @returns {Promise<string[]>}\n */\nfunction chromeDesktops (desktopPath) {\n  // eslint-disable-next-line\n  return exec(`ls ${desktopPath} | grep -E \"\\/.*\\/(google|chrome|chromium)-.*\"`).then(\n    results => results.split(nlre)\n  )\n}\n\n/**\n * @desc Extracts the Chrome or Chromium executable path from the .desktop file\n * @param {string} desktopPath\n * @returns {Promise<string[]>}\n */\nasync function desktopExePath (desktopPath) {\n  let maybeResults\n  // eslint-disable-next-line\n  const patternPipe = `\"^Exec=\\/.*\\/(google|chrome|chromium)-.*\" ${desktopPath} | awk -F '=' '{print $2}'`\n  try {\n    maybeResults = await exec(`grep -ER ${patternPipe}`, true)\n  } catch (e) {\n    maybeResults = await exec(`grep -Er ${patternPipe}`)\n  }\n  const seen = new Set()\n  let keep\n  return maybeResults\n    .split(nlre)\n    .map(execPath => execPath.replace(desktopArgRE, '$1'))\n    .filter(exePath => {\n      keep = !seen.has(exePath)\n      seen.add(exePath)\n      return keep\n    })\n}\n\n/**\n * @desc Tests (T|F) to see if the execPath is executable by this process\n * @param {string} execPath - The executable path to test\n * @returns {Promise<boolean>}\n */\nasync function bingo (execPath) {\n  if (!execPath || execPath === '') return false\n  try {\n    await fs.access(execPath, fs.constants.X_OK)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * @desc Utility class that provides functionality for finding an suitable chrome executable\n */\nclass ChromeFinder {\n  /**\n   * @desc Finds an acceptable Chrome or Chromium executable.\n   * If the env key 'CHROME_PATH' is defined that is returned by default\n   * @returns {Promise<string>}\n   */\n  static async findChrome () {\n    if (await bingo(process.env.CHROME_PATH)) {\n      return process.env.CHROME_PATH\n    }\n    let plat = process.platform\n    if (plat === 'linux') {\n      return ChromeFinder.findChromeLinux()\n    } else if (plat === 'darwin') {\n      return ChromeFinder.findChromeDarwin()\n    } else if (plat === 'win32') {\n      return ChromeFinder.findChromeWindows()\n    } else {\n      throw new Error(`Unsupported platform ${plat}`)\n    }\n  }\n\n  /**\n   * @desc Finds an acceptable Chrome or Chromium executable on Linux\n   * If one is not found throws\n   * @throws Error - If an acceptable executable was not found\n   * @returns {Promise<string>}\n   */\n  static async findChromeLinux () {\n    const execs = [\n      'google-chrome-unstable',\n      'google-chrome-beta',\n      'google-chrome-stable',\n      'chromium-browser',\n      'chromium'\n    ]\n    let i = 0\n    let len = execs.length\n    let commandResults\n    // check which exec first\n    while (i < len) {\n      commandResults = await which(execs[i])\n      if (await bingo(commandResults)) {\n        return commandResults\n      }\n      i += 1\n    }\n    // which executable did not result in an exe so we must now check desktop files\n    const desktops = [\n      '/usr/share/applications/*.desktop',\n      '~/.local/share/applications/*.desktop'\n    ]\n    len = desktops.length\n    let len2\n    let j = 0\n    i = 0\n    let found = []\n    while (i < len) {\n      commandResults = await chromeDesktops(desktops[i])\n      len2 = commandResults.length\n      while (j < len2) {\n        found = found.concat(await desktopExePath(commandResults[j]))\n        j += 1\n      }\n      i += 1\n    }\n    const desiredExes = [\n      { regex: /google-chrome-unstable$/, weight: 52 },\n      { regex: /google-chrome-beta$/, weight: 51 },\n      { regex: /google-chrome-stable$/, weight: 50 },\n      { regex: /google-chrome$/, weight: 49 },\n      { regex: /chrome-wrapper$/, weight: 48 },\n      { regex: /chromium-browser$/, weight: 47 },\n      { regex: /chromium$/, weight: 46 }\n    ]\n    let sortedExes = found\n      .map(exep => {\n        for (const desired of desiredExes) {\n          if (desired.regex.test(exep)) {\n            return { exep, weight: desired.weight }\n          }\n        }\n        return { exep, weight: 10 }\n      })\n      .sort((a, b) => b.weight - a.weight)\n      .map(pair => pair.exep)\n    if (sortedExes.length > 0) {\n      return sortedExes[0]\n    }\n    throw new Error('No Chrome Installations Found')\n  }\n\n  /**\n   * @desc Finds an acceptable Chrome or Chromium executable on MacOS\n   * If one is not found throws\n   * @throws Error - If an acceptable executable was not found\n   * @returns {Promise<string>}\n   */\n  static async findChromeDarwin () {\n    // shamelessly borrowed from chrome-launcher (https://github.com/GoogleChrome/chrome-launcher/blob/master/chrome-finder.ts)\n    const suffixes = [\n      '/Contents/MacOS/Google Chrome Canary',\n      '/Contents/MacOS/Google Chrome'\n    ]\n\n    const LSREGISTER =\n      '/System/Library/Frameworks/CoreServices.framework' +\n      '/Versions/A/Frameworks/LaunchServices.framework' +\n      '/Versions/A/Support/lsregister'\n    const nlre = /\\r?\\n/\n    const installations = []\n\n    let commandResults = await exec(\n      `${LSREGISTER} -dump | grep -i 'google chrome\\\\( canary\\\\)\\\\?.app$' | awk '{$1=\"\" print $0}'`\n    )\n    let i = 0\n    let split = commandResults.split(nlre)\n    let len = split.length\n    let execPath\n    let inst\n\n    while (i < len) {\n      inst = split[i]\n      execPath = path.join(inst.trim(), suffixes[0])\n      if (await bingo(execPath)) {\n        installations.push(execPath)\n      }\n      execPath = path.join(inst.trim(), suffixes[1])\n      if (await bingo(execPath)) {\n        installations.push(execPath)\n      }\n      i += 1\n    }\n\n    // Retains one per line to maintain readability.\n    // clang-format off\n    const priorities = [\n      { regex: new RegExp(`^${process.env.HOME}/Applications/.*Chrome.app`), weight: 50 },\n      {\n        regex: new RegExp(`^${process.env.HOME}/Applications/.*Chrome Canary.app`),\n        weight: 51\n      },\n      { regex: /^\\/Applications\\/.*Chrome.app/, weight: 100 },\n      { regex: /^\\/Applications\\/.*Chrome Canary.app/, weight: 101 },\n      { regex: /^\\/Volumes\\/.*Chrome.app/, weight: -2 },\n      { regex: /^\\/Volumes\\/.*Chrome Canary.app/, weight: -1 }\n    ]\n\n    if (process.env.CHROME_PATH) {\n      priorities.unshift({ regex: new RegExp(`${process.env.CHROME_PATH}`), weight: 151 })\n    }\n    const defaultPriority = 10\n    let sortedExes = installations\n      // assign priorities\n      .map(inst => {\n        for (const pair of priorities) {\n          if (pair.regex.test(inst)) {\n            return { path: inst, weight: pair.weight }\n          }\n        }\n        return { path: inst, weight: defaultPriority }\n      })\n      // sort based on priorities\n      .sort((a, b) => b.weight - a.weight)\n      // remove priority flag\n      .map(pair => pair.path)[0]\n    if (sortedExes.length > 0) {\n      return sortedExes[0]\n    }\n    throw new Error('No Chrome Installations Found')\n  }\n\n  /**\n   * @desc Finds an acceptable Chrome or Chromium executable on Windows\n   * If one is not found throws\n   * @throws Error - If an acceptable executable was not found\n   * @returns {Promise<string>}\n   */\n  static async findChromeWindows () {\n    // shamelessly borrowed from chrome-launcher (https://github.com/GoogleChrome/chrome-launcher/blob/master/chrome-finder.ts)\n    const installations = []\n    const suffixes = [\n      `${path.sep}Google${path.sep}Chrome SxS${path.sep}Application${path.sep}chrome.exe`,\n      `${path.sep}Google${path.sep}Chrome${path.sep}Application${path.sep}chrome.exe`\n    ]\n    const prefixes = [\n      process.env.LOCALAPPDATA,\n      process.env.PROGRAMFILES,\n      process.env['PROGRAMFILES(X86)']\n    ].filter(Boolean)\n\n    if (process.env.CHROME_PATH && (await bingo(process.env.CHROME_PATH))) {\n      installations.push(process.env.CHROME_PATH)\n    }\n\n    let i = 0\n    let j = 0\n    let len = prefixes.length\n    let len2 = suffixes.length\n    let chromePath\n    while (i < len) {\n      while (j < len2) {\n        chromePath = path.join(prefixes[i], suffixes[j])\n        if (await bingo(chromePath)) {\n          installations.push(chromePath)\n        }\n        j += 1\n      }\n      i += 1\n    }\n    if (installations.length > 0) {\n      return installations[0]\n    }\n    throw new Error('No Chrome Installations Found')\n  }\n}\n\n/**\n * @type {ChromeFinder}\n */\nmodule.exports = ChromeFinder\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/launcher/chromeFinder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 298,
    "kind": "variable",
    "name": "nlre",
    "memberof": "lib/launcher/chromeFinder.js",
    "static": true,
    "longname": "lib/launcher/chromeFinder.js~nlre",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/launcher/chromeFinder.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 299,
    "kind": "variable",
    "name": "desktopArgRE",
    "memberof": "lib/launcher/chromeFinder.js",
    "static": true,
    "longname": "lib/launcher/chromeFinder.js~desktopArgRE",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/launcher/chromeFinder.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 300,
    "kind": "function",
    "name": "exec",
    "memberof": "lib/launcher/chromeFinder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/launcher/chromeFinder.js~exec",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/launcher/chromeFinder.js",
    "importStyle": null,
    "description": "Executes the supplied command",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "someCommand",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " false",
        "defaultRaw": false,
        "name": "rejectOnError",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 301,
    "kind": "function",
    "name": "which",
    "memberof": "lib/launcher/chromeFinder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/launcher/chromeFinder.js~which",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/launcher/chromeFinder.js",
    "importStyle": null,
    "description": "Executes the which command for the supplied executable name",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "executable",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 302,
    "kind": "function",
    "name": "chromeDesktops",
    "memberof": "lib/launcher/chromeFinder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/launcher/chromeFinder.js~chromeDesktops",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/launcher/chromeFinder.js",
    "importStyle": null,
    "description": "Executes the ls command for the supplied path looking for .desktop files for Chrome or Chromium",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string[]>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "desktopPath",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string[]>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 303,
    "kind": "function",
    "name": "desktopExePath",
    "memberof": "lib/launcher/chromeFinder.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/launcher/chromeFinder.js~desktopExePath",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/launcher/chromeFinder.js",
    "importStyle": null,
    "description": "Extracts the Chrome or Chromium executable path from the .desktop file",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string[]>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "desktopPath",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string[]>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 304,
    "kind": "function",
    "name": "bingo",
    "memberof": "lib/launcher/chromeFinder.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/launcher/chromeFinder.js~bingo",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/launcher/chromeFinder.js",
    "importStyle": null,
    "description": "Tests (T|F) to see if the execPath is executable by this process",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "execPath",
        "description": "The executable path to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 305,
    "kind": "class",
    "name": "ChromeFinder",
    "memberof": "lib/launcher/chromeFinder.js",
    "static": true,
    "longname": "lib/launcher/chromeFinder.js~ChromeFinder",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/launcher/chromeFinder.js",
    "importStyle": "ChromeFinder",
    "description": "Utility class that provides functionality for finding an suitable chrome executable",
    "lineNumber": 110,
    "interface": false
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "findChrome",
    "memberof": "lib/launcher/chromeFinder.js~ChromeFinder",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/launcher/chromeFinder.js~ChromeFinder.findChrome",
    "access": "public",
    "description": "Finds an acceptable Chrome or Chromium executable.\nIf the env key 'CHROME_PATH' is defined that is returned by default",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "findChromeLinux",
    "memberof": "lib/launcher/chromeFinder.js~ChromeFinder",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/launcher/chromeFinder.js~ChromeFinder.findChromeLinux",
    "access": "public",
    "description": "Finds an acceptable Chrome or Chromium executable on Linux\nIf one is not found throws",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Error - If an acceptable executable was not found"
      }
    ],
    "params": []
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "findChromeDarwin",
    "memberof": "lib/launcher/chromeFinder.js~ChromeFinder",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/launcher/chromeFinder.js~ChromeFinder.findChromeDarwin",
    "access": "public",
    "description": "Finds an acceptable Chrome or Chromium executable on MacOS\nIf one is not found throws",
    "lineNumber": 208,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Error - If an acceptable executable was not found"
      }
    ],
    "params": []
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "findChromeWindows",
    "memberof": "lib/launcher/chromeFinder.js~ChromeFinder",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/launcher/chromeFinder.js~ChromeFinder.findChromeWindows",
    "access": "public",
    "description": "Finds an acceptable Chrome or Chromium executable on Windows\nIf one is not found throws",
    "lineNumber": 288,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Error - If an acceptable executable was not found"
      }
    ],
    "params": []
  },
  {
    "__docId__": 310,
    "kind": "file",
    "name": "lib/launcher/defaultArgs.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\n/**\n * @desc An array of arguments used when launching Chrome.\n * @see {https://peter.sh/experiments/chromium-command-line-switches/}\n * @see {https://cs.chromium.org/chromium/src/chrome/common/chrome_switches.cc}\n * @type {string[]}\n */\nmodule.exports = [\n  '--disable-background-networking',\n  '--disable-background-timer-throttling',\n  '--disable-client-side-phishing-detection',\n  '--disable-default-apps',\n  '--disable-extensions',\n  '--disable-hang-monitor',\n  '--disable-prompt-on-repost',\n  '--disable-breakpad',\n  '--disable-sync',\n  '--disable-translate',\n  '--disable-domain-reliability',\n  '--disable-renderer-backgrounding',\n  '--disable-infobars',\n  '--disable-translate',\n  '--disable-features=site-per-process',\n  '--metrics-recording-only',\n  '--no-first-run',\n  '--safebrowsing-disable-auto-update',\n  '--password-store=basic',\n  '--use-mock-keychain',\n  '--mute-audio',\n  '--autoplay-policy=no-user-gesture-required',\n  '--window-size=1920,1080'\n]\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/launcher/defaultArgs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 311,
    "kind": "file",
    "name": "lib/launcher/index.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nconst ChromeLauncher = require('./chrome')\nconst ChromeFinder = require('./chromeFinder')\nconst defaultArgs = require('./defaultArgs')\nconst puppeteer = require('./puppeteer')\n\n/**\n * @type {{ChromeFinder: ChromeFinder, ChromeLauncher: ChromeLauncher, defaultArgs: string[], puppeteer: launch}}\n */\nmodule.exports = {\n  ChromeFinder,\n  ChromeLauncher,\n  defaultArgs,\n  puppeteer\n}\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/launcher/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 312,
    "kind": "file",
    "name": "lib/launcher/puppeteer.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\nconst os = require('os')\nconst puppeteer = require('puppeteer')\nconst DEFAULT_ARGS = require('./defaultArgs')\nconst CRI = require('chrome-remote-interface')\n\n/**\n * @desc Attempts to find an accible target (page) to connect to in an already launched chrome instance\n * @param {ChromeOptions} options\n * @return {Promise<string>}\n */\nasync function findPageToConnectTo (options) {\n  const targets = await CRI.List(options)\n  let backup\n  let i = 0\n  for (; i < targets.length; i++) {\n    const target = targets[i]\n    if (target.webSocketDebuggerUrl) {\n      if (target.type === 'page') {\n        return target.webSocketDebuggerUrl\n      } else {\n        backup = target\n      }\n    }\n  }\n  if (backup) return backup.webSocketDebuggerUrl\n  throw new Error('Squidwarc could not find a browser page to connect to')\n}\n\n/**\n * @desc Launch and connect or connect to Chrome/Chromium\n * @param {ChromeOptions} options\n * @returns {!Promise<!Puppeteer.Browser>}\n */\nmodule.exports = async function launch (options) {\n  if (options.launch) {\n    const chromeArgs = [...DEFAULT_ARGS]\n    if (options.headless) {\n      chromeArgs.push('--headless', '--hide-scrollbars')\n      if (os.platform() === 'win32') {\n        chromeArgs.push('--disable-gpu')\n      }\n    }\n\n    if (options.userDataDir) {\n      chromeArgs.push(`--user-data-dir=${options.userDataDir}`)\n    }\n\n    if (process.env.INDOCKER) {\n      chromeArgs.push(\n        '--no-sandbox',\n        '--disable-setuid-sandbox',\n        '--disable-dev-shm-usage'\n      )\n    }\n\n    chromeArgs.push('about:blank')\n\n    return puppeteer.launch({\n      executablePath: options.executable,\n      ignoreDefaultArgs: true,\n      defaultViewport: { width: 1920, height: 1080 },\n      args: chromeArgs\n    })\n  }\n  const browserWSEndpoint = await findPageToConnectTo(options)\n  return puppeteer.connect({\n    browserWSEndpoint,\n    defaultViewport: { width: 1920, height: 1080 }\n  })\n}\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/launcher/puppeteer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 313,
    "kind": "function",
    "name": "findPageToConnectTo",
    "memberof": "lib/launcher/puppeteer.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/launcher/puppeteer.js~findPageToConnectTo",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/launcher/puppeteer.js",
    "importStyle": null,
    "description": "Attempts to find an accible target (page) to connect to in an already launched chrome instance",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChromeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 314,
    "kind": "function",
    "name": "launch",
    "memberof": "lib/launcher/puppeteer.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/launcher/puppeteer.js~launch",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/launcher/puppeteer.js",
    "importStyle": "launch",
    "description": "Launch and connect or connect to Chrome/Chromium",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{!Promise<!Puppeteer.Browser>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ChromeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": false,
      "types": [
        "Promise<!Puppeteer.Browser>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 315,
    "kind": "file",
    "name": "lib/runPromise.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017 - present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nconst cp = require('../lib/utils/colorPrinters')\n\n/**\n * @desc just a no op\n */\nfunction thenNoop () {}\n\n/**\n * @desc The default Promise.catch function\n * @param {Error} err\n */\nfunction defaultCatcher (err) {\n  cp.error('A Fatal Error Occurred', err)\n  cp.bred(\n    'Please Inform The Maintainer Of This Project About It. Information In package.json'\n  )\n}\n\n/**\n * @desc Runs a promise using the supplied thener and catcher functions\n * @param {!function(): Promise<any> | Promise<any>} runnable The promise or async / promise returning function to run\n * @param {function(...args: any)} [thener]  The callback function to be supplied to Promise.then\n * @param {function(...args: any)} [catcher] The callback function to be supplied to Promise.catch\n * @return {void}\n */\nfunction runPromise (runnable, thener = thenNoop, catcher = defaultCatcher) {\n  if (typeof runnable.then === 'function') {\n    runnable.then(thener).catch(catcher)\n  } else {\n    runnable()\n      .then(thener)\n      .catch(catcher)\n  }\n}\n\nmodule.exports = runPromise\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/runPromise.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 316,
    "kind": "function",
    "name": "thenNoop",
    "memberof": "lib/runPromise.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/runPromise.js~thenNoop",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/runPromise.js",
    "importStyle": null,
    "description": "just a no op",
    "lineNumber": 23,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 317,
    "kind": "function",
    "name": "defaultCatcher",
    "memberof": "lib/runPromise.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/runPromise.js~defaultCatcher",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/runPromise.js",
    "importStyle": null,
    "description": "The default Promise.catch function",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 318,
    "kind": "function",
    "name": "runPromise",
    "memberof": "lib/runPromise.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/runPromise.js~runPromise",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/runPromise.js",
    "importStyle": "runPromise",
    "description": "Runs a promise using the supplied thener and catcher functions",
    "lineNumber": 43,
    "params": [
      {
        "nullable": false,
        "types": [
          "function(): Promise<any> | Promise<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "runnable",
        "description": "The promise or async / promise returning function to run"
      },
      {
        "nullable": null,
        "types": [
          "function(...args: any)"
        ],
        "spread": false,
        "optional": true,
        "name": "thener",
        "description": "The callback function to be supplied to Promise.then"
      },
      {
        "nullable": null,
        "types": [
          "function(...args: any)"
        ],
        "spread": false,
        "optional": true,
        "name": "catcher",
        "description": "The callback function to be supplied to Promise.catch"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 319,
    "kind": "file",
    "name": "lib/runners/chromeRunner.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017 - present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nconst prettyMs = require('pretty-ms')\nconst cp = require('../utils/colorPrinters')\nconst ChromeCrawler = require('../crawler/chrome')\nconst Frontier = require('../frontier')\nconst WARCNaming = require('../utils/warcNaming')\n\n/**\n * @desc Launches a crawl using the supplied configuration file path\n * @param {CrawlConfig} conf - The crawl config for this crawl\n * @return {Promise<void, Error>}\n */\nasync function chromeRunner (conf) {\n  const frontier = new Frontier()\n  cp.crawlerOpt('Crawler Operating In', conf.mode, 'mode')\n  if (conf.seeds == null) {\n    cp.configError('No Seeds Were Provided Via The Config File', conf)\n    cp.bred('Crawler Shutting Down. GoodBy')\n    process.exit(0)\n  }\n\n  if (Array.isArray(conf.seeds)) {\n    cp.crawlerOpt('Crawler Will Be Preserving', `${conf.seeds.length} Seeds`)\n  } else {\n    cp.crawlerOpt('Crawler Will Be Preserving', conf.seeds)\n  }\n\n  frontier.init(conf.seeds)\n  if (conf.warc.naming.toLowerCase() === 'url') {\n    cp.crawlerOpt('Crawler Will Be Generating WARC Files Using', 'the filenamified url')\n  } else {\n    cp.crawlerOpt('Crawler Will Be Generating WARC Files Named', conf.warc.naming)\n  }\n  cp.crawlerOpt('Crawler Generated WARCs Will Be Placed At', conf.warc.output)\n  cp.crawlerOpt('Crawler Is Connecting To Chrome On Host', conf.chrome.host)\n  cp.crawlerOpt('Crawler Is Connecting To Chrome On Port', conf.chrome.port)\n  cp.crawlerOpt(\n    'Crawler Will Be Waiting At Maximum For Navigation To Happen For',\n    prettyMs(conf.crawlControl.navWait)\n  )\n\n  cp.crawlerOpt(\n    'Crawler Will Be Waiting After For',\n    conf.crawlControl.numInflight,\n    'inflight requests'\n  )\n\n  const crawler = ChromeCrawler.withAutoClose(conf)\n\n  let currentSeed = frontier.next()\n  const warcFilePath = WARCNaming.getWarcNamingFunction(conf)\n\n  crawler.on('error', async err => {\n    cp.error('Crawler Encountered A Random Error', err.err)\n    if (err.type === 'warc-gen') {\n      if (frontier.exhausted()) {\n        cp.cyan('No More Seeds\\nCrawler Shutting Down\\nGoodBy')\n        await crawler.shutdown()\n      } else {\n        cp.cyan(`Crawler Has ${frontier.size()} Seeds Left To Crawl`)\n        currentSeed = frontier.next()\n        crawler.navigate(currentSeed)\n      }\n    }\n  })\n\n  crawler.on('navigation-error', async err => {\n    cp.error('Crawler Encountered A Navigation Error', err.err)\n    if (frontier.exhausted()) {\n      cp.cyan('No More Seeds\\nCrawler Shutting Down\\nGoodBy')\n      await crawler.shutdown()\n    } else {\n      cp.cyan(`Crawler Has ${frontier.size()} Seeds Left To Crawl`)\n      currentSeed = frontier.next()\n      crawler.navigate(currentSeed)\n    }\n  })\n\n  crawler.on('disconnect', () => {\n    cp.bred('Crawlers Connection To The Remote Browser Has Closed')\n  })\n\n  crawler.on('navigation-timedout', async url => {\n    cp.bred(\n      `Crawler Attempted To Navigate To ${url}\\nBut The Navigation Wait Time Of ${prettyMs(\n        conf.crawlControl.navigationTimeout\n      )} Was Exceeded`\n    )\n    if (frontier.exhausted()) {\n      cp.cyan('No More Seeds\\nCrawler Shutting Down\\nGoodBy')\n      await crawler.shutdown()\n    } else {\n      await crawler.stop()\n      cp.cyan(`Crawler Has ${frontier.size()} Seeds Left To Crawl`)\n      currentSeed = frontier.next()\n      crawler.navigate(currentSeed)\n    }\n  })\n\n  crawler.on('navigated', navigatedTo => {\n    cp.cyan(`Crawler Navigated To ${navigatedTo}`)\n  })\n\n  crawler.on('connected', () => {\n    cp.cyan(`Crawler Navigating To ${currentSeed}`)\n    crawler.navigate(currentSeed)\n  })\n\n  crawler.on('warc-gen-finished', async () => {\n    cp.cyan('Crawler Generated WARC')\n    if (frontier.exhausted()) {\n      cp.cyan('No More Seeds\\nCrawler Shutting Down\\nGoodBy')\n      await crawler.shutdown()\n    } else {\n      cp.cyan(`Crawler Has ${frontier.size()} Seeds Left To Crawl`)\n      currentSeed = frontier.next()\n      crawler.navigate(currentSeed)\n    }\n  })\n\n  crawler.on('network-idle', async loadedInfo => {\n    cp.cyan(`${currentSeed} network idle \\nCrawler Generating WARC`)\n    crawler.initWARC(warcFilePath(currentSeed), conf.warc.append)\n    let { outlinks, links } = await crawler.getOutLinks()\n    frontier.process(links)\n    await crawler.genWarc({ outlinks })\n  })\n\n  await crawler.init()\n}\n\nmodule.exports = chromeRunner\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/runners/chromeRunner.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 320,
    "kind": "function",
    "name": "chromeRunner",
    "memberof": "lib/runners/chromeRunner.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/runners/chromeRunner.js~chromeRunner",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/runners/chromeRunner.js",
    "importStyle": "chromeRunner",
    "description": "Launches a crawl using the supplied configuration file path",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "CrawlConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The crawl config for this crawl"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void, Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 321,
    "kind": "file",
    "name": "lib/runners/index.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nconst Config = require('../config')\nconst { makeRunnable } = require('../utils/promises')\nconst chromeRunner = require('./chromeRunner')\nconst puppeteerRunner = require('./puppeteerRunner')\n\n/**\n * @desc Launch a configured crawl\n * @param {string} configPath - Path to the crawls config file\n * @return {Promise<void>}\n */\nasync function runner (configPath) {\n  const config = await Config.loadConfig(configPath)\n  if (config.chrome.use === 'chrome') {\n    await chromeRunner(config)\n  } else {\n    await puppeteerRunner(config)\n  }\n}\n\n/**\n * @type {function(string): void}\n */\nmodule.exports = makeRunnable(runner)\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/runners/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 322,
    "kind": "function",
    "name": "runner",
    "memberof": "lib/runners/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/runners/index.js~runner",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/runners/index.js",
    "importStyle": null,
    "description": "Launch a configured crawl",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "configPath",
        "description": "Path to the crawls config file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 323,
    "kind": "file",
    "name": "lib/runners/puppeteerRunner.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nconst cp = require('../utils/colorPrinters')\nconst PuppeteerCrawler = require('../crawler/puppeteer')\nconst Frontier = require('../frontier')\nconst WARCNaming = require('../utils/warcNaming')\n\n/**\n * @desc Launches a crawl using the supplied configuration file path\n * @param {CrawlConfig} conf - The crawl config for this crawl\n * @return {Promise<void, Error>}\n */\nasync function puppeteerRunner (conf) {\n  const frontier = new Frontier()\n  cp.crawlerOpt('Crawler Operating In', conf.mode, 'mode')\n  if (conf.seeds == null) {\n    cp.configError('No Seeds Were Provided Via The Config File', conf)\n    cp.bred('Crawler Shutting Down. GoodBy')\n    process.exit(0)\n  }\n\n  if (Array.isArray(conf.seeds)) {\n    cp.crawlerOpt('Crawler Will Be Preserving', `${conf.seeds.length} Seeds`)\n  } else {\n    cp.crawlerOpt('Crawler Will Be Preserving', conf.seeds)\n  }\n\n  frontier.init(conf.seeds)\n  const warcFilePath = WARCNaming.getWarcNamingFunction(conf)\n\n  cp.crawlerOpt('Crawler Generated WARCs Will Be Placed At', conf.warc.output)\n\n  const crawler = new PuppeteerCrawler(conf)\n  let currentSeed\n\n  crawler.on('error', async err => {\n    cp.error('Crawler Encountered A Random Error', err.err)\n  })\n\n  crawler.on('disconnect', async () => {\n    cp.bred('Crawlers Connection To The Remote Browser Has Closed')\n    await crawler.shutdown()\n  })\n\n  await crawler.init()\n  while (!frontier.exhausted()) {\n    currentSeed = frontier.next()\n    cp.cyan(`Crawler Navigating To ${currentSeed}`)\n    const good = await crawler.navigate(currentSeed)\n    if (good) {\n      cp.cyan(`Crawler Navigated To ${currentSeed}`)\n      await crawler.runUserScript()\n      cp.cyan(`Crawler Generating WARC`)\n      const donePromise = crawler.initWARC(warcFilePath(currentSeed), conf.warc.append)\n      let { outlinks, links } = await crawler.getOutLinks()\n      frontier.process(links)\n      await crawler.genWarc({ outlinks })\n      await donePromise\n    }\n    await crawler.stopPageLoading()\n    cp.cyan(`Crawler Has ${frontier.size()} Seeds Left To Crawl`)\n  }\n  cp.cyan(`Crawler shutting down. Have nice day :)`)\n  await crawler.shutdown()\n}\n\nmodule.exports = puppeteerRunner\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/runners/puppeteerRunner.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 324,
    "kind": "function",
    "name": "puppeteerRunner",
    "memberof": "lib/runners/puppeteerRunner.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/runners/puppeteerRunner.js~puppeteerRunner",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/runners/puppeteerRunner.js",
    "importStyle": "puppeteerRunner",
    "description": "Launches a crawl using the supplied configuration file path",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "CrawlConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The crawl config for this crawl"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void, Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 325,
    "kind": "file",
    "name": "lib/utils/bigExtLookup.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017-present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\n/**\n * @type {{'.ez': boolean, '.aw': boolean, '.atom': boolean, '.atomcat': boolean, '.atomsvc': boolean, '.bdoc': boolean, '.ccxml': boolean, '.cdmia': boolean, '.cdmic': boolean, '.cdmid': boolean, '.cdmio': boolean, '.cdmiq': boolean, '.cu': boolean, '.mpd': boolean, '.davmount': boolean, '.dbk': boolean, '.dssc': boolean, '.xdssc': boolean, '.ecma': boolean, '.emma': boolean, '.epub': boolean, '.exi': boolean, '.pfr': boolean, '.woff': boolean, '.woff2': boolean, '.geojson': boolean, '.gml': boolean, '.gpx': boolean, '.gxf': boolean, '.stk': boolean, '.ink': boolean, '.inkml': boolean, '.ipfix': boolean, '.jar': boolean, '.war': boolean, '.ear': boolean, '.ser': boolean, '.class': boolean, '.js': boolean, '.json': boolean, '.map': boolean, '.json5': boolean, '.jsonml': boolean, '.jsonld': boolean, '.lostxml': boolean, '.hqx': boolean, '.cpt': boolean, '.mads': boolean, '.webmanifest': boolean, '.mrc': boolean, '.mrcx': boolean, '.ma': boolean, '.nb': boolean, '.mb': boolean, '.mathml': boolean, '.mbox': boolean, '.mscml': boolean, '.metalink': boolean, '.meta4': boolean, '.mets': boolean, '.mods': boolean, '.m21': boolean, '.mp21': boolean, '.mp4s': boolean, '.m4p': boolean, '.doc': boolean, '.dot': boolean, '.mxf': boolean, '.bin': boolean, '.dms': boolean, '.lrf': boolean, '.mar': boolean, '.so': boolean, '.dist': boolean, '.distz': boolean, '.pkg': boolean, '.bpk': boolean, '.dump': boolean, '.elc': boolean, '.deploy': boolean, '.exe': boolean, '.dll': boolean, '.deb': boolean, '.dmg': boolean, '.iso': boolean, '.img': boolean, '.msi': boolean, '.msp': boolean, '.msm': boolean, '.buffer': boolean, '.oda': boolean, '.opf': boolean, '.ogx': boolean, '.omdoc': boolean, '.onetoc': boolean, '.onetoc2': boolean, '.onetmp': boolean, '.onepkg': boolean, '.oxps': boolean, '.xer': boolean, '.pdf': boolean, '.asc': boolean, '.sig': boolean, '.prf': boolean, '.p10': boolean, '.p7m': boolean, '.p7c': boolean, '.p7s': boolean, '.p8': boolean, '.ac': boolean, '.cer': boolean, '.crl': boolean, '.pkipath': boolean, '.pki': boolean, '.ai': boolean, '.eps': boolean, '.ps': boolean, '.cww': boolean, '.pskcxml': boolean, '.rdf': boolean, '.rif': boolean, '.rnc': boolean, '.rl': boolean, '.rld': boolean, '.rs': boolean, '.gbr': boolean, '.mft': boolean, '.roa': boolean, '.rsd': boolean, '.rss': boolean, '.rtf': boolean, '.sbml': boolean, '.scq': boolean, '.scs': boolean, '.spq': boolean, '.spp': boolean, '.sdp': boolean, '.setpay': boolean, '.setreg': boolean, '.shf': boolean, '.smi': boolean, '.smil': boolean, '.rq': boolean, '.srx': boolean, '.gram': boolean, '.grxml': boolean, '.sru': boolean, '.ssdl': boolean, '.ssml': boolean, '.tei': boolean, '.teicorpus': boolean, '.tfi': boolean, '.tsd': boolean, '.plb': boolean, '.psb': boolean, '.pvb': boolean, '.tcap': boolean, '.pwn': boolean, '.aso': boolean, '.imp': boolean, '.acu': boolean, '.atc': boolean, '.acutc': boolean, '.air': boolean, '.fcdt': boolean, '.fxp': boolean, '.fxpl': boolean, '.xdp': boolean, '.xfdf': boolean, '.ahead': boolean, '.azf': boolean, '.azs': boolean, '.azw': boolean, '.acc': boolean, '.ami': boolean, '.apk': boolean, '.cii': boolean, '.fti': boolean, '.atx': boolean, '.mpkg': boolean, '.m3u8': boolean, '.pkpass': boolean, '.swi': boolean, '.iota': boolean, '.aep': boolean, '.mpm': boolean, '.bmi': boolean, '.rep': boolean, '.cdxml': boolean, '.mmd': boolean, '.cdy': boolean, '.cla': boolean, '.rp9': boolean, '.c4g': boolean, '.c4d': boolean, '.c4f': boolean, '.c4p': boolean, '.c4u': boolean, '.c11amc': boolean, '.c11amz': boolean, '.csp': boolean, '.cdbcmsg': boolean, '.cmc': boolean, '.clkx': boolean, '.clkk': boolean, '.clkp': boolean, '.clkt': boolean, '.clkw': boolean, '.wbs': boolean, '.pml': boolean, '.ppd': boolean, '.car': boolean, '.pcurl': boolean, '.dart': boolean, '.rdz': boolean, '.uvf': boolean, '.uvvf': boolean, '.uvd': boolean, '.uvvd': boolean, '.uvt': boolean, '.uvvt': boolean, '.uvx': boolean, '.uvvx': boolean, '.uvz': boolean, '.uvvz': boolean, '.fe_launch': boolean, '.dna': boolean, '.mlp': boolean, '.dpg': boolean, '.dfac': boolean, '.kpxx': boolean, '.ait': boolean, '.svc': boolean, '.geo': boolean, '.mag': boolean, '.nml': boolean, '.esf': boolean, '.msf': boolean, '.qam': boolean, '.slt': boolean, '.ssf': boolean, '.es3': boolean, '.et3': boolean, '.ez2': boolean, '.ez3': boolean, '.fdf': boolean, '.mseed': boolean, '.seed': boolean, '.dataless': boolean, '.gph': boolean, '.ftc': boolean, '.frame': boolean, '.maker': boolean, '.book': boolean, '.fnc': boolean, '.ltf': boolean, '.fsc': boolean, '.oas': boolean, '.oa2': boolean, '.oa3': boolean, '.fg5': boolean, '.bh2': boolean, '.ddd': boolean, '.xdw': boolean, '.xbd': boolean, '.fzs': boolean, '.txd': boolean, '.ggb': boolean, '.ggt': boolean, '.gex': boolean, '.gre': boolean, '.gxt': boolean, '.g2w': boolean, '.g3w': boolean, '.gmx': boolean, '.gdoc': boolean, '.gslides': boolean, '.gsheet': boolean, '.kml': boolean, '.kmz': boolean, '.gqf': boolean, '.gqs': boolean, '.gac': boolean, '.ghf': boolean, '.gim': boolean, '.grv': boolean, '.gtm': boolean, '.tpl': boolean, '.vcg': boolean, '.hal': boolean, '.zmm': boolean, '.hbci': boolean, '.les': boolean, '.hpgl': boolean, '.hpid': boolean, '.hps': boolean, '.jlt': boolean, '.pcl': boolean, '.pclxl': boolean, '.sfd-hdstx': boolean, '.mpy': boolean, '.afp': boolean, '.listafp': boolean, '.list3820': boolean, '.irm': boolean, '.sc': boolean, '.icc': boolean, '.icm': boolean, '.igl': boolean, '.ivp': boolean, '.ivu': boolean, '.igm': boolean, '.xpw': boolean, '.xpx': boolean, '.i2g': boolean, '.qbo': boolean, '.qfx': boolean, '.rcprofile': boolean, '.irp': boolean, '.xpr': boolean, '.fcs': boolean, '.jam': boolean, '.rms': boolean, '.jisp': boolean, '.joda': boolean, '.ktz': boolean, '.ktr': boolean, '.karbon': boolean, '.chrt': boolean, '.kfo': boolean, '.flw': boolean, '.kon': boolean, '.kpr': boolean, '.kpt': boolean, '.kwd': boolean, '.kwt': boolean, '.htke': boolean, '.kia': boolean, '.kne': boolean, '.knp': boolean, '.skp': boolean, '.skd': boolean, '.skt': boolean, '.skm': boolean, '.sse': boolean, '.lasxml': boolean, '.lbd': boolean, '.lbe': boolean, '.apr': boolean, '.pre': boolean, '.nsf': boolean, '.scm': boolean, '.lwp': boolean, '.portpkg': boolean, '.mcd': boolean, '.mc1': boolean, '.cdkey': boolean, '.mwf': boolean, '.mfm': boolean, '.flo': boolean, '.igx': boolean, '.mif': boolean, '.daf': boolean, '.dis': boolean, '.mbk': boolean, '.mqy': boolean, '.msl': boolean, '.plc': boolean, '.txf': boolean, '.mpn': boolean, '.mpc': boolean, '.xul': boolean, '.cil': boolean, '.cab': boolean, '.xls': boolean, '.xlm': boolean, '.xla': boolean, '.xlc': boolean, '.xlt': boolean, '.xlw': boolean, '.xlam': boolean, '.xlsb': boolean, '.xlsm': boolean, '.xltm': boolean, '.eot': boolean, '.chm': boolean, '.ims': boolean, '.lrm': boolean, '.thmx': boolean, '.cat': boolean, '.stl': boolean, '.ppt': boolean, '.pps': boolean, '.pot': boolean, '.ppam': boolean, '.pptm': boolean, '.sldm': boolean, '.ppsm': boolean, '.potm': boolean, '.mpp': boolean, '.mpt': boolean, '.docm': boolean, '.dotm': boolean, '.wps': boolean, '.wks': boolean, '.wcm': boolean, '.wdb': boolean, '.wpl': boolean, '.xps': boolean, '.mseq': boolean, '.mus': boolean, '.msty': boolean, '.taglet': boolean, '.nlu': boolean, '.ntf': boolean, '.nitf': boolean, '.nnd': boolean, '.nns': boolean, '.nnw': boolean, '.ngdat': boolean, '.n-gage': boolean, '.rpst': boolean, '.rpss': boolean, '.edm': boolean, '.edx': boolean, '.ext': boolean, '.odc': boolean, '.otc': boolean, '.odb': boolean, '.odf': boolean, '.odft': boolean, '.odg': boolean, '.otg': boolean, '.odi': boolean, '.oti': boolean, '.odp': boolean, '.otp': boolean, '.ods': boolean, '.ots': boolean, '.odt': boolean, '.odm': boolean, '.ott': boolean, '.oth': boolean, '.xo': boolean, '.dd2': boolean, '.oxt': boolean, '.pptx': boolean, '.sldx': boolean, '.ppsx': boolean, '.potx': boolean, '.xlsx': boolean, '.xltx': boolean, '.docx': boolean, '.dotx': boolean, '.mgp': boolean, '.dp': boolean, '.esa': boolean, '.pdb': boolean, '.pqa': boolean, '.oprc': boolean, '.paw': boolean, '.str': boolean, '.ei6': boolean, '.efif': boolean, '.wg': boolean, '.plf': boolean, '.pbd': boolean, '.box': boolean, '.mgz': boolean, '.qps': boolean, '.ptid': boolean, '.qxd': boolean, '.qxt': boolean, '.qwd': boolean, '.qwt': boolean, '.qxl': boolean, '.qxb': boolean, '.bed': boolean, '.mxl': boolean, '.musicxml': boolean, '.cryptonote': boolean, '.cod': boolean, '.rm': boolean, '.rmvb': boolean, '.link66': boolean, '.see': boolean, '.sema': boolean, '.semd': boolean, '.semf': boolean, '.ifm': boolean, '.itp': boolean, '.iif': boolean, '.ipk': boolean, '.twd': boolean, '.twds': boolean, '.mmf': boolean, '.teacher': boolean, '.sdkm': boolean, '.sdkd': boolean, '.dxp': boolean, '.sfs': boolean, '.sdc': boolean, '.sda': boolean, '.sdd': boolean, '.smf': boolean, '.sdw': boolean, '.vor': boolean, '.sgl': boolean, '.smzip': boolean, '.sm': boolean, '.sxc': boolean, '.stc': boolean, '.sxd': boolean, '.std': boolean, '.sxi': boolean, '.sti': boolean, '.sxm': boolean, '.sxw': boolean, '.sxg': boolean, '.stw': boolean, '.sus': boolean, '.susp': boolean, '.svd': boolean, '.sis': boolean, '.sisx': boolean, '.xsm': boolean, '.bdm': boolean, '.xdm': boolean, '.tao': boolean, '.pcap': boolean, '.cap': boolean, '.dmp': boolean, '.tmo': boolean, '.tpt': boolean, '.mxs': boolean, '.tra': boolean, '.ufd': boolean, '.ufdl': boolean, '.umj': boolean, '.unityweb': boolean, '.uoml': boolean, '.vcx': boolean, '.vsd': boolean, '.vst': boolean, '.vss': boolean, '.vsw': boolean, '.vis': boolean, '.vsf': boolean, '.wbxml': boolean, '.wmlc': boolean, '.wmlsc': boolean, '.wtb': boolean, '.nbp': boolean, '.wpd': boolean, '.wqd': boolean, '.stf': boolean, '.xar': boolean, '.xfdl': boolean, '.hvd': boolean, '.hvs': boolean, '.hvp': boolean, '.osf': boolean, '.osfpvg': boolean, '.saf': boolean, '.spf': boolean, '.cmp': boolean, '.zir': boolean, '.zirz': boolean, '.zaz': boolean, '.vxml': boolean, '.wgt': boolean, '.hlp': boolean, '.wsdl': boolean, '.wspolicy': boolean, '.7z': boolean, '.abw': boolean, '.ace': boolean, '.aab': boolean, '.x32': boolean, '.u32': boolean, '.vox': boolean, '.aam': boolean, '.aas': boolean, '.bcpio': boolean, '.torrent': boolean, '.blb': boolean, '.blorb': boolean, '.bz': boolean, '.bz2': boolean, '.boz': boolean, '.cbr': boolean, '.cba': boolean, '.cbt': boolean, '.cbz': boolean, '.cb7': boolean, '.vcd': boolean, '.cfs': boolean, '.chat': boolean, '.pgn': boolean, '.crx': boolean, '.cco': boolean, '.nsc': boolean, '.cpio': boolean, '.csh': boolean, '.udeb': boolean, '.dgc': boolean, '.dir': boolean, '.dcr': boolean, '.dxr': boolean, '.cst': boolean, '.cct': boolean, '.cxt': boolean, '.w3d': boolean, '.fgd': boolean, '.swa': boolean, '.wad': boolean, '.ncx': boolean, '.dtb': boolean, '.res': boolean, '.dvi': boolean, '.evy': boolean, '.eva': boolean, '.bdf': boolean, '.gsf': boolean, '.psf': boolean, '.otf': boolean, '.pcf': boolean, '.snf': boolean, '.ttf': boolean, '.ttc': boolean, '.pfa': boolean, '.pfb': boolean, '.pfm': boolean, '.afm': boolean, '.arc': boolean, '.spl': boolean, '.gca': boolean, '.ulx': boolean, '.gnumeric': boolean, '.gramps': boolean, '.gtar': boolean, '.hdf': boolean, '.install': boolean, '.jardiff': boolean, '.jnlp': boolean, '.latex': boolean, '.luac': boolean, '.lzh': boolean, '.lha': boolean, '.run': boolean, '.mie': boolean, '.prc': boolean, '.mobi': boolean, '.application': boolean, '.lnk': boolean, '.wmd': boolean, '.wmz': boolean, '.xbap': boolean, '.mdb': boolean, '.obd': boolean, '.crd': boolean, '.clp': boolean, '.bat': boolean, '.mvb': boolean, '.m13': boolean, '.m14': boolean, '.wmf': boolean, '.emf': boolean, '.emz': boolean, '.mny': boolean, '.pub': boolean, '.scd': boolean, '.trm': boolean, '.wri': boolean, '.cdf': boolean, '.pac': boolean, '.nzb': boolean, '.pm': boolean, '.p12': boolean, '.pfx': boolean, '.p7b': boolean, '.spc': boolean, '.p7r': boolean, '.rar': boolean, '.rpm': boolean, '.ris': boolean, '.sea': boolean, '.sh': boolean, '.shar': boolean, '.swf': boolean, '.xap': boolean, '.sql': boolean, '.sit': boolean, '.sitx': boolean, '.srt': boolean, '.sv4cpio': boolean, '.sv4crc': boolean, '.t3': boolean, '.gam': boolean, '.tar': boolean, '.tcl': boolean, '.tk': boolean, '.tex': boolean, '.tfm': boolean, '.texinfo': boolean, '.texi': boolean, '.obj': boolean, '.ustar': boolean, '.src': boolean, '.webapp': boolean, '.der': boolean, '.crt': boolean, '.pem': boolean, '.fig': boolean, '.xlf': boolean, '.xpi': boolean, '.xz': boolean, '.z1': boolean, '.z2': boolean, '.z3': boolean, '.z4': boolean, '.z5': boolean, '.z6': boolean, '.z7': boolean, '.z8': boolean, '.xaml': boolean, '.xdf': boolean, '.xenc': boolean, '.xht': boolean, '.xml': boolean, '.xsl': boolean, '.xsd': boolean, '.rng': boolean, '.dtd': boolean, '.xop': boolean, '.xpl': boolean, '.xslt': boolean, '.xspf': boolean, '.mxml': boolean, '.xhvml': boolean, '.xvml': boolean, '.xvm': boolean, '.yang': boolean, '.yin': boolean, '.zip': boolean, '.3gpp': boolean, '.adp': boolean, '.snd': boolean, '.mid': boolean, '.midi': boolean, '.kar': boolean, '.rmi': boolean, '.mp3': boolean, '.m4a': boolean, '.mp4a': boolean, '.mpga': boolean, '.mp2': boolean, '.mp2a': boolean, '.m2a': boolean, '.m3a': boolean, '.oga': boolean, '.ogg': boolean, '.spx': boolean, '.s3m': boolean, '.sil': boolean, '.uva': boolean, '.uvva': boolean, '.eol': boolean, '.dra': boolean, '.dts': boolean, '.dtshd': boolean, '.lvp': boolean, '.pya': boolean, '.ecelp4800': boolean, '.ecelp7470': boolean, '.ecelp9600': boolean, '.rip': boolean, '.wav': boolean, '.weba': boolean, '.aac': boolean, '.aif': boolean, '.aiff': boolean, '.aifc': boolean, '.caf': boolean, '.flac': boolean, '.mka': boolean, '.m3u': boolean, '.wax': boolean, '.wma': boolean, '.ram': boolean, '.ra': boolean, '.rmp': boolean, '.xm': boolean, '.cdx': boolean, '.cif': boolean, '.cmdf': boolean, '.cml': boolean, '.csml': boolean, '.xyz': boolean, '.apng': boolean, '.bmp': boolean, '.cgm': boolean, '.g3': boolean, '.gif': boolean, '.ief': boolean, '.jpeg': boolean, '.jpg': boolean, '.jpe': boolean, '.ktx': boolean, '.png': boolean, '.btif': boolean, '.sgi': boolean, '.svg': boolean, '.svgz': boolean, '.tiff': boolean, '.tif': boolean, '.psd': boolean, '.uvi': boolean, '.uvvi': boolean, '.uvg': boolean, '.uvvg': boolean, '.djvu': boolean, '.djv': boolean, '.sub': boolean, '.dwg': boolean, '.dxf': boolean, '.fbs': boolean, '.fpx': boolean, '.fst': boolean, '.mmr': boolean, '.rlc': boolean, '.mdi': boolean, '.wdp': boolean, '.npx': boolean, '.wbmp': boolean, '.xif': boolean, '.webp': boolean, '.3ds': boolean, '.ras': boolean, '.cmx': boolean, '.fh': boolean, '.fhc': boolean, '.fh4': boolean, '.fh5': boolean, '.fh7': boolean, '.ico': boolean, '.jng': boolean, '.sid': boolean, '.pcx': boolean, '.pic': boolean, '.pct': boolean, '.pnm': boolean, '.pbm': boolean, '.pgm': boolean, '.ppm': boolean, '.rgb': boolean, '.tga': boolean, '.xbm': boolean, '.xpm': boolean, '.xwd': boolean, '.eml': boolean, '.mime': boolean, '.igs': boolean, '.iges': boolean, '.msh': boolean, '.mesh': boolean, '.silo': boolean, '.dae': boolean, '.dwf': boolean, '.gdl': boolean, '.gtw': boolean, '.mts': boolean, '.vtu': boolean, '.wrl': boolean, '.vrml': boolean, '.x3db': boolean, '.x3dbz': boolean, '.x3dv': boolean, '.x3dvz': boolean, '.x3d': boolean, '.x3dz': boolean, '.appcache': boolean, '.manifest': boolean, '.ics': boolean, '.ifb': boolean, '.coffee': boolean, '.litcoffee': boolean, '.css': boolean, '.csv': boolean, '.hjson': boolean, '.jade': boolean, '.jsx': boolean, '.less': boolean, '.mml': boolean, '.n3': boolean, '.txt': boolean, '.text': boolean, '.conf': boolean, '.def': boolean, '.log': boolean, '.ini': boolean, '.dsc': boolean, '.rtx': boolean, '.sgml': boolean, '.sgm': boolean, '.slim': boolean, '.slm': boolean, '.stylus': boolean, '.styl': boolean, '.tsv': boolean, '.t': boolean, '.roff': boolean, '.man': boolean, '.ms': boolean, '.ttl': boolean, '.uri': boolean, '.uris': boolean, '.urls': boolean, '.vcard': boolean, '.curl': boolean, '.dcurl': boolean, '.mcurl': boolean, '.scurl': boolean, '.fly': boolean, '.flx': boolean, '.gv': boolean, '.3dml': boolean, '.spot': boolean, '.jad': boolean, '.wml': boolean, '.wmls': boolean, '.vtt': boolean, '.s': boolean, '.asm': boolean, '.c': boolean, '.cxx': boolean, '.cpp': boolean, '.h': boolean, '.hh': boolean, '.dic': boolean, '.htc': boolean, '.f': boolean, '.for': boolean, '.f77': boolean, '.f90': boolean, '.hbs': boolean, '.java': boolean, '.lua': boolean, '.markdown': boolean, '.md': boolean, '.mkd': boolean, '.nfo': boolean, '.opml': boolean, '.p': boolean, '.pas': boolean, '.pde': boolean, '.sass': boolean, '.scss': boolean, '.etx': boolean, '.sfv': boolean, '.ymp': boolean, '.uu': boolean, '.vcs': boolean, '.vcf': boolean, '.yaml': boolean, '.yml': boolean, '.3gp': boolean, '.3g2': boolean, '.h261': boolean, '.h263': boolean, '.h264': boolean, '.jpgv': boolean, '.jpm': boolean, '.jpgm': boolean, '.mj2': boolean, '.mjp2': boolean, '.ts': boolean, '.mp4': boolean, '.mp4v': boolean, '.mpg4': boolean, '.mpeg': boolean, '.mpg': boolean, '.mpe': boolean, '.m1v': boolean, '.m2v': boolean, '.ogv': boolean, '.qt': boolean, '.mov': boolean, '.uvh': boolean, '.uvvh': boolean, '.uvm': boolean, '.uvvm': boolean, '.uvp': boolean, '.uvvp': boolean, '.uvs': boolean, '.uvvs': boolean, '.uvv': boolean, '.uvvv': boolean, '.dvb': boolean, '.fvt': boolean, '.mxu': boolean, '.m4u': boolean, '.pyv': boolean, '.uvu': boolean, '.uvvu': boolean, '.viv': boolean, '.webm': boolean, '.f4v': boolean, '.fli': boolean, '.flv': boolean, '.m4v': boolean, '.mkv': boolean, '.mk3d': boolean, '.mks': boolean, '.mng': boolean, '.asf': boolean, '.vob': boolean, '.wm': boolean, '.wmv': boolean, '.wmx': boolean, '.wvx': boolean, '.avi': boolean, '.movie': boolean, '.smv': boolean, '.ice': boolean}}\n */\nmodule.exports = {\n  '.ez': true,\n  '.aw': true,\n  '.atom': true,\n  '.atomcat': true,\n  '.atomsvc': true,\n  '.bdoc': true,\n  '.ccxml': true,\n  '.cdmia': true,\n  '.cdmic': true,\n  '.cdmid': true,\n  '.cdmio': true,\n  '.cdmiq': true,\n  '.cu': true,\n  '.mpd': true,\n  '.davmount': true,\n  '.dbk': true,\n  '.dssc': true,\n  '.xdssc': true,\n  '.ecma': true,\n  '.emma': true,\n  '.epub': true,\n  '.exi': true,\n  '.pfr': true,\n  '.woff': true,\n  '.woff2': true,\n  '.geojson': true,\n  '.gml': true,\n  '.gpx': true,\n  '.gxf': true,\n  '.stk': true,\n  '.ink': true,\n  '.inkml': true,\n  '.ipfix': true,\n  '.jar': true,\n  '.war': true,\n  '.ear': true,\n  '.ser': true,\n  '.class': true,\n  '.js': true,\n  '.json': true,\n  '.map': true,\n  '.json5': true,\n  '.jsonml': true,\n  '.jsonld': true,\n  '.lostxml': true,\n  '.hqx': true,\n  '.cpt': true,\n  '.mads': true,\n  '.webmanifest': true,\n  '.mrc': true,\n  '.mrcx': true,\n  '.ma': true,\n  '.nb': true,\n  '.mb': true,\n  '.mathml': true,\n  '.mbox': true,\n  '.mscml': true,\n  '.metalink': true,\n  '.meta4': true,\n  '.mets': true,\n  '.mods': true,\n  '.m21': true,\n  '.mp21': true,\n  '.mp4s': true,\n  '.m4p': true,\n  '.doc': true,\n  '.dot': true,\n  '.mxf': true,\n  '.bin': true,\n  '.dms': true,\n  '.lrf': true,\n  '.mar': true,\n  '.so': true,\n  '.dist': true,\n  '.distz': true,\n  '.pkg': true,\n  '.bpk': true,\n  '.dump': true,\n  '.elc': true,\n  '.deploy': true,\n  '.exe': true,\n  '.dll': true,\n  '.deb': true,\n  '.dmg': true,\n  '.iso': true,\n  '.img': true,\n  '.msi': true,\n  '.msp': true,\n  '.msm': true,\n  '.buffer': true,\n  '.oda': true,\n  '.opf': true,\n  '.ogx': true,\n  '.omdoc': true,\n  '.onetoc': true,\n  '.onetoc2': true,\n  '.onetmp': true,\n  '.onepkg': true,\n  '.oxps': true,\n  '.xer': true,\n  '.pdf': true,\n  '.asc': true,\n  '.sig': true,\n  '.prf': true,\n  '.p10': true,\n  '.p7m': true,\n  '.p7c': true,\n  '.p7s': true,\n  '.p8': true,\n  '.ac': true,\n  '.cer': true,\n  '.crl': true,\n  '.pkipath': true,\n  '.pki': true,\n  '.ai': true,\n  '.eps': true,\n  '.ps': true,\n  '.cww': true,\n  '.pskcxml': true,\n  '.rdf': true,\n  '.rif': true,\n  '.rnc': true,\n  '.rl': true,\n  '.rld': true,\n  '.rs': true,\n  '.gbr': true,\n  '.mft': true,\n  '.roa': true,\n  '.rsd': true,\n  '.rss': true,\n  '.rtf': true,\n  '.sbml': true,\n  '.scq': true,\n  '.scs': true,\n  '.spq': true,\n  '.spp': true,\n  '.sdp': true,\n  '.setpay': true,\n  '.setreg': true,\n  '.shf': true,\n  '.smi': true,\n  '.smil': true,\n  '.rq': true,\n  '.srx': true,\n  '.gram': true,\n  '.grxml': true,\n  '.sru': true,\n  '.ssdl': true,\n  '.ssml': true,\n  '.tei': true,\n  '.teicorpus': true,\n  '.tfi': true,\n  '.tsd': true,\n  '.plb': true,\n  '.psb': true,\n  '.pvb': true,\n  '.tcap': true,\n  '.pwn': true,\n  '.aso': true,\n  '.imp': true,\n  '.acu': true,\n  '.atc': true,\n  '.acutc': true,\n  '.air': true,\n  '.fcdt': true,\n  '.fxp': true,\n  '.fxpl': true,\n  '.xdp': true,\n  '.xfdf': true,\n  '.ahead': true,\n  '.azf': true,\n  '.azs': true,\n  '.azw': true,\n  '.acc': true,\n  '.ami': true,\n  '.apk': true,\n  '.cii': true,\n  '.fti': true,\n  '.atx': true,\n  '.mpkg': true,\n  '.m3u8': true,\n  '.pkpass': true,\n  '.swi': true,\n  '.iota': true,\n  '.aep': true,\n  '.mpm': true,\n  '.bmi': true,\n  '.rep': true,\n  '.cdxml': true,\n  '.mmd': true,\n  '.cdy': true,\n  '.cla': true,\n  '.rp9': true,\n  '.c4g': true,\n  '.c4d': true,\n  '.c4f': true,\n  '.c4p': true,\n  '.c4u': true,\n  '.c11amc': true,\n  '.c11amz': true,\n  '.csp': true,\n  '.cdbcmsg': true,\n  '.cmc': true,\n  '.clkx': true,\n  '.clkk': true,\n  '.clkp': true,\n  '.clkt': true,\n  '.clkw': true,\n  '.wbs': true,\n  '.pml': true,\n  '.ppd': true,\n  '.car': true,\n  '.pcurl': true,\n  '.dart': true,\n  '.rdz': true,\n  '.uvf': true,\n  '.uvvf': true,\n  '.uvd': true,\n  '.uvvd': true,\n  '.uvt': true,\n  '.uvvt': true,\n  '.uvx': true,\n  '.uvvx': true,\n  '.uvz': true,\n  '.uvvz': true,\n  '.fe_launch': true,\n  '.dna': true,\n  '.mlp': true,\n  '.dpg': true,\n  '.dfac': true,\n  '.kpxx': true,\n  '.ait': true,\n  '.svc': true,\n  '.geo': true,\n  '.mag': true,\n  '.nml': true,\n  '.esf': true,\n  '.msf': true,\n  '.qam': true,\n  '.slt': true,\n  '.ssf': true,\n  '.es3': true,\n  '.et3': true,\n  '.ez2': true,\n  '.ez3': true,\n  '.fdf': true,\n  '.mseed': true,\n  '.seed': true,\n  '.dataless': true,\n  '.gph': true,\n  '.ftc': true,\n  '.frame': true,\n  '.maker': true,\n  '.book': true,\n  '.fnc': true,\n  '.ltf': true,\n  '.fsc': true,\n  '.oas': true,\n  '.oa2': true,\n  '.oa3': true,\n  '.fg5': true,\n  '.bh2': true,\n  '.ddd': true,\n  '.xdw': true,\n  '.xbd': true,\n  '.fzs': true,\n  '.txd': true,\n  '.ggb': true,\n  '.ggt': true,\n  '.gex': true,\n  '.gre': true,\n  '.gxt': true,\n  '.g2w': true,\n  '.g3w': true,\n  '.gmx': true,\n  '.gdoc': true,\n  '.gslides': true,\n  '.gsheet': true,\n  '.kml': true,\n  '.kmz': true,\n  '.gqf': true,\n  '.gqs': true,\n  '.gac': true,\n  '.ghf': true,\n  '.gim': true,\n  '.grv': true,\n  '.gtm': true,\n  '.tpl': true,\n  '.vcg': true,\n  '.hal': true,\n  '.zmm': true,\n  '.hbci': true,\n  '.les': true,\n  '.hpgl': true,\n  '.hpid': true,\n  '.hps': true,\n  '.jlt': true,\n  '.pcl': true,\n  '.pclxl': true,\n  '.sfd-hdstx': true,\n  '.mpy': true,\n  '.afp': true,\n  '.listafp': true,\n  '.list3820': true,\n  '.irm': true,\n  '.sc': true,\n  '.icc': true,\n  '.icm': true,\n  '.igl': true,\n  '.ivp': true,\n  '.ivu': true,\n  '.igm': true,\n  '.xpw': true,\n  '.xpx': true,\n  '.i2g': true,\n  '.qbo': true,\n  '.qfx': true,\n  '.rcprofile': true,\n  '.irp': true,\n  '.xpr': true,\n  '.fcs': true,\n  '.jam': true,\n  '.rms': true,\n  '.jisp': true,\n  '.joda': true,\n  '.ktz': true,\n  '.ktr': true,\n  '.karbon': true,\n  '.chrt': true,\n  '.kfo': true,\n  '.flw': true,\n  '.kon': true,\n  '.kpr': true,\n  '.kpt': true,\n  '.kwd': true,\n  '.kwt': true,\n  '.htke': true,\n  '.kia': true,\n  '.kne': true,\n  '.knp': true,\n  '.skp': true,\n  '.skd': true,\n  '.skt': true,\n  '.skm': true,\n  '.sse': true,\n  '.lasxml': true,\n  '.lbd': true,\n  '.lbe': true,\n  '.apr': true,\n  '.pre': true,\n  '.nsf': true,\n  '.scm': true,\n  '.lwp': true,\n  '.portpkg': true,\n  '.mcd': true,\n  '.mc1': true,\n  '.cdkey': true,\n  '.mwf': true,\n  '.mfm': true,\n  '.flo': true,\n  '.igx': true,\n  '.mif': true,\n  '.daf': true,\n  '.dis': true,\n  '.mbk': true,\n  '.mqy': true,\n  '.msl': true,\n  '.plc': true,\n  '.txf': true,\n  '.mpn': true,\n  '.mpc': true,\n  '.xul': true,\n  '.cil': true,\n  '.cab': true,\n  '.xls': true,\n  '.xlm': true,\n  '.xla': true,\n  '.xlc': true,\n  '.xlt': true,\n  '.xlw': true,\n  '.xlam': true,\n  '.xlsb': true,\n  '.xlsm': true,\n  '.xltm': true,\n  '.eot': true,\n  '.chm': true,\n  '.ims': true,\n  '.lrm': true,\n  '.thmx': true,\n  '.cat': true,\n  '.stl': true,\n  '.ppt': true,\n  '.pps': true,\n  '.pot': true,\n  '.ppam': true,\n  '.pptm': true,\n  '.sldm': true,\n  '.ppsm': true,\n  '.potm': true,\n  '.mpp': true,\n  '.mpt': true,\n  '.docm': true,\n  '.dotm': true,\n  '.wps': true,\n  '.wks': true,\n  '.wcm': true,\n  '.wdb': true,\n  '.wpl': true,\n  '.xps': true,\n  '.mseq': true,\n  '.mus': true,\n  '.msty': true,\n  '.taglet': true,\n  '.nlu': true,\n  '.ntf': true,\n  '.nitf': true,\n  '.nnd': true,\n  '.nns': true,\n  '.nnw': true,\n  '.ngdat': true,\n  '.n-gage': true,\n  '.rpst': true,\n  '.rpss': true,\n  '.edm': true,\n  '.edx': true,\n  '.ext': true,\n  '.odc': true,\n  '.otc': true,\n  '.odb': true,\n  '.odf': true,\n  '.odft': true,\n  '.odg': true,\n  '.otg': true,\n  '.odi': true,\n  '.oti': true,\n  '.odp': true,\n  '.otp': true,\n  '.ods': true,\n  '.ots': true,\n  '.odt': true,\n  '.odm': true,\n  '.ott': true,\n  '.oth': true,\n  '.xo': true,\n  '.dd2': true,\n  '.oxt': true,\n  '.pptx': true,\n  '.sldx': true,\n  '.ppsx': true,\n  '.potx': true,\n  '.xlsx': true,\n  '.xltx': true,\n  '.docx': true,\n  '.dotx': true,\n  '.mgp': true,\n  '.dp': true,\n  '.esa': true,\n  '.pdb': true,\n  '.pqa': true,\n  '.oprc': true,\n  '.paw': true,\n  '.str': true,\n  '.ei6': true,\n  '.efif': true,\n  '.wg': true,\n  '.plf': true,\n  '.pbd': true,\n  '.box': true,\n  '.mgz': true,\n  '.qps': true,\n  '.ptid': true,\n  '.qxd': true,\n  '.qxt': true,\n  '.qwd': true,\n  '.qwt': true,\n  '.qxl': true,\n  '.qxb': true,\n  '.bed': true,\n  '.mxl': true,\n  '.musicxml': true,\n  '.cryptonote': true,\n  '.cod': true,\n  '.rm': true,\n  '.rmvb': true,\n  '.link66': true,\n  '.see': true,\n  '.sema': true,\n  '.semd': true,\n  '.semf': true,\n  '.ifm': true,\n  '.itp': true,\n  '.iif': true,\n  '.ipk': true,\n  '.twd': true,\n  '.twds': true,\n  '.mmf': true,\n  '.teacher': true,\n  '.sdkm': true,\n  '.sdkd': true,\n  '.dxp': true,\n  '.sfs': true,\n  '.sdc': true,\n  '.sda': true,\n  '.sdd': true,\n  '.smf': true,\n  '.sdw': true,\n  '.vor': true,\n  '.sgl': true,\n  '.smzip': true,\n  '.sm': true,\n  '.sxc': true,\n  '.stc': true,\n  '.sxd': true,\n  '.std': true,\n  '.sxi': true,\n  '.sti': true,\n  '.sxm': true,\n  '.sxw': true,\n  '.sxg': true,\n  '.stw': true,\n  '.sus': true,\n  '.susp': true,\n  '.svd': true,\n  '.sis': true,\n  '.sisx': true,\n  '.xsm': true,\n  '.bdm': true,\n  '.xdm': true,\n  '.tao': true,\n  '.pcap': true,\n  '.cap': true,\n  '.dmp': true,\n  '.tmo': true,\n  '.tpt': true,\n  '.mxs': true,\n  '.tra': true,\n  '.ufd': true,\n  '.ufdl': true,\n  '.umj': true,\n  '.unityweb': true,\n  '.uoml': true,\n  '.vcx': true,\n  '.vsd': true,\n  '.vst': true,\n  '.vss': true,\n  '.vsw': true,\n  '.vis': true,\n  '.vsf': true,\n  '.wbxml': true,\n  '.wmlc': true,\n  '.wmlsc': true,\n  '.wtb': true,\n  '.nbp': true,\n  '.wpd': true,\n  '.wqd': true,\n  '.stf': true,\n  '.xar': true,\n  '.xfdl': true,\n  '.hvd': true,\n  '.hvs': true,\n  '.hvp': true,\n  '.osf': true,\n  '.osfpvg': true,\n  '.saf': true,\n  '.spf': true,\n  '.cmp': true,\n  '.zir': true,\n  '.zirz': true,\n  '.zaz': true,\n  '.vxml': true,\n  '.wgt': true,\n  '.hlp': true,\n  '.wsdl': true,\n  '.wspolicy': true,\n  '.7z': true,\n  '.abw': true,\n  '.ace': true,\n  '.aab': true,\n  '.x32': true,\n  '.u32': true,\n  '.vox': true,\n  '.aam': true,\n  '.aas': true,\n  '.bcpio': true,\n  '.torrent': true,\n  '.blb': true,\n  '.blorb': true,\n  '.bz': true,\n  '.bz2': true,\n  '.boz': true,\n  '.cbr': true,\n  '.cba': true,\n  '.cbt': true,\n  '.cbz': true,\n  '.cb7': true,\n  '.vcd': true,\n  '.cfs': true,\n  '.chat': true,\n  '.pgn': true,\n  '.crx': true,\n  '.cco': true,\n  '.nsc': true,\n  '.cpio': true,\n  '.csh': true,\n  '.udeb': true,\n  '.dgc': true,\n  '.dir': true,\n  '.dcr': true,\n  '.dxr': true,\n  '.cst': true,\n  '.cct': true,\n  '.cxt': true,\n  '.w3d': true,\n  '.fgd': true,\n  '.swa': true,\n  '.wad': true,\n  '.ncx': true,\n  '.dtb': true,\n  '.res': true,\n  '.dvi': true,\n  '.evy': true,\n  '.eva': true,\n  '.bdf': true,\n  '.gsf': true,\n  '.psf': true,\n  '.otf': true,\n  '.pcf': true,\n  '.snf': true,\n  '.ttf': true,\n  '.ttc': true,\n  '.pfa': true,\n  '.pfb': true,\n  '.pfm': true,\n  '.afm': true,\n  '.arc': true,\n  '.spl': true,\n  '.gca': true,\n  '.ulx': true,\n  '.gnumeric': true,\n  '.gramps': true,\n  '.gtar': true,\n  '.hdf': true,\n  '.install': true,\n  '.jardiff': true,\n  '.jnlp': true,\n  '.latex': true,\n  '.luac': true,\n  '.lzh': true,\n  '.lha': true,\n  '.run': true,\n  '.mie': true,\n  '.prc': true,\n  '.mobi': true,\n  '.application': true,\n  '.lnk': true,\n  '.wmd': true,\n  '.wmz': true,\n  '.xbap': true,\n  '.mdb': true,\n  '.obd': true,\n  '.crd': true,\n  '.clp': true,\n  '.bat': true,\n  '.mvb': true,\n  '.m13': true,\n  '.m14': true,\n  '.wmf': true,\n  '.emf': true,\n  '.emz': true,\n  '.mny': true,\n  '.pub': true,\n  '.scd': true,\n  '.trm': true,\n  '.wri': true,\n  '.cdf': true,\n  '.pac': true,\n  '.nzb': true,\n  '.pm': true,\n  '.p12': true,\n  '.pfx': true,\n  '.p7b': true,\n  '.spc': true,\n  '.p7r': true,\n  '.rar': true,\n  '.rpm': true,\n  '.ris': true,\n  '.sea': true,\n  '.sh': true,\n  '.shar': true,\n  '.swf': true,\n  '.xap': true,\n  '.sql': true,\n  '.sit': true,\n  '.sitx': true,\n  '.srt': true,\n  '.sv4cpio': true,\n  '.sv4crc': true,\n  '.t3': true,\n  '.gam': true,\n  '.tar': true,\n  '.tcl': true,\n  '.tk': true,\n  '.tex': true,\n  '.tfm': true,\n  '.texinfo': true,\n  '.texi': true,\n  '.obj': true,\n  '.ustar': true,\n  '.src': true,\n  '.webapp': true,\n  '.der': true,\n  '.crt': true,\n  '.pem': true,\n  '.fig': true,\n  '.xlf': true,\n  '.xpi': true,\n  '.xz': true,\n  '.z1': true,\n  '.z2': true,\n  '.z3': true,\n  '.z4': true,\n  '.z5': true,\n  '.z6': true,\n  '.z7': true,\n  '.z8': true,\n  '.xaml': true,\n  '.xdf': true,\n  '.xenc': true,\n  '.xht': true,\n  '.xml': true,\n  '.xsl': true,\n  '.xsd': true,\n  '.rng': true,\n  '.dtd': true,\n  '.xop': true,\n  '.xpl': true,\n  '.xslt': true,\n  '.xspf': true,\n  '.mxml': true,\n  '.xhvml': true,\n  '.xvml': true,\n  '.xvm': true,\n  '.yang': true,\n  '.yin': true,\n  '.zip': true,\n  '.3gpp': true,\n  '.adp': true,\n  '.snd': true,\n  '.mid': true,\n  '.midi': true,\n  '.kar': true,\n  '.rmi': true,\n  '.mp3': true,\n  '.m4a': true,\n  '.mp4a': true,\n  '.mpga': true,\n  '.mp2': true,\n  '.mp2a': true,\n  '.m2a': true,\n  '.m3a': true,\n  '.oga': true,\n  '.ogg': true,\n  '.spx': true,\n  '.s3m': true,\n  '.sil': true,\n  '.uva': true,\n  '.uvva': true,\n  '.eol': true,\n  '.dra': true,\n  '.dts': true,\n  '.dtshd': true,\n  '.lvp': true,\n  '.pya': true,\n  '.ecelp4800': true,\n  '.ecelp7470': true,\n  '.ecelp9600': true,\n  '.rip': true,\n  '.wav': true,\n  '.weba': true,\n  '.aac': true,\n  '.aif': true,\n  '.aiff': true,\n  '.aifc': true,\n  '.caf': true,\n  '.flac': true,\n  '.mka': true,\n  '.m3u': true,\n  '.wax': true,\n  '.wma': true,\n  '.ram': true,\n  '.ra': true,\n  '.rmp': true,\n  '.xm': true,\n  '.cdx': true,\n  '.cif': true,\n  '.cmdf': true,\n  '.cml': true,\n  '.csml': true,\n  '.xyz': true,\n  '.apng': true,\n  '.bmp': true,\n  '.cgm': true,\n  '.g3': true,\n  '.gif': true,\n  '.ief': true,\n  '.jpeg': true,\n  '.jpg': true,\n  '.jpe': true,\n  '.ktx': true,\n  '.png': true,\n  '.btif': true,\n  '.sgi': true,\n  '.svg': true,\n  '.svgz': true,\n  '.tiff': true,\n  '.tif': true,\n  '.psd': true,\n  '.uvi': true,\n  '.uvvi': true,\n  '.uvg': true,\n  '.uvvg': true,\n  '.djvu': true,\n  '.djv': true,\n  '.sub': true,\n  '.dwg': true,\n  '.dxf': true,\n  '.fbs': true,\n  '.fpx': true,\n  '.fst': true,\n  '.mmr': true,\n  '.rlc': true,\n  '.mdi': true,\n  '.wdp': true,\n  '.npx': true,\n  '.wbmp': true,\n  '.xif': true,\n  '.webp': true,\n  '.3ds': true,\n  '.ras': true,\n  '.cmx': true,\n  '.fh': true,\n  '.fhc': true,\n  '.fh4': true,\n  '.fh5': true,\n  '.fh7': true,\n  '.ico': true,\n  '.jng': true,\n  '.sid': true,\n  '.pcx': true,\n  '.pic': true,\n  '.pct': true,\n  '.pnm': true,\n  '.pbm': true,\n  '.pgm': true,\n  '.ppm': true,\n  '.rgb': true,\n  '.tga': true,\n  '.xbm': true,\n  '.xpm': true,\n  '.xwd': true,\n  '.eml': true,\n  '.mime': true,\n  '.igs': true,\n  '.iges': true,\n  '.msh': true,\n  '.mesh': true,\n  '.silo': true,\n  '.dae': true,\n  '.dwf': true,\n  '.gdl': true,\n  '.gtw': true,\n  '.mts': true,\n  '.vtu': true,\n  '.wrl': true,\n  '.vrml': true,\n  '.x3db': true,\n  '.x3dbz': true,\n  '.x3dv': true,\n  '.x3dvz': true,\n  '.x3d': true,\n  '.x3dz': true,\n  '.appcache': true,\n  '.manifest': true,\n  '.ics': true,\n  '.ifb': true,\n  '.coffee': true,\n  '.litcoffee': true,\n  '.css': true,\n  '.csv': true,\n  '.hjson': true,\n  '.jade': true,\n  '.jsx': true,\n  '.less': true,\n  '.mml': true,\n  '.n3': true,\n  '.txt': true,\n  '.text': true,\n  '.conf': true,\n  '.def': true,\n  '.log': true,\n  '.ini': true,\n  '.dsc': true,\n  '.rtx': true,\n  '.sgml': true,\n  '.sgm': true,\n  '.slim': true,\n  '.slm': true,\n  '.stylus': true,\n  '.styl': true,\n  '.tsv': true,\n  '.t': true,\n  '.roff': true,\n  '.man': true,\n  '.ms': true,\n  '.ttl': true,\n  '.uri': true,\n  '.uris': true,\n  '.urls': true,\n  '.vcard': true,\n  '.curl': true,\n  '.dcurl': true,\n  '.mcurl': true,\n  '.scurl': true,\n  '.fly': true,\n  '.flx': true,\n  '.gv': true,\n  '.3dml': true,\n  '.spot': true,\n  '.jad': true,\n  '.wml': true,\n  '.wmls': true,\n  '.vtt': true,\n  '.s': true,\n  '.asm': true,\n  '.c': true,\n  '.cxx': true,\n  '.cpp': true,\n  '.h': true,\n  '.hh': true,\n  '.dic': true,\n  '.htc': true,\n  '.f': true,\n  '.for': true,\n  '.f77': true,\n  '.f90': true,\n  '.hbs': true,\n  '.java': true,\n  '.lua': true,\n  '.markdown': true,\n  '.md': true,\n  '.mkd': true,\n  '.nfo': true,\n  '.opml': true,\n  '.p': true,\n  '.pas': true,\n  '.pde': true,\n  '.sass': true,\n  '.scss': true,\n  '.etx': true,\n  '.sfv': true,\n  '.ymp': true,\n  '.uu': true,\n  '.vcs': true,\n  '.vcf': true,\n  '.yaml': true,\n  '.yml': true,\n  '.3gp': true,\n  '.3g2': true,\n  '.h261': true,\n  '.h263': true,\n  '.h264': true,\n  '.jpgv': true,\n  '.jpm': true,\n  '.jpgm': true,\n  '.mj2': true,\n  '.mjp2': true,\n  '.ts': true,\n  '.mp4': true,\n  '.mp4v': true,\n  '.mpg4': true,\n  '.mpeg': true,\n  '.mpg': true,\n  '.mpe': true,\n  '.m1v': true,\n  '.m2v': true,\n  '.ogv': true,\n  '.qt': true,\n  '.mov': true,\n  '.uvh': true,\n  '.uvvh': true,\n  '.uvm': true,\n  '.uvvm': true,\n  '.uvp': true,\n  '.uvvp': true,\n  '.uvs': true,\n  '.uvvs': true,\n  '.uvv': true,\n  '.uvvv': true,\n  '.dvb': true,\n  '.fvt': true,\n  '.mxu': true,\n  '.m4u': true,\n  '.pyv': true,\n  '.uvu': true,\n  '.uvvu': true,\n  '.viv': true,\n  '.webm': true,\n  '.f4v': true,\n  '.fli': true,\n  '.flv': true,\n  '.m4v': true,\n  '.mkv': true,\n  '.mk3d': true,\n  '.mks': true,\n  '.mng': true,\n  '.asf': true,\n  '.vob': true,\n  '.wm': true,\n  '.wmv': true,\n  '.wmx': true,\n  '.wvx': true,\n  '.avi': true,\n  '.movie': true,\n  '.smv': true,\n  '.ice': true\n}\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/utils/bigExtLookup.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 326,
    "kind": "file",
    "name": "lib/utils/colorPrinters.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017 - present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nconst chalk = require('chalk')\nconst PrettyError = require('pretty-error')\n/**\n * @type {module:pretty-error.PrettyError}\n */\nconst pe = new PrettyError()\n\npe.appendStyle({\n  'pretty-error > header > message': {\n    color: 'bright-red'\n  }\n})\n\n/**\n * @desc Utility class for displaying colored text in console\n */\nclass ColorPrinters {\n  /**\n   * @desc Yellow colored console.log\n   * @param args\n   */\n  static yellow (...args) {\n    console.log(chalk.yellow(...args))\n  }\n\n  /**\n   * @desc Green colored console.log\n   * @param args\n   */\n  static green (...args) {\n    console.log(chalk.green(...args))\n  }\n\n  /**\n   * @desc Red colored console.log\n   * @param args\n   */\n  static red (...args) {\n    console.log(chalk.red(...args))\n  }\n\n  /**\n   * @desc Bright red colored console.log\n   * @param args\n   */\n  static bred (...args) {\n    console.log(chalk.bold.red(...args))\n  }\n\n  /**\n   * @desc Blue colored console.log\n   * @param args\n   */\n  static blue (...args) {\n    console.log(chalk.blue(...args))\n  }\n\n  /**\n   * @desc Cyan colored console.log\n   * @param args\n   */\n  static cyan (...args) {\n    console.log(chalk.cyan(...args))\n  }\n\n  /**\n   * @desc Magenta colored console.log\n   * @param args\n   */\n  static magenta (...args) {\n    console.log(chalk.magenta(...args))\n  }\n\n  /**\n   * @desc Display an error message and pretty print the exception\n   * @param {string} m - The message to display\n   * @param {Error} error - The exception to pretty print\n   */\n  static error (m, error) {\n    console.log(chalk.bold.red(m))\n    console.log(pe.render(error))\n  }\n\n  /**\n   * @desc Bold blue first arg, green rest\n   * @param bb\n   * @param rest\n   */\n  static boldBlueGreen (bb, ...rest) {\n    console.log(chalk.bold.blue(bb), chalk.green(...rest))\n  }\n\n  /**\n   * @desc Display an crawler option ack\n   * @param f\n   * @param r\n   */\n  static crawlerOpt (f, ...r) {\n    console.log(chalk.bold.blue(f), chalk.bold.yellow(...r))\n  }\n\n  /**\n   * @desc Display message about how the crawl config is broke\n   * @param m\n   * @param config\n   */\n  static configError (m, config) {\n    console.log(chalk.bold.red(m))\n    console.log(chalk.red(JSON.stringify(config, null, '\\t')))\n  }\n}\n\n/**\n * @type {chalk}\n */\nColorPrinters.chalk = chalk\n\n/**\n * @type {ColorPrinters}\n */\nmodule.exports = ColorPrinters\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/utils/colorPrinters.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 327,
    "kind": "variable",
    "name": "pe",
    "memberof": "lib/utils/colorPrinters.js",
    "static": true,
    "longname": "lib/utils/colorPrinters.js~pe",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/utils/colorPrinters.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "module:pretty-error.PrettyError"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 328,
    "kind": "class",
    "name": "ColorPrinters",
    "memberof": "lib/utils/colorPrinters.js",
    "static": true,
    "longname": "lib/utils/colorPrinters.js~ColorPrinters",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/utils/colorPrinters.js",
    "importStyle": "ColorPrinters",
    "description": "Utility class for displaying colored text in console",
    "lineNumber": 34,
    "interface": false
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "yellow",
    "memberof": "lib/utils/colorPrinters.js~ColorPrinters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/colorPrinters.js~ColorPrinters.yellow",
    "access": "public",
    "description": "Yellow colored console.log",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "green",
    "memberof": "lib/utils/colorPrinters.js~ColorPrinters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/colorPrinters.js~ColorPrinters.green",
    "access": "public",
    "description": "Green colored console.log",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "red",
    "memberof": "lib/utils/colorPrinters.js~ColorPrinters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/colorPrinters.js~ColorPrinters.red",
    "access": "public",
    "description": "Red colored console.log",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "bred",
    "memberof": "lib/utils/colorPrinters.js~ColorPrinters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/colorPrinters.js~ColorPrinters.bred",
    "access": "public",
    "description": "Bright red colored console.log",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "blue",
    "memberof": "lib/utils/colorPrinters.js~ColorPrinters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/colorPrinters.js~ColorPrinters.blue",
    "access": "public",
    "description": "Blue colored console.log",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "cyan",
    "memberof": "lib/utils/colorPrinters.js~ColorPrinters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/colorPrinters.js~ColorPrinters.cyan",
    "access": "public",
    "description": "Cyan colored console.log",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "magenta",
    "memberof": "lib/utils/colorPrinters.js~ColorPrinters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/colorPrinters.js~ColorPrinters.magenta",
    "access": "public",
    "description": "Magenta colored console.log",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "error",
    "memberof": "lib/utils/colorPrinters.js~ColorPrinters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/colorPrinters.js~ColorPrinters.error",
    "access": "public",
    "description": "Display an error message and pretty print the exception",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": "The message to display"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "The exception to pretty print"
      }
    ],
    "return": null
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "boldBlueGreen",
    "memberof": "lib/utils/colorPrinters.js~ColorPrinters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/colorPrinters.js~ColorPrinters.boldBlueGreen",
    "access": "public",
    "description": "Bold blue first arg, green rest",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bb",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rest",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "crawlerOpt",
    "memberof": "lib/utils/colorPrinters.js~ColorPrinters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/colorPrinters.js~ColorPrinters.crawlerOpt",
    "access": "public",
    "description": "Display an crawler option ack",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "configError",
    "memberof": "lib/utils/colorPrinters.js~ColorPrinters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/colorPrinters.js~ColorPrinters.configError",
    "access": "public",
    "description": "Display message about how the crawl config is broke",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 340,
    "kind": "file",
    "name": "lib/utils/index.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017 - present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\n/**\n * @type {{isEmptyPlainObject: isEmptyPlainObject}}\n */\nmodule.exports = {\n  isEmptyPlainObject: require('./isEmptyPlainObject')\n}\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/utils/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 341,
    "kind": "file",
    "name": "lib/utils/isEmptyPlainObject.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017 - present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nconst isEmpty = require('lodash/isEmpty')\n\n/**\n * @desc Test to see if a ``plain object`` is empty\n * @param {Object?} object\n * @return {boolean}\n */\nmodule.exports = function isEmptyPlainObject (object) {\n  if (object === null || object === undefined) {\n    return true\n  }\n  return isEmpty(object)\n}\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/utils/isEmptyPlainObject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 342,
    "kind": "function",
    "name": "isEmptyPlainObject",
    "memberof": "lib/utils/isEmptyPlainObject.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/isEmptyPlainObject.js~isEmptyPlainObject",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/utils/isEmptyPlainObject.js",
    "importStyle": "isEmptyPlainObject",
    "description": "Test to see if a ``plain object`` is empty",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 343,
    "kind": "file",
    "name": "lib/utils/promises.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017 - present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nconst cp = require('../utils/colorPrinters')\n\n/**\n * @ignore\n * @desc Default function that does nothing\n */\nfunction thenNoop () {}\n\n/**\n * @desc Default catch function for promises. Prints error and message\n * @param {Error} err\n */\nfunction defaultCatcher (err) {\n  cp.error('A Fatal Error Occurred', err)\n  cp.bred(\n    'Please Inform The Maintainer Of This Project About It. Information In package.json'\n  )\n  process.exit()\n}\n\n/**\n * @desc Runs a promise using the supplied thener and catcher functions\n * @param {function()|Promise} runnable The promise or async / promise returning function to run\n * @param {function(...args: any)} [thener]  The callback function to be supplied to Promise.then\n * @param {function(...args: any)} [catcher] The callback function to be supplied to Promise.catch\n * @return {void}\n */\nfunction runPromise (runnable, thener = thenNoop, catcher = defaultCatcher) {\n  if (typeof runnable.then === 'function') {\n    runnable.then(thener).catch(catcher)\n  } else {\n    runnable()\n      .then(thener)\n      .catch(catcher)\n  }\n}\n\n/**\n * @desc Composes the supplied function with {@link runPromise}.\n * @param {function(...args: any): Promise} runnable\n * @returns {function(...args: any): void}\n */\nexports.makeRunnable = function makeRunnable (runnable) {\n  return function () {\n    return runPromise(runnable.apply(this, arguments))\n  }\n}\n\n/**\n * @desc Promise wrapper around {@link setTimeout}\n * @param {number} amount - The amount of time to delay by\n * @return {Promise<void>}\n */\nexports.delay = function delay (amount) {\n  return new Promise(resolve => {\n    setTimeout(resolve, amount)\n  })\n}\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/utils/promises.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 344,
    "kind": "function",
    "name": "thenNoop",
    "memberof": "lib/utils/promises.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/promises.js~thenNoop",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/utils/promises.js",
    "importStyle": null,
    "description": "Default function that does nothing",
    "lineNumber": 24,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 345,
    "kind": "function",
    "name": "defaultCatcher",
    "memberof": "lib/utils/promises.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/promises.js~defaultCatcher",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/utils/promises.js",
    "importStyle": null,
    "description": "Default catch function for promises. Prints error and message",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 346,
    "kind": "function",
    "name": "runPromise",
    "memberof": "lib/utils/promises.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/promises.js~runPromise",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/utils/promises.js",
    "importStyle": null,
    "description": "Runs a promise using the supplied thener and catcher functions",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "function()",
          "Promise"
        ],
        "spread": false,
        "optional": false,
        "name": "runnable",
        "description": "The promise or async / promise returning function to run"
      },
      {
        "nullable": null,
        "types": [
          "function(...args: any)"
        ],
        "spread": false,
        "optional": true,
        "name": "thener",
        "description": "The callback function to be supplied to Promise.then"
      },
      {
        "nullable": null,
        "types": [
          "function(...args: any)"
        ],
        "spread": false,
        "optional": true,
        "name": "catcher",
        "description": "The callback function to be supplied to Promise.catch"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 347,
    "kind": "function",
    "name": "makeRunnable",
    "memberof": "lib/utils/promises.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/promises.js~makeRunnable",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/utils/promises.js",
    "importStyle": "{makeRunnable}",
    "description": "Composes the supplied function with {@link runPromise}.",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function(...args: any): void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(...args: any): Promise"
        ],
        "spread": false,
        "optional": false,
        "name": "runnable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function(...args: any): void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 348,
    "kind": "function",
    "name": "delay",
    "memberof": "lib/utils/promises.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/promises.js~delay",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/utils/promises.js",
    "importStyle": "{delay}",
    "description": "Promise wrapper around {@link setTimeout}",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "The amount of time to delay by"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 349,
    "kind": "file",
    "name": "lib/utils/seedUrlToSeedObject.js",
    "content": "/*\n Squidwarc Copyright (C) 2017 - present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nmodule.exports = {\n  pageOnly (seed) {\n    return { url: seed, mode: 'page-only' }\n  },\n  pageSD (seed) {\n    return { url: seed, mode: 'page-same-domain' }\n  },\n  pageALL (seed) {\n    return { url: seed, mode: 'page-all-links' }\n  }\n}\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/utils/seedUrlToSeedObject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 350,
    "kind": "file",
    "name": "lib/utils/urlUtils.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017 - present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nconst partialRight = require('lodash/partialRight')\nconst _normalizeURL = require('normalize-url')\n\n/**\n * @desc the default URL normalization function\n * does not strip ```www`` or ```fragment```\n */\nconst normalizeURL = partialRight(_normalizeURL, {\n  stripFragment: false,\n  stripWWW: false\n})\n\n/**\n * @desc wrapper around {@link https://github.com/sindresorhus/normalize-url} that\n * given a configuration for normalize-url returns a function that applies the normalization\n * to the supplied URL\n * @param {Object} configuration\n * @return {function (url: string): string}\n */\nfunction configureURLNormalizer (\n  configuration = { stripFragment: false, stripWWW: false }\n) {\n  return partialRight(_normalizeURL, configuration)\n}\n\n/**\n *\n * @type {{normalizeURL: function(string): string, configureURLNormalizer: (function(Object=): *)}}\n */\nmodule.exports = {\n  normalizeURL,\n  configureURLNormalizer\n}\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/utils/urlUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 351,
    "kind": "variable",
    "name": "normalizeURL",
    "memberof": "lib/utils/urlUtils.js",
    "static": true,
    "longname": "lib/utils/urlUtils.js~normalizeURL",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/utils/urlUtils.js",
    "importStyle": null,
    "description": "the default URL normalization function\ndoes not strip ```www`` or ```fragment```",
    "lineNumber": 25,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 352,
    "kind": "function",
    "name": "configureURLNormalizer",
    "memberof": "lib/utils/urlUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/urlUtils.js~configureURLNormalizer",
    "access": "public",
    "export": false,
    "importPath": "squidwarc/lib/utils/urlUtils.js",
    "importStyle": null,
    "description": "wrapper around {@link https://github.com/sindresorhus/normalize-url} that\ngiven a configuration for normalize-url returns a function that applies the normalization\nto the supplied URL",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "configuration",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function (url: string): string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 353,
    "kind": "file",
    "name": "lib/utils/warcNaming.js",
    "content": "/*\n Squidwarc  Copyright (C) 2017 - present  John Berlin <n0tan3rd@gmail.com>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Squidwarc is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this Squidwarc.  If not, see <http://www.gnu.org/licenses/>\n */\n\nconst fileNamify = require('filenamify-url')\nconst moment = require('moment')\nconst path = require('path')\nconst cp = require('./colorPrinters')\n\n/**\n * @desc Class that initializes the warc naming function used when generating the warcs\n */\nclass WARCNaming {\n  /**\n   * @desc Returns a function that will concatenate the output path with the filenamified seedURL\n   * producing the full path to WARC of the page being preserved\n   * @param {string} outPath the full path to the WARC file output directory\n   * @return {function(seedURL: string): string}\n   */\n  static warcNamePerURL (outPath) {\n    return seedURL =>\n      path.join(outPath, `${fileNamify(seedURL)}-${moment().format('MM-DD-YYYY_x')}.warc`)\n  }\n\n  /**\n   * @desc Returns a function that provides the full path to WARC file being written to\n   * @param {string} outPath  the full path to the WARC file output directory\n   * @param {string} warcName the name of the WARC file to create\n   * @return {function(): string}\n   */\n  static suppliedWarcName (outPath, warcName) {\n    const warcFilePath = path.join(outPath, warcName)\n    return () => warcFilePath\n  }\n\n  /**\n   * @desc Returns a function that creates a WARC filename based on the first URL supplied to returned function\n   * @param {string} outPath\n   * @return {function(seedURL: string): string}\n   */\n  static apndWarcNamePerURL (outPath) {\n    let fseed\n    return function (seedURL) {\n      if (fseed == null) {\n        fseed = path.join(\n          outPath,\n          `${fileNamify(seedURL)}-${moment().format('MM-DD-YYYY_x')}.warc`\n        )\n      }\n      return fseed\n    }\n  }\n\n  /**\n   * @desc Configures the function that produces the WARC(s) name\n   * @param {CrawlConfig} options\n   */\n  static getWarcNamingFunction ({ warc }) {\n    if (warc.naming.toLowerCase() === 'url') {\n      cp.crawlerOpt('Crawler Will Be Generating WARC Files Using', 'the filenamified url')\n      if (warc.append) return WARCNaming.apndWarcNamePerURL(warc.output)\n      return WARCNaming.warcNamePerURL(warc.output)\n    }\n    warc.append = true\n    cp.crawlerOpt('Crawler Will Be Generating A WARC File Named', warc.naming)\n    return WARCNaming.suppliedWarcName(warc.output, warc.naming)\n  }\n}\n\nmodule.exports = WARCNaming\n",
    "static": true,
    "longname": "/home/john/WebStormProjects/Squidwarc/lib/utils/warcNaming.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 354,
    "kind": "class",
    "name": "WARCNaming",
    "memberof": "lib/utils/warcNaming.js",
    "static": true,
    "longname": "lib/utils/warcNaming.js~WARCNaming",
    "access": "public",
    "export": true,
    "importPath": "squidwarc/lib/utils/warcNaming.js",
    "importStyle": "WARCNaming",
    "description": "Class that initializes the warc naming function used when generating the warcs",
    "lineNumber": 26,
    "interface": false
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "warcNamePerURL",
    "memberof": "lib/utils/warcNaming.js~WARCNaming",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/warcNaming.js~WARCNaming.warcNamePerURL",
    "access": "public",
    "description": "Returns a function that will concatenate the output path with the filenamified seedURL\nproducing the full path to WARC of the page being preserved",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "outPath",
        "description": "the full path to the WARC file output directory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function(seedURL: string): string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "suppliedWarcName",
    "memberof": "lib/utils/warcNaming.js~WARCNaming",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/warcNaming.js~WARCNaming.suppliedWarcName",
    "access": "public",
    "description": "Returns a function that provides the full path to WARC file being written to",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "outPath",
        "description": "the full path to the WARC file output directory"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "warcName",
        "description": "the name of the WARC file to create"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function(): string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "apndWarcNamePerURL",
    "memberof": "lib/utils/warcNaming.js~WARCNaming",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/warcNaming.js~WARCNaming.apndWarcNamePerURL",
    "access": "public",
    "description": "Returns a function that creates a WARC filename based on the first URL supplied to returned function",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "outPath",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function(seedURL: string): string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "getWarcNamingFunction",
    "memberof": "lib/utils/warcNaming.js~WARCNaming",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/warcNaming.js~WARCNaming.getWarcNamingFunction",
    "access": "public",
    "description": "Configures the function that produces the WARC(s) name",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "CrawlConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "<p align=\"center\">\n<img alt=\"Squidwarc\" src=\"https://github.com/N0taN3rd/Squidwarc/blob/master/meta/logo.png?raw=true\" width=\"30%\">\n</p>\n\n**Squidwarc** is a high fidelity, user scriptable, archival crawler that uses Chrome or Chromium with or without a head.\n\n**Squidwarc** aims to address the need for a high fidelity crawler akin to Heritrix while still being easy enough for the personal archivist to setup and use.\n\n**Squidwarc** does not seek (at the moment) to dethrone Heritrix as the queen of wide archival crawls rather\nseeks to address Heritrix's short comings namely:\n- No JavaScript execution\n- Everything is plain text\n- Requiring configuration to know how to preserve the web\n- Setup time and technical knowledge required of its users\n\nFor more information about this see\n- [Adapting the Hypercube Model to Archive Deferred Representations and Their Descendants](https://arxiv.org/abs/1601.05142)\n- [2012-10-10: Zombies in the Archives](http://ws-dl.blogspot.com/2012/10/2012-10-10-zombies-in-archives.html)\n- [2013-11-28: Replaying the SOPA Protest](http://ws-dl.blogspot.com/2013/11/2013-11-28-replaying-sopa-protest.html)\n- [2015-06-26: PhantomJS+VisualEvent or Selenium for Web Archiving?](http://ws-dl.blogspot.ca/2015/06/2015-06-26-phantomjsvisualevent-or.html)\n\n**Squidwarc** is built using Node.js, [node-warc](https://github.com/N0taN3rd/node-warc), and [chrome-remote-interface](https://github.com/cyrus-and/chrome-remote-interface).\n\nIf running a crawler through the commandline is not your thing, then **Squidwarc** highly recommends [warcworker](https://github.com/peterk/warcworker),\na web front end for **Squidwar** by [@peterk](https://github.com/peterk).\n\nIf you are unable to install Node on your system but have docker, then you can use the provided docker file or compose file.\n\nIf you have neither then **Squidwarc** highly recommends [WARCreate](http://warcreate.com/) or [WAIL](https://github.com/N0taN3rd/wail/releases).\nWARCreate did this first and if it had not **Squidwarc** would not exist :two_hearts:\n\nIf recording the web is what you seek, **Squidwarc** highly recommends [Webrecorder](https://webrecorder.io/).\n\n# Out Of The Box Crawls\n### Page Only\nPreserve the only the page, no links are followed\n\n### Page + Same Domain Links\nPage Only option plus preserve all links found on the page that are on the same domain as the page\n\n### Page + All internal and external links\nPage + Same Domain Link option plus all links from other domains\n\n# Usage\n\nRun `npm install` or `yarn` before continuing in order to install the dependencies for this project.   \n\nOnce the dependencies have been installed you can execute `$ ./run-crawler.sh -c conf.json` or `$ node index.js -c conf.json` to start crawling!\n\n### Config file\nSquidwarc provides a sample configuration file for you and for more information\n\n[![JavaScript Style Guide](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n",
    "longname": "/home/john/WebStormProjects/Squidwarc/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"squidwarc\",\n  \"version\": \"1.2.0\",\n  \"main\": \"index.js\",\n  \"license\": \"GPL-3.0\",\n  \"scripts\": {\n    \"lint\": \"standard | snazzy\",\n    \"lint-fix\": \"standard --fix\",\n    \"format\": \"prettier-standard 'lib/**/*.js'\",\n    \"docs\": \"esdoc\"\n  },\n  \"dependencies\": {\n    \"bluebird\": \"^3.5.1\",\n    \"chalk\": \"^2.4.1\",\n    \"chrome-remote-interface\": \"^0.26.1\",\n    \"class-autobind\": \"^0.1.4\",\n    \"commander\": \"^2.17.1\",\n    \"eventemitter3\": \"^3.1.0\",\n    \"filenamify-url\": \"^1.0.0\",\n    \"fs-extra\": \"^7.0.0\",\n    \"lodash\": \"^4.17.10\",\n    \"mime\": \"^2.3.1\",\n    \"moment\": \"^2.22.2\",\n    \"node-warc\": \"^2.0.0\",\n    \"normalize-url\": \"^3.3.0\",\n    \"npm-check-updates\": \"^2.14.2\",\n    \"parse-domain\": \"^2.1.2\",\n    \"pretty-error\": \"^2.1.1\",\n    \"pretty-ms\": \"^3.2.0\",\n    \"puppeteer\": \"^1.7.0\",\n    \"string\": \"^3.3.3\",\n    \"untildify\": \"^3.0.3\",\n    \"uuid\": \"^3.3.2\",\n    \"validator\": \"^10.7.0\",\n    \"yargs\": \"^12.0.1\"\n  },\n  \"devDependencies\": {\n    \"@types/fs-extra\": \"^5.0.4\",\n    \"benchmark\": \"^2.1.4\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-custom-theme\": \"^1.4.2\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-external-ecmascript-plugin\": \"^1.0.0\",\n    \"esdoc-external-nodejs-plugin\": \"^1.0.0\",\n    \"esdoc-inject-style-plugin\": \"^1.0.0\",\n    \"esdoc-node\": \"^1.0.3\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"microtime\": \"^2.1.8\",\n    \"prettier-standard\": \"^8.0.1\",\n    \"snazzy\": \"^8.0.0\",\n    \"standard\": \"^12.0.1\"\n  },\n  \"standard\": {\n    \"ignore\": [\n      \"clientInspected.js\",\n      \"noindex.js\",\n      \"t.js\",\n      \"saveMeAPage.js\"\n    ],\n    \"globals\": [\n      \"$x\"\n    ]\n  }\n}\n",
    "longname": "/home/john/WebStormProjects/Squidwarc/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "# Features\n- High fidelity web archiving\n- [User scriptable](manual/configuration.html#script)\n- Designed for the personal archivist and power users alike\n- No browser available no problem\n- Lightweight and simple setup + configuration\n\n# About\n**Squidwarc** is a high fidelity, user scriptable, archival crawler that uses Chrome or Chromium with or without a head.\n\n**Squidwarc** aims to address the need for a high fidelity crawler akin to Heritrix while still being easy enough for the personal archivist to setup and use.\n\nFor more information about this see\n- [Adapting the Hypercube Model to Archive Deferred Representations and Their Descendants](https://arxiv.org/abs/1601.05142)\n- [2012-10-10: Zombies in the Archives](http://ws-dl.blogspot.com/2012/10/2012-10-10-zombies-in-archives.html)\n- [2013-11-28: Replaying the SOPA Protest](http://ws-dl.blogspot.com/2013/11/2013-11-28-replaying-sopa-protest.html)\n- [2015-06-26: PhantomJS+VisualEvent or Selenium for Web Archiving?](http://ws-dl.blogspot.ca/2015/06/2015-06-26-phantomjsvisualevent-or.html)\n\n# Quick Start\nRequirements: [Node.js](https://nodejs.org/en/)\n\nIf Docker is more your thing, then Squidwarc provides docker and compose file for your use.\n\n\n```shell\ngit clone https://github.com/N0taN3rd/Squidwarc.git\n\ncd Squidwarc\n\n./boostrap.sh\n\n./run-crawl.sh -c conf.json\n```\nTo learn about how to configure crawls see the [Crawl Configuration](manual/configuration.html) section of this manual.\n\nIf running a crawler through the commandline is not your thing you can use [warcworker](https://github.com/peterk/warcworker),\na dockerized web front end for Squidwarc by [@peterk](https://github.com/peterk).\n",
    "longname": "/home/john/WebStormProjects/Squidwarc/manual/index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/john/WebStormProjects/Squidwarc/manual/overview.md",
    "name": "./manual/overview.md",
    "content": "# Out Of The Box Crawls\n### Page Only\nPreserve the only the page, no links are followed\n\n### Page + Same Domain Links\nPage Only option plus preserve all links found on the page that are on the same domain as the page\n\n### Page + Links\nPage + Same Domain Link option plus all links from other domains\n\nFor more information about the configuring a crawl using one of these modes, please see the description for the\n[mode](configuration.html#mode) field of a crawls config file.\n\n\n# Installation\nRequirements: [Node.js](https://nodejs.org/en/)\n\n```shell\ngit clone https://github.com/N0taN3rd/Squidwarc.git\n\ncd Squidwarc\n\n./boostrap.sh\n```\n\nIf Docker is more your thing, then Squidwarc provides docker and compose file for your use.\n\n# Usage\n\nTo launch a crawl you can execute either\n- `./run-crawler.sh -c conf.json`\n- `node index.js -c conf.json`\n\nDocker usage:\n\nModify `volumes` field of the included docker-compose file to a local directory and place the crawl configuration file in it.\n\nPlease set the `warc` sub-field `output` to `./warcs` and then execute `docker-compose up` to launch the crawl!\n\nFor more information about the configuration file, please see the [Crawl Configuration](configuration.html) section of this manual.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/john/WebStormProjects/Squidwarc/manual/configuration.md",
    "name": "./manual/configuration.md",
    "content": "# Crawl Configuration\nSquidwarc uses `json` file format for its crawl configuration.\n\nThe full schema of the configuration file is displayed below, however not all fields are required.\n```\n{\n    use: string\n    mode: string\n    depth: int\n    headless: bool\n    seeds: [string] | string\n    script: path\n    warc: {\n      naming: string\n      output: path\n      append: bool\n      isPartOf: string\n      infoDescription: string\n    }\n    connect: {\n      host: string\n      port: string\n      launch: bool\n      userDataDir: string\n      executable: string\n    }\n    crawlControl: {\n      globalWait: int,\n      inflightIdle: int\n      navWait: int\n      numInflight: int\n    }\n}\n```\n\n## Required fields\n\n### seeds\nThe only field required bu Squidwarc is the `seeds` field for obvious reasons.\n\nIf any field is left out besides the `seeds` field Squidwarc will either use the default values, listed below,\nor set the field to a correct value based on the values of other fields.\n\nThe value of this field can be either an array of string (URLs) or a path to an JSON file containing the array of seed URLs\n\n## Optional fields\n\n### use\nShould Squidwarc use Chrome/Chromium directly or via puppeteer.\n\nWhen this field is `chrome` (default value) then either Chrome/Chromium must be installed and usable.\n\nIf the value of this field is `puppeteer` then Chrome/Chromium is not required to be installed,\nSquidwarc will ensure a usable version of Chromium is automatically downloaded and used.\n\nIf the value of the [script field](#script) is set and the script it points to contains a valid function this value\nis set to `puppeteer`.\n\n-  values: `chrome` or `puppeteer`\n-  default: `chrome`\n\n---\n\n### mode\nThe mode this crawl is to be operating in.\n-   default: page-only\n\n#### page-only\nPreserve the only the page, no links are followed\n- values: `page-only` or `po`\n\n#### page-same-domain\n`page-only` mode plus all links found on the page that are on the same domain as the page\n- values: `page-same-domain` or `psd`\n\n\n#### page-all-links\n`page-only` mode plus all links found on the page\n- values: `page-all-links` or `pal`\n\n---\n\n### depth\nThe depth of this crawl (how many pages out from a starting seed should be crawled)\n-   default: 1\n\n---\n\n### headless\nShould the browser launched and used by Squidwarc be in headless mode\n-   default: true\n\n---\n\n### script\nA path to script (js file) to be executed per page, causes the value of [`use`](#use) to be set to `puppeteer`.\n\nThe js file the `script` field points to is expected to export a single `async function` that accepts one argument:\n```js\nmodule.exports = async function (page) { .... }\n```\nBecause Squidwarc requires the file to be a Node.js module that exports a single `async function`,\nthe script has full access to the [Node.js API](https://nodejs.org/dist/latest-v10.x/docs/api/).\n\nWhen Squidwarc executes this function, Squidwarc will pass it the [puppeteer Page](https://pptr.dev/#?product=Puppeteer&version=v1.7.0&show=api-class-page)\nobject for the page being crawled.\n\nSquidwarc will then wait for the Promise returned by the function to resolve and the network to idle before WARC generation begins.\n\nAn example script is provided called [userFns.js](https://github.com/N0taN3rd/Squidwarc/blob/master/userFns.js) found in the root of this project.\n\n**Squidwarc is not responsible for ill-behaved scripts**\n\n---\n\n### warc\n\nOptions for how the crawls WARCs should be created\n\n#### naming\n\nThe naming scheme to be used for WARC generation\n\nScheme url\n- warcs will be created named `[url crawled]-datetime`.warc\n- and `append = true` warcs will be created named `[first crawled url]-datetime`.warc\n\nThe only other value accepted is a file name to be used, this will cause [append](#append) to be set to true.\n\nSquidwarc will ensure the URLs used apart of filenames will be a valid file name.\n\n- default: url\n\n\n#### output\nPath to the directory the WARCs are to be created in\n\n-   default: current working directory\n\n\n#### append\nShould Squidwarc create a single WARC file for the crawl or a WARC file per page crawled\n-   default: false\n\n---\n\n### connect\nInformation about how to connect to or launch Chrome/Chromium\n\n#### host\nThe host name the browsers CDP endpoint is listing on\n-   default: localhost\n\n\n#### port\nThe port number the browsers CDP endpoint is listing on\n-   default: 9222\n\n#### launch\nShould Squidwarc launch and manage the browser or connect to an already running instance.\n\nIf this value is set to true and [executable](#executable) is not set, Squidwarc will attempt to find a usable executable\nwhen [use](#use) = `chrome`.\n\n-  default: true\n\n#### executable\nPath to the browser executable or command to be used to launch the browser\n\nIf this value is set and [launch](#launch) is `true`, Squidwarc will use this value rather than attempting to find\nan usable executable.\n\n#### userDataDir\nPath to a user data directory to be used rather than a temporary one.\n\nThis field is useful when you want to preserve a page that is behind authentication and\nyou are already signed in and view that page using your local version of Chrome/Chromium.\n\nIt is recommended to use the full path to the user data directory to ensure 100% usability.\n\nOn Linux the default location is in ~/.config:\n- [Chrome Stable] ~/.config/google-chrome\n- [Chrome Beta] ~/.config/google-chrome-beta\n- [Chrome Dev] ~/.config/google-chrome-unstable\n- [Chromium] ~/.config/chromium\n\nOn Mac OS X the default location is in the Application Support folder:\n- [Chrome] ~/Library/Application Support/Google/Chrome\n- [Chrome Canary] ~/Library/Application Support/Google/Chrome Canary\n- [Chromium] ~/Library/Application Support/Chromium\n\n\nOn Windows the default location is in the local app data folder:\n- [Chrome] %LOCALAPPDATA%\\Google\\Chrome\\User Data\n- [Chrome Canary] %LOCALAPPDATA%\\Google\\Chrome SxS\\User Data\n- [Chromium] %LOCALAPPDATA%\\Chromium\\User Data\n\n---\n\n### crawlControl\nOptions for fine tuning the crawl\n\n\n#### globalWait\nMaximum amount of time, in milliseconds, that Squidwarc should wait\nbefore generating a WARC and moving to the next URL.\n-   default: 60000\n\n#### numInflight\n\nThe number of inflight requests (requests with no response) that should\nexist before starting the inflightIdle timer.\n-   default: 2\n\n\n\n#### inflightIdle\n\nAmount of time, in milliseconds, that should elapse when there are only\nnumInflight requests for network idle to be determined.\n-   default: 1000\n\n\n#### navWait\nMaximum amount of time, in milliseconds, that Squidwarc should wait for\nindication that the browser has navigated to the page being crawled.\n-   default: 8000\n\n\n\n\n\n\n\n",
    "static": true,
    "access": "public"
  }
]